!function(t){function n(e){if(g[e])return g[e].exports;var I=g[e]={i:e,l:!1,exports:{}};return t[e].call(I.exports,I,I.exports,n),I.l=!0,I.exports}var g={};return n.m=t,n.c=g,n.i=function(t){return t},n.d=function(t,g,e){n.o(t,g)||Object.defineProperty(t,g,{configurable:!1,enumerable:!0,get:e})},n.n=function(t){var g=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(g,"a",g),g},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=28)}([/*!***************************************************!*\
  !*** ../~/vue-loader/lib/component-normalizer.js ***!
  \***************************************************/
function(module,exports){eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzPzdkYTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBzY29wZUlkLFxuICBjc3NNb2R1bGVzXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICAvLyBpbmplY3QgY3NzTW9kdWxlc1xuICBpZiAoY3NzTW9kdWxlcykge1xuICAgIHZhciBjb21wdXRlZCA9IG9wdGlvbnMuY29tcHV0ZWQgfHwgKG9wdGlvbnMuY29tcHV0ZWQgPSB7fSlcbiAgICBPYmplY3Qua2V5cyhjc3NNb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBjc3NNb2R1bGVzW2tleV1cbiAgICAgIGNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},/*!************************!*\
  !*** ./store/store.js ***!
  \************************/
function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\nexports.store = undefined;\n\nvar _vue = __webpack_require__(/*! vue */ 2);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _vuex = __webpack_require__(/*! vuex */ 26);\n\nvar _vuex2 = _interopRequireDefault(_vuex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*=============================================>>>>>\n= STORES =\n===============================================>>>>>*/\n\n_vue2.default.use(_vuex2.default);\n\nvar store = exports.store = new _vuex2.default.Store({\n\tstate: {\n\t\tmenu_activity: false,\n\t\tactive_menu_item: null,\n\t\tbg_url: null\n\t},\n\tgetters: {\n\t\treturnActivity: function returnActivity(state) {\n\t\t\treturn state.active_menu_item;\n\t\t},\n\t\tmenuActivity: function menuActivity(state) {\n\t\t\treturn state.menu_activity;\n\t\t}\n\t},\n\tmutations: {\n\t\ttriggerMenu: function triggerMenu(state) {\n\t\t\tvar menu_activity = state.menu_activity;\n\n\t\t\tstate.menu_activity = !menu_activity;\n\t\t},\n\t\tsetMenuActivity: function setMenuActivity(state, item) {\n\t\t\tstate.active_menu_item = item;\n\t\t}\n\t}\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9zdG9yZS5qcyJdLCJuYW1lcyI6WyJ1c2UiLCJzdG9yZSIsIlN0b3JlIiwic3RhdGUiLCJtZW51X2FjdGl2aXR5IiwiYWN0aXZlX21lbnVfaXRlbSIsImJnX3VybCIsImdldHRlcnMiLCJyZXR1cm5BY3Rpdml0eSIsIm1lbnVBY3Rpdml0eSIsIm11dGF0aW9ucyIsInRyaWdnZXJNZW51Iiwic2V0TWVudUFjdGl2aXR5IiwiaXRlbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBOzs7O0FBQ0E7Ozs7OztBQUxBOzs7O0FBT0EsY0FBSUEsR0FBSjs7QUFFTyxJQUFNQyx3QkFBUSxJQUFJLGVBQUtDLEtBQVQsQ0FBZTtBQUNuQ0MsUUFBTztBQUNOQyxpQkFBZSxLQURUO0FBRU5DLG9CQUFrQixJQUZaO0FBR05DLFVBQVE7QUFIRixFQUQ0QjtBQU1uQ0MsVUFBUztBQUNSQyxrQkFBZ0IsK0JBQVM7QUFDeEIsVUFBT0wsTUFBTUUsZ0JBQWI7QUFDQSxHQUhPO0FBSVJJLGdCQUFjLDZCQUFTO0FBQ3RCLFVBQU9OLE1BQU1DLGFBQWI7QUFDQTtBQU5PLEVBTjBCO0FBY25DTSxZQUFXO0FBQ1ZDLGVBQWEsNEJBQVM7QUFBQSxPQUNkUCxhQURjLEdBQ0dELEtBREgsQ0FDZEMsYUFEYzs7QUFFckJELFNBQU1DLGFBQU4sR0FBc0IsQ0FBQ0EsYUFBdkI7QUFDQSxHQUpTO0FBS1ZRLG1CQUFpQix5QkFBQ1QsS0FBRCxFQUFRVSxJQUFSLEVBQWlCO0FBQ2pDVixTQUFNRSxnQkFBTixHQUF5QlEsSUFBekI7QUFDQTtBQVBTO0FBZHdCLENBQWYsQ0FBZCIsImZpbGUiOiJzdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIvbWVkaWEvZXh0X2Rpc2svQ09ERUFSTUFEQS9odHRwL2V4cGVyaW1lbnRzL3Z1ZS9hcHAiLCJzb3VyY2VzQ29udGVudCI6WyIvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT4+Pj4+XG49IFNUT1JFUyA9XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT4+Pj4+Ki9cblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCc7XG5cblZ1ZS51c2UoVnVleCk7XG5cbmV4cG9ydCBjb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcblx0c3RhdGU6IHtcblx0XHRtZW51X2FjdGl2aXR5OiBmYWxzZSxcblx0XHRhY3RpdmVfbWVudV9pdGVtOiBudWxsLFxuXHRcdGJnX3VybDogbnVsbCxcblx0fSxcblx0Z2V0dGVyczoge1xuXHRcdHJldHVybkFjdGl2aXR5OiBzdGF0ZSA9PiB7XG5cdFx0XHRyZXR1cm4gc3RhdGUuYWN0aXZlX21lbnVfaXRlbTtcblx0XHR9LFxuXHRcdG1lbnVBY3Rpdml0eTogc3RhdGUgPT4ge1xuXHRcdFx0cmV0dXJuIHN0YXRlLm1lbnVfYWN0aXZpdHk7XG5cdFx0fSxcblx0fSxcblx0bXV0YXRpb25zOiB7XG5cdFx0dHJpZ2dlck1lbnU6IHN0YXRlID0+IHtcblx0XHRcdGNvbnN0IHttZW51X2FjdGl2aXR5fSA9IHN0YXRlO1xuXHRcdFx0c3RhdGUubWVudV9hY3Rpdml0eSA9ICFtZW51X2FjdGl2aXR5O1xuXHRcdH0sXG5cdFx0c2V0TWVudUFjdGl2aXR5OiAoc3RhdGUsIGl0ZW0pID0+IHtcblx0XHRcdHN0YXRlLmFjdGl2ZV9tZW51X2l0ZW0gPSBpdGVtO1xuXHRcdH0sXG5cdH0sXG59KTtcbiJdfQ==//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3N0b3JlL3N0b3JlLmpzPzFlOTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zdG9yZSA9IHVuZGVmaW5lZDtcblxudmFyIF92dWUgPSByZXF1aXJlKCd2dWUnKTtcblxudmFyIF92dWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVlKTtcblxudmFyIF92dWV4ID0gcmVxdWlyZSgndnVleCcpO1xuXG52YXIgX3Z1ZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVleCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Pj4+Pj5cbj0gU1RPUkVTID1cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Pj4+Pj4qL1xuXG5fdnVlMi5kZWZhdWx0LnVzZShfdnVleDIuZGVmYXVsdCk7XG5cbnZhciBzdG9yZSA9IGV4cG9ydHMuc3RvcmUgPSBuZXcgX3Z1ZXgyLmRlZmF1bHQuU3RvcmUoe1xuXHRzdGF0ZToge1xuXHRcdG1lbnVfYWN0aXZpdHk6IGZhbHNlLFxuXHRcdGFjdGl2ZV9tZW51X2l0ZW06IG51bGwsXG5cdFx0YmdfdXJsOiBudWxsXG5cdH0sXG5cdGdldHRlcnM6IHtcblx0XHRyZXR1cm5BY3Rpdml0eTogZnVuY3Rpb24gcmV0dXJuQWN0aXZpdHkoc3RhdGUpIHtcblx0XHRcdHJldHVybiBzdGF0ZS5hY3RpdmVfbWVudV9pdGVtO1xuXHRcdH0sXG5cdFx0bWVudUFjdGl2aXR5OiBmdW5jdGlvbiBtZW51QWN0aXZpdHkoc3RhdGUpIHtcblx0XHRcdHJldHVybiBzdGF0ZS5tZW51X2FjdGl2aXR5O1xuXHRcdH1cblx0fSxcblx0bXV0YXRpb25zOiB7XG5cdFx0dHJpZ2dlck1lbnU6IGZ1bmN0aW9uIHRyaWdnZXJNZW51KHN0YXRlKSB7XG5cdFx0XHR2YXIgbWVudV9hY3Rpdml0eSA9IHN0YXRlLm1lbnVfYWN0aXZpdHk7XG5cblx0XHRcdHN0YXRlLm1lbnVfYWN0aXZpdHkgPSAhbWVudV9hY3Rpdml0eTtcblx0XHR9LFxuXHRcdHNldE1lbnVBY3Rpdml0eTogZnVuY3Rpb24gc2V0TWVudUFjdGl2aXR5KHN0YXRlLCBpdGVtKSB7XG5cdFx0XHRzdGF0ZS5hY3RpdmVfbWVudV9pdGVtID0gaXRlbTtcblx0XHR9XG5cdH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl6ZEc5eVpTOXpkRzl5WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUoxYzJVaUxDSnpkRzl5WlNJc0lsTjBiM0psSWl3aWMzUmhkR1VpTENKdFpXNTFYMkZqZEdsMmFYUjVJaXdpWVdOMGFYWmxYMjFsYm5WZmFYUmxiU0lzSW1KblgzVnliQ0lzSW1kbGRIUmxjbk1pTENKeVpYUjFjbTVCWTNScGRtbDBlU0lzSW0xbGJuVkJZM1JwZG1sMGVTSXNJbTExZEdGMGFXOXVjeUlzSW5SeWFXZG5aWEpOWlc1MUlpd2ljMlYwVFdWdWRVRmpkR2wyYVhSNUlpd2lhWFJsYlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVWxCT3pzN08wRkJRMEU3T3pzN096dEJRVXhCT3pzN08wRkJUMEVzWTBGQlNVRXNSMEZCU2pzN1FVRkZUeXhKUVVGTlF5eDNRa0ZCVVN4SlFVRkpMR1ZCUVV0RExFdEJRVlFzUTBGQlpUdEJRVU51UTBNc1VVRkJUenRCUVVOT1F5eHBRa0ZCWlN4TFFVUlVPMEZCUlU1RExHOUNRVUZyUWl4SlFVWmFPMEZCUjA1RExGVkJRVkU3UVVGSVJpeEZRVVEwUWp0QlFVMXVRME1zVlVGQlV6dEJRVU5TUXl4clFrRkJaMElzSzBKQlFWTTdRVUZEZUVJc1ZVRkJUMHdzVFVGQlRVVXNaMEpCUVdJN1FVRkRRU3hIUVVoUE8wRkJTVkpKTEdkQ1FVRmpMRFpDUVVGVE8wRkJRM1JDTEZWQlFVOU9MRTFCUVUxRExHRkJRV0k3UVVGRFFUdEJRVTVQTEVWQlRqQkNPMEZCWTI1RFRTeFpRVUZYTzBGQlExWkRMR1ZCUVdFc05FSkJRVk03UVVGQlFTeFBRVU5rVUN4aFFVUmpMRWRCUTBkRUxFdEJSRWdzUTBGRFpFTXNZVUZFWXpzN1FVRkZja0pFTEZOQlFVMURMR0ZCUVU0c1IwRkJjMElzUTBGQlEwRXNZVUZCZGtJN1FVRkRRU3hIUVVwVE8wRkJTMVpSTEcxQ1FVRnBRaXg1UWtGQlExUXNTMEZCUkN4RlFVRlJWU3hKUVVGU0xFVkJRV2xDTzBGQlEycERWaXhUUVVGTlJTeG5Ra0ZCVGl4SFFVRjVRbEVzU1VGQmVrSTdRVUZEUVR0QlFWQlRPMEZCWkhkQ0xFTkJRV1lzUTBGQlpDSXNJbVpwYkdVaU9pSnpkRzl5WlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJdmJXVmthV0V2WlhoMFgyUnBjMnN2UTA5RVJVRlNUVUZFUVM5b2RIUndMMlY0Y0dWeWFXMWxiblJ6TDNaMVpTOWhjSEFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktqMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUNCtQajQrWEc0OUlGTlVUMUpGVXlBOVhHNDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDQrUGo0K0tpOWNibHh1YVcxd2IzSjBJRloxWlNCbWNtOXRJQ2QyZFdVbk8xeHVhVzF3YjNKMElGWjFaWGdnWm5KdmJTQW5kblZsZUNjN1hHNWNibFoxWlM1MWMyVW9WblZsZUNrN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCemRHOXlaU0E5SUc1bGR5QldkV1Y0TGxOMGIzSmxLSHRjYmx4MGMzUmhkR1U2SUh0Y2JseDBYSFJ0Wlc1MVgyRmpkR2wyYVhSNU9pQm1ZV3h6WlN4Y2JseDBYSFJoWTNScGRtVmZiV1Z1ZFY5cGRHVnRPaUJ1ZFd4c0xGeHVYSFJjZEdKblgzVnliRG9nYm5Wc2JDeGNibHgwZlN4Y2JseDBaMlYwZEdWeWN6b2dlMXh1WEhSY2RISmxkSFZ5YmtGamRHbDJhWFI1T2lCemRHRjBaU0E5UGlCN1hHNWNkRngwWEhSeVpYUjFjbTRnYzNSaGRHVXVZV04wYVhabFgyMWxiblZmYVhSbGJUdGNibHgwWEhSOUxGeHVYSFJjZEcxbGJuVkJZM1JwZG1sMGVUb2djM1JoZEdVZ1BUNGdlMXh1WEhSY2RGeDBjbVYwZFhKdUlITjBZWFJsTG0xbGJuVmZZV04wYVhacGRIazdYRzVjZEZ4MGZTeGNibHgwZlN4Y2JseDBiWFYwWVhScGIyNXpPaUI3WEc1Y2RGeDBkSEpwWjJkbGNrMWxiblU2SUhOMFlYUmxJRDArSUh0Y2JseDBYSFJjZEdOdmJuTjBJSHR0Wlc1MVgyRmpkR2wyYVhSNWZTQTlJSE4wWVhSbE8xeHVYSFJjZEZ4MGMzUmhkR1V1YldWdWRWOWhZM1JwZG1sMGVTQTlJQ0Z0Wlc1MVgyRmpkR2wyYVhSNU8xeHVYSFJjZEgwc1hHNWNkRngwYzJWMFRXVnVkVUZqZEdsMmFYUjVPaUFvYzNSaGRHVXNJR2wwWlcwcElEMCtJSHRjYmx4MFhIUmNkSE4wWVhSbExtRmpkR2wyWlY5dFpXNTFYMmwwWlcwZ1BTQnBkR1Z0TzF4dVhIUmNkSDBzWEc1Y2RIMHNYRzU5S1R0Y2JpSmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zdG9yZS9zdG9yZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9')},/*!***********************************!*\
  !*** ../~/vue/dist/vue.common.js ***!
  \***********************************/
function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.1.10\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n\n\n/*  */\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction _toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove$1 (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind$1 (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\nfunction isPlainObject (obj) {\n  return toString.call(obj) === OBJECT_STRING\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    return JSON.stringify(a) === JSON.stringify(b)\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/*  */\n\nvar config = {\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * List of asset types that a component can own.\n   */\n  _assetTypes: [\n    'component',\n    'directive',\n    'filter'\n  ],\n\n  /**\n   * List of lifecycle hooks.\n   */\n  _lifecycleHooks: [\n    'beforeCreate',\n    'created',\n    'beforeMount',\n    'mounted',\n    'beforeUpdate',\n    'updated',\n    'beforeDestroy',\n    'destroyed',\n    'activated',\n    'deactivated'\n  ],\n\n  /**\n   * Max circular updates allowed in a scheduler flush cycle.\n   */\n  _maxUpdateCount: 100\n};\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    var segments = path.split('.');\n    return function (obj) {\n      for (var i = 0; i < segments.length; i++) {\n        if (!obj) { return }\n        obj = obj[segments[i]];\n      }\n      return obj\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return /native code/.test(Ctor.toString())\n}\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) { cb.call(ctx); }\n      if (_resolve) { _resolve(ctx); }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\nvar warn = noop;\nvar formatComponentName;\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + \" \" + (\n        vm ? formatLocation(formatComponentName(vm)) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm) {\n    if (vm.$root === vm) {\n      return 'root instance'\n    }\n    var name = vm._isVue\n      ? vm.$options.name || vm.$options._componentTag\n      : vm.name;\n    return (\n      (name ? (\"component <\" + name + \">\") : \"anonymous component\") +\n      (vm._isVue && vm.$options.__file ? (\" at \" + (vm.$options.__file)) : '')\n    )\n  };\n\n  var formatLocation = function (str) {\n    if (str === 'anonymous component') {\n      str += \" - use the \\\"name\\\" option for better debugging messages.\";\n    }\n    return (\"\\n(found in \" + str + \")\")\n  };\n}\n\n/*  */\n\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove$1(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stablize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set$1 (obj, key, val) {\n  if (Array.isArray(obj)) {\n    obj.length = Math.max(obj.length, key);\n    obj.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return\n  }\n  var ob = obj.__ob__;\n  if (obj._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return\n  }\n  if (!ob) {\n    obj[key] = val;\n    return\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (obj, key) {\n  var ob = obj.__ob__;\n  if (obj._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(obj, key)) {\n    return\n  }\n  delete obj[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set$1(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nconfig._lifecycleHooks.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return parentVal }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return parentVal }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = typeof extendsFrom === 'function'\n      ? mergeOptions(parent, extendsFrom.options, vm)\n      : mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      if (mixin.prototype instanceof Vue$3) {\n        mixin = mixin.options;\n      }\n      parent = mergeOptions(parent, mixin, vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (false) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    \"production\" !== 'production' && warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm[key] !== undefined) {\n    return vm[key]\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && prop.type !== Function\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\n/**\n * Assert the type of a value\n */\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (expectedType === 'String') {\n    valid = typeof value === (expectedType = 'string');\n  } else if (expectedType === 'Number') {\n    valid = typeof value === (expectedType = 'number');\n  } else if (expectedType === 'Boolean') {\n    valid = typeof value === (expectedType = 'boolean');\n  } else if (expectedType === 'Function') {\n    valid = typeof value === (expectedType = 'function');\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match && match[1]\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive$$1,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\tmakeMap: makeMap,\n\tisBuiltInTag: isBuiltInTag,\n\tremove: remove$1,\n\thasOwn: hasOwn,\n\tisPrimitive: isPrimitive,\n\tcached: cached,\n\tcamelize: camelize,\n\tcapitalize: capitalize,\n\thyphenate: hyphenate,\n\tbind: bind$1,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\ttoObject: toObject,\n\tnoop: noop,\n\tno: no,\n\tidentity: identity,\n\tgenStaticKeys: genStaticKeys,\n\tlooseEqual: looseEqual,\n\tlooseIndexOf: looseIndexOf,\n\tisReserved: isReserved,\n\tdef: def,\n\tparsePath: parsePath,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tUA: UA,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisEdge: isEdge,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tisServerRendering: isServerRendering,\n\tdevtools: devtools,\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tget warn () { return warn; },\n\tget formatComponentName () { return formatComponentName; },\n\tvalidateProp: validateProp\n});\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var res = new Array(vnodes.length);\n  for (var i = 0; i < vnodes.length; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar hooks = { init: init, prepatch: prepatch, insert: insert, destroy: destroy$1 };\nvar hooksToMerge = Object.keys(hooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (!Ctor) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (!Ctor.cid) {\n    if (Ctor.resolved) {\n      Ctor = Ctor.resolved;\n    } else {\n      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {\n        // it's ok to queue this on every render because\n        // $forceUpdate is buffered by the scheduler.\n        context.$forceUpdate();\n      });\n      if (!Ctor) {\n        // return nothing if this is indeed an async component\n        // wait for the callback to trigger parent update.\n        return\n      }\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // extract props\n  var propsData = extractProps(data, Ctor);\n\n  // functional component\n  if (Ctor.options.functional) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (Ctor.options.abstract) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (propOptions) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData);\n    }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    props: props,\n    data: data,\n    parent: context,\n    children: children,\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (inlineTemplate) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction init (\n  vnode,\n  hydrating,\n  parentElm,\n  refElm\n) {\n  if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n    var child = vnode.componentInstance = createComponentInstanceForVnode(\n      vnode,\n      activeInstance,\n      parentElm,\n      refElm\n    );\n    child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n  } else if (vnode.data.keepAlive) {\n    // kept-alive components, treat as a patch\n    var mountedNode = vnode; // work around flow\n    prepatch(mountedNode, mountedNode);\n  }\n}\n\nfunction prepatch (\n  oldVnode,\n  vnode\n) {\n  var options = vnode.componentOptions;\n  var child = vnode.componentInstance = oldVnode.componentInstance;\n  child._updateFromParent(\n    options.propsData, // updated props\n    options.listeners, // updated listeners\n    vnode, // new parent vnode\n    options.children // new children\n  );\n}\n\nfunction insert (vnode) {\n  if (!vnode.componentInstance._isMounted) {\n    vnode.componentInstance._isMounted = true;\n    callHook(vnode.componentInstance, 'mounted');\n  }\n  if (vnode.data.keepAlive) {\n    vnode.componentInstance._inactive = false;\n    callHook(vnode.componentInstance, 'activated');\n  }\n}\n\nfunction destroy$1 (vnode) {\n  if (!vnode.componentInstance._isDestroyed) {\n    if (!vnode.data.keepAlive) {\n      vnode.componentInstance.$destroy();\n    } else {\n      vnode.componentInstance._inactive = true;\n      callHook(vnode.componentInstance, 'deactivated');\n    }\n  }\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  cb\n) {\n  if (factory.requested) {\n    // pool callbacks\n    factory.pendingCallbacks.push(cb);\n  } else {\n    factory.requested = true;\n    var cbs = factory.pendingCallbacks = [cb];\n    var sync = true;\n\n    var resolve = function (res) {\n      if (isObject(res)) {\n        res = baseCtor.extend(res);\n      }\n      // cache resolved\n      factory.resolved = res;\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          cbs[i](res);\n        }\n      }\n    };\n\n    var reject = function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n    };\n\n    var res = factory(resolve, reject);\n\n    // handle promise\n    if (res && typeof res.then === 'function' && !factory.resolved) {\n      res.then(resolve, reject);\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.resolved\n  }\n}\n\nfunction extractProps (data, Ctor) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (!propOptions) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  var domProps = data.domProps;\n  if (attrs || props || domProps) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey) ||\n      checkProp(res, domProps, key, altKey);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (hash) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = hooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook, key) {\n  key = key + hookKey;\n  var injectedHash = def.__injected || (def.__injected = {});\n  if (!injectedHash[key]) {\n    injectedHash[key] = true;\n    var oldHook = def[hookKey];\n    if (oldHook) {\n      def[hookKey] = function () {\n        oldHook.apply(this, arguments);\n        hook.apply(this, arguments);\n      };\n    } else {\n      def[hookKey] = hook;\n    }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var once = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once,\n    capture: capture\n  }\n});\n\nfunction createEventHandle (fn) {\n  var handle = {\n    fn: fn,\n    invoker: function () {\n      var arguments$1 = arguments;\n\n      var fn = handle.fn;\n      if (Array.isArray(fn)) {\n        for (var i = 0; i < fn.length; i++) {\n          fn[i].apply(null, arguments$1);\n        }\n      } else {\n        fn.apply(null, arguments);\n      }\n    }\n  };\n  return handle\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (!cur) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (!old) {\n      if (!cur.invoker) {\n        cur = on[name] = createEventHandle(cur);\n      }\n      add(event.name, cur.invoker, event.once, event.capture);\n    } else if (cur !== old) {\n      old.fn = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (!on[name]) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name].invoker, event.capture);\n    }\n  }\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// nomralization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constrcuts that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (c == null || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (last && last.text) {\n        last.text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (c.text && last && last.text) {\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (c.tag && c.key == null && nestedIndex != null) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  return children && children.filter(function (c) { return c && c.componentOptions; })[0]\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (data && data.__ob__) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n      typeof children[0] === 'function') {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (vnode) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (vnode.children) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (child.tag && !child.ns) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm.$vnode = null; // the placeholder node in parent tree\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$options._parentVnode;\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = {};\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    if (_parentVnode && _parentVnode.data.scopedSlots) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots;\n    }\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (config.errorHandler) {\n        config.errorHandler.call(null, e, vm);\n      } else {\n        if (false) {\n          warn((\"Error when rendering \" + (formatComponentName(vm)) + \":\"));\n        }\n        throw e\n      }\n      // return previous vnode to prevent render error causing blank component\n      vnode = vm._vnode;\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // toString for mustaches\n  Vue.prototype._s = _toString;\n  // convert text to vnode\n  Vue.prototype._v = createTextVNode;\n  // number conversion\n  Vue.prototype._n = toNumber;\n  // empty vnode\n  Vue.prototype._e = createEmptyVNode;\n  // loose equal\n  Vue.prototype._q = looseEqual;\n  // loose indexOf\n  Vue.prototype._i = looseIndexOf;\n\n  // render static tree by index\n  Vue.prototype._m = function renderStatic (\n    index,\n    isInFor\n  ) {\n    var tree = this._staticTrees[index];\n    // if has already-rendered static tree and not inside v-for,\n    // we can reuse the same tree by doing a shallow clone.\n    if (tree && !isInFor) {\n      return Array.isArray(tree)\n        ? cloneVNodes(tree)\n        : cloneVNode(tree)\n    }\n    // otherwise, render a fresh tree.\n    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);\n    markStatic(tree, (\"__static__\" + index), false);\n    return tree\n  };\n\n  // mark node as static (v-once)\n  Vue.prototype._o = function markOnce (\n    tree,\n    index,\n    key\n  ) {\n    markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n    return tree\n  };\n\n  function markStatic (tree, key, isOnce) {\n    if (Array.isArray(tree)) {\n      for (var i = 0; i < tree.length; i++) {\n        if (tree[i] && typeof tree[i] !== 'string') {\n          markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n        }\n      }\n    } else {\n      markStaticNode(tree, key, isOnce);\n    }\n  }\n\n  function markStaticNode (node, key, isOnce) {\n    node.isStatic = true;\n    node.key = key;\n    node.isOnce = isOnce;\n  }\n\n  // filter resolution helper\n  Vue.prototype._f = function resolveFilter (id) {\n    return resolveAsset(this.$options, 'filters', id, true) || identity\n  };\n\n  // render v-for\n  Vue.prototype._l = function renderList (\n    val,\n    render\n  ) {\n    var ret, i, l, keys, key;\n    if (Array.isArray(val) || typeof val === 'string') {\n      ret = new Array(val.length);\n      for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = render(val[i], i);\n      }\n    } else if (typeof val === 'number') {\n      ret = new Array(val);\n      for (i = 0; i < val; i++) {\n        ret[i] = render(i + 1, i);\n      }\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n    return ret\n  };\n\n  // renderSlot\n  Vue.prototype._t = function (\n    name,\n    fallback,\n    props,\n    bindObject\n  ) {\n    var scopedSlotFn = this.$scopedSlots[name];\n    if (scopedSlotFn) { // scoped slot\n      props = props || {};\n      if (bindObject) {\n        extend(props, bindObject);\n      }\n      return scopedSlotFn(props) || fallback\n    } else {\n      var slotNodes = this.$slots[name];\n      // warn duplicate slot usage\n      if (slotNodes && \"production\" !== 'production') {\n        slotNodes._rendered && warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n        slotNodes._rendered = true;\n      }\n      return slotNodes || fallback\n    }\n  };\n\n  // apply v-bind object\n  Vue.prototype._b = function bindProps (\n    data,\n    tag,\n    value,\n    asProp\n  ) {\n    if (value) {\n      if (!isObject(value)) {\n        \"production\" !== 'production' && warn(\n          'v-bind without argument expects an Object or Array value',\n          this\n        );\n      } else {\n        if (Array.isArray(value)) {\n          value = toObject(value);\n        }\n        for (var key in value) {\n          if (key === 'class' || key === 'style') {\n            data[key] = value[key];\n          } else {\n            var type = data.attrs && data.attrs.type;\n            var hash = asProp || config.mustUseProp(tag, type, key)\n              ? data.domProps || (data.domProps = {})\n              : data.attrs || (data.attrs = {});\n            hash[key] = value[key];\n          }\n        }\n      }\n    }\n    return data\n  };\n\n  // check v-on keyCodes\n  Vue.prototype._k = function checkKeyCodes (\n    eventKeyCode,\n    key,\n    builtInAlias\n  ) {\n    var keyCodes = config.keyCodes[key] || builtInAlias;\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  };\n}\n\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  var name, child;\n  for (var i = 0, l = children.length; i < l; i++) {\n    child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n        child.data && (name = child.data.slot)) {\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore single whitespace\n  if (defaultSlot.length && !(\n    defaultSlot.length === 1 &&\n    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n  )) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add$1 (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$2 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add$1, remove$2, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;(vm._events[event] || (vm._events[event] = [])).push(fn);\n    // optimize hook:event cost by using a boolean flag marked at registration\n    // instead of a hash lookup\n    if (hookRE.test(event)) {\n      vm._hasHookEvent = true;\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._mount = function (\n    el,\n    hydrating\n  ) {\n    var vm = this;\n    vm.$el = el;\n    if (!vm.$options.render) {\n      vm.$options.render = createEmptyVNode;\n      if (false) {\n        /* istanbul ignore if */\n        if (vm.$options.template && vm.$options.template.charAt(0) !== '#') {\n          warn(\n            'You are using the runtime-only build of Vue where the template ' +\n            'option is not available. Either pre-compile the templates into ' +\n            'render functions, or use the compiler-included build.',\n            vm\n          );\n        } else {\n          warn(\n            'Failed to mount component: template or render function not defined.',\n            vm\n          );\n        }\n      }\n    }\n    callHook(vm, 'beforeMount');\n    vm._watcher = new Watcher(vm, function updateComponent () {\n      vm._update(vm._render(), hydrating);\n    }, noop);\n    hydrating = false;\n    // manually mounted instance, call mounted on self\n    // mounted is called for render-created child components in its inserted hook\n    if (vm.$vnode == null) {\n      vm._isMounted = true;\n      callHook(vm, 'mounted');\n    }\n    return vm\n  };\n\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype._updateFromParent = function (\n    propsData,\n    listeners,\n    parentVnode,\n    renderChildren\n  ) {\n    var vm = this;\n    var hasChildren = !!(vm.$options._renderChildren || renderChildren);\n    vm.$options._parentVnode = parentVnode;\n    vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n    if (vm._vnode) { // update child tree's parent\n      vm._vnode.parent = parentVnode;\n    }\n    vm.$options._renderChildren = renderChildren;\n    // update props\n    if (propsData && vm.$options.props) {\n      observerState.shouldConvert = false;\n      if (false) {\n        observerState.isSettingProps = true;\n      }\n      var propKeys = vm.$options._propKeys || [];\n      for (var i = 0; i < propKeys.length; i++) {\n        var key = propKeys[i];\n        vm[key] = validateProp(key, vm.$options.props, propsData, vm);\n      }\n      observerState.shouldConvert = true;\n      if (false) {\n        observerState.isSettingProps = false;\n      }\n      vm.$options.propsData = propsData;\n    }\n    // update listeners\n    if (listeners) {\n      var oldListeners = vm.$options._parentListeners;\n      vm.$options._parentListeners = listeners;\n      updateComponentListeners(vm, listeners, oldListeners);\n    }\n    // resolve slots + force update if has children\n    if (hasChildren) {\n      vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n      vm.$forceUpdate();\n    }\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove$1(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n  };\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      handlers[i].call(vm);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar queue = [];\nvar has$1 = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  queue.length = 0;\n  has$1 = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id, vm;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has$1[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // call updated hooks\n  index = queue.length;\n  while (index--) {\n    watcher = queue[index];\n    vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n\n  resetSchedulerState();\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has$1[id] == null) {\n    has$1[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i >= 0 && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(Math.max(i, index) + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value = this.getter.call(this.vm, this.vm);\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (config.errorHandler) {\n            config.errorHandler.call(null, e, this.vm);\n          } else {\n            \"production\" !== 'production' && warn(\n              (\"Error in watcher \\\"\" + (this.expression) + \"\\\"\"),\n              this.vm\n            );\n            throw e\n          }\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove$1(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = { key: 1, ref: 1, slot: 1 };\n\nfunction initProps (vm, props) {\n  var propsData = vm.$options.propsData || {};\n  var keys = vm.$options._propKeys = Object.keys(props);\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( i ) {\n    var key = keys[i];\n    /* istanbul ignore else */\n    if (false) {\n      if (isReservedProp[key]) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm), function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm));\n    }\n  };\n\n  for (var i = 0; i < keys.length; i++) loop( i );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? data.call(vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else {\n      proxy(vm, keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nvar computedSharedDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction initComputed (vm, computed) {\n  for (var key in computed) {\n    /* istanbul ignore if */\n    if (false) {\n      warn(\n        \"existing instance property \\\"\" + key + \"\\\" will be \" +\n        \"overwritten by a computed property with the same name.\",\n        vm\n      );\n    }\n    var userDef = computed[key];\n    if (typeof userDef === 'function') {\n      computedSharedDefinition.get = makeComputedGetter(userDef, vm);\n      computedSharedDefinition.set = noop;\n    } else {\n      computedSharedDefinition.get = userDef.get\n        ? userDef.cache !== false\n          ? makeComputedGetter(userDef.get, vm)\n          : bind$1(userDef.get, vm)\n        : noop;\n      computedSharedDefinition.set = userDef.set\n        ? bind$1(userDef.set, vm)\n        : noop;\n    }\n    Object.defineProperty(vm, key, computedSharedDefinition);\n  }\n}\n\nfunction makeComputedGetter (getter, owner) {\n  var watcher = new Watcher(owner, getter, noop, {\n    lazy: true\n  });\n  return function computedGetter () {\n    if (watcher.dirty) {\n      watcher.evaluate();\n    }\n    if (Dep.target) {\n      watcher.depend();\n    }\n    return watcher.value\n  }\n}\n\nfunction initMethods (vm, methods) {\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind$1(methods[key], vm);\n    if (false) {\n      warn(\n        \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n        \"Did you reference the function correctly?\",\n        vm\n      );\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () {\n    return this._data\n  };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n\n  Vue.prototype.$set = set$1;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\nfunction proxy (vm, key) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val;\n      }\n    });\n  }\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initState(vm);\n    callHook(vm, 'created');\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = Ctor.super.options;\n    var cachedSuperOptions = Ctor.superOptions;\n    var extendOptions = Ctor.extendOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions;\n      extendOptions.render = options.render;\n      extendOptions.staticRenderFns = options.staticRenderFns;\n      extendOptions._scopeId = options._scopeId;\n      options = Ctor.options = mergeOptions(superOptions, extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction Vue$3 (options) {\n  if (false) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else {\n    return pattern.test(name)\n  }\n}\n\nfunction pruneCache (cache, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cachedNode);\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    if (!vnode.componentInstance._inactive) {\n      callHook(vnode.componentInstance, 'deactivated');\n    }\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n  Vue.util = util;\n  Vue.set = set$1;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  config._assetTypes.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nVue$3.version = '2.1.10';\n\n/*  */\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (childNode.componentInstance) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: child.class\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (staticClass || dynamicClass) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  var res = '';\n  if (!value) {\n    return res\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (value[i]) {\n        if ((stringified = stringifyClass(value[i]))) {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,' +\n  'font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + selector\n      );\n      return document.createElement('div')\n    }\n  }\n  return el\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  if (vnode.data && vnode.data.attrs && 'multiple' in vnode.data.attrs) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove$1(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks$1 = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction isUndef (s) {\n  return s == null\n}\n\nfunction isDef (s) {\n  return s != null\n}\n\nfunction sameVnode (vnode1, vnode2) {\n  return (\n    vnode1.key === vnode2.key &&\n    vnode1.tag === vnode2.tag &&\n    vnode1.isComment === vnode2.isComment &&\n    !vnode1.data === !vnode2.data\n  )\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks$1.length; ++i) {\n    cbs[hooks$1[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (modules[j][hooks$1[i]] !== undefined) { cbs[hooks$1[i]].push(modules[j][hooks$1[i]]); }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (parent) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        inPre--;\n      }\n    } else if (vnode.isComment) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isReactivated) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (vnode.data.pendingInsert) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (parent) {\n      if (ref) {\n        nodeOps.insertBefore(parent, elm, ref);\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (i.create) { i.create(emptyNode, vnode); }\n      if (i.insert) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.context) && isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n    if (isDef(i = activeInstance) &&\n        i !== vnode.context &&\n        isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (rm || isDef(vnode.data)) {\n      var listeners = cbs.remove.length + 1;\n      if (!rm) {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      } else {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (vnode.isStatic &&\n        oldVnode.isStatic &&\n        vnode.key === oldVnode.key &&\n        (vnode.isCloned || vnode.isOnce)) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    var hasData = isDef(data);\n    if (hasData && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (hasData && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (hasData) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (initial && vnode.parent) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (false) {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (false) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (vnode.tag) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (!vnode) {\n      if (oldVnode) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (!oldVnode) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {\n            oldVnode.removeAttribute('server-rendered');\n            hydrating = true;\n          }\n          if (hydrating) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (vnode.parent) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (parentElm$1 !== null) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert, 'dir-insert');\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    }, 'dir-postpatch');\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (!oldVnode.data.attrs && !vnode.data.attrs) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (attrs.__ob__) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (attrs[key] == null) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (!data.staticClass && !data.class &&\n      (!oldData || (!oldData.staticClass && !oldData.class))) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (transitionClass) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar target$1;\n\nfunction add$2 (\n  event,\n  handler,\n  once,\n  capture\n) {\n  if (once) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      remove$3(event, handler, capture, _target);\n      arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n    };\n  }\n  target$1.addEventListener(event, handler, capture);\n}\n\nfunction remove$3 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (!oldVnode.data.on && !vnode.data.on) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  updateListeners(on, oldOn, add$2, remove$3, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (!oldVnode.data.domProps && !vnode.data.domProps) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (props.__ob__) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (props[key] == null) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = cur == null ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(vnode, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (vnode, newVal) {\n  var value = vnode.elm.value;\n  var modifiers = vnode.elm._vModifiers; // injected by v-model runtime\n  if ((modifiers && modifiers.number) || vnode.elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (modifiers && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    el.style[normalize(name)] = val;\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (!data.staticStyle && !data.style &&\n      !oldData.staticStyle && !oldData.style) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldVnode.data.staticStyle;\n  var oldStyleBinding = oldVnode.data.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  vnode.data.style = style.__ob__ ? extend({}, style) : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (newStyle[name] == null) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove$1(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitioneDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitioneDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (el._leaveCb) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (el._enterCb || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear ? appearClass : enterClass;\n  var activeClass = isAppear ? appearActiveClass : enterActiveClass;\n  var toClass = isAppear ? appearToClass : enterToClass;\n  var beforeEnterHook = isAppear ? (beforeAppear || beforeEnter) : beforeEnter;\n  var enterHook = isAppear ? (typeof appear === 'function' ? appear : enter) : enter;\n  var afterEnterHook = isAppear ? (afterAppear || afterEnter) : afterEnter;\n  var enterCancelledHook = isAppear ? (appearCancelled || enterCancelled) : enterCancelled;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl =\n    enterHook &&\n    // enterHook may be a bound method which exposes\n    // the length of original fn as _length\n    (enterHook._length || enterHook.length) > 1;\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n          pendingNode.tag === vnode.tag &&\n          pendingNode.elm._leaveCb) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    }, 'transition-insert');\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        whenTransitionEnds(el, type, cb);\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (el._enterCb) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (el._leaveCb || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl =\n    leave &&\n    // leave hook may be a bound method which exposes\n    // the length of original fn as _length\n    (leave._length || leave.length) > 1;\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          whenTransitionEnds(el, type, cb);\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    leaveClass: (name + \"-leave\"),\n    appearClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    leaveToClass: (name + \"-leave-to\"),\n    appearToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveActiveClass: (name + \"-leave-active\"),\n    appearActiveClass: (name + \"-enter-active\")\n  }\n});\n\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn();\n    }\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (!vnode.data.show) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove (vnode, rm) {\n    /* istanbul ignore else */\n    if (!vnode.data.show) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch$1 = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\nvar modelableTagRE = /^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model = {\n  inserted: function inserted (el, binding, vnode) {\n    if (false) {\n      if (!modelableTagRE.test(vnode.tag)) {\n        warn(\n          \"v-model is not supported on element type: <\" + (vnode.tag) + \">. \" +\n          'If you are working with contenteditable, it\\'s recommended to ' +\n          'wrap a library dedicated for that purpose inside a custom component.',\n          vnode.context\n        );\n      }\n    }\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1].fn;\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  return /\\d-keep-alive$/.test(rawChild.tag)\n    ? h('keep-alive')\n    : null\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    var key = child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        }, key);\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave, key);\n        mergeVNodeHook(data, 'enterCancelled', performLeave, key);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n          delayedLeave = leave;\n        }, key);\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final disired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts\n            ? (opts.Ctor.options.name || opts.tag)\n            : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var f = document.body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      addTransitionClass(el, moveClass);\n      var info = getTransitionInfo(el);\n      removeTransitionClass(el, moveClass);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.isUnknownElement = isUnknownElement;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.mustUseProp = mustUseProp;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch$1 : noop;\n\n// wrap mount\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return this._mount(el, hydrating)\n};\n\nif (false) {\n  console[console.info ? 'info' : 'log'](\n    \"You are running Vue in development mode.\\n\" +\n    \"Make sure to turn on production mode when deploying for production.\\n\" +\n    \"See more tips at https://vuejs.org/guide/deployment.html\"\n  );\n}\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (\n      false\n    ) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr',\n  true\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source',\n  true\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track',\n  true\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isScriptOrStyle = makeMap('script,style', true);\nvar reCache = {};\n\nvar ltRE = /&lt;/g;\nvar gtRE = /&gt;/g;\nvar nlRE = /&#10;/g;\nvar ampRE = /&amp;/g;\nvar quoteRE = /&quot;/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  if (shouldDecodeNewlines) {\n    value = value.replace(nlRE, '\\n');\n  }\n  return value\n    .replace(ltRE, '<')\n    .replace(gtRE, '>')\n    .replace(ampRE, '&')\n    .replace(quoteRE, '\"')\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a script or style element\n    if (!lastTag || !isScriptOrStyle(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd > 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last && options.chars) {\n      options.chars(html);\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n      unarySlash = '';\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !/[\\w$]/.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue parser]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important\n) {\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\nvar bindRE = /^:|^v-bind:/;\nvar onRE = /^@|^v-on:/;\nvar argRE = /:(.*)$/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$1;\nvar platformGetTagNamespace;\nvar platformMustUseProp;\nvar platformIsPreTag;\nvar preTransforms;\nvar transforms;\nvar postTransforms;\nvar delimiters;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$1 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n  parseHTML(template, {\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$1(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warned = true;\n            warn$1(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes:\\n' + template\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warned = true;\n            warn$1(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements:\\n' + template\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warned = true;\n          warn$1(\n            \"Component template should contain exactly one root element:\" +\n            \"\\n\\n\" + template + \"\\n\\n\" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || 'default';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ') {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      // check pre state\n      if (element.pre) {\n        inVPre = false;\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = false;\n      }\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          warned = true;\n          warn$1(\n            'Component template requires a root element, rather than just text:\\n\\n' + template\n          );\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n          currentParent.tag === 'textarea' &&\n          currentParent.attrsMap.placeholder === text) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || children[children.length - 1].text !== ' ') {\n          currentParent.children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$1(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      \"production\" !== 'production' && warn$1(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$1(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$1(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once = getAndRemoveAttr(el, 'v-once');\n  if (once != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$1(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, arg, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        if (argMatch && (arg = argMatch[1])) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$1(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (false) {\n      warn$1('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: 'if($event.target !== $event.currentTarget)return;',\n  ctrl: 'if(!$event.ctrlKey)return;',\n  shift: 'if(!$event.shiftKey)return;',\n  alt: 'if(!$event.altKey)return;',\n  meta: 'if(!$event.metaKey)return;'\n};\n\nfunction genHandlers (events, native) {\n  var res = native ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  } else if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  } else if (!handler.modifiers) {\n    return fnExpRE.test(handler.value) || simplePathRE.test(handler.value)\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\")\n  } else {\n    var code = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        code += modifierCode[key];\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code = genKeyFilter(keys) + code;\n    }\n    var handlerCode = simplePathRE.test(handler.value)\n      ? handler.value + '($event)'\n      : handler.value;\n    return 'function($event){' + code + handlerCode + '}'\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(\" + (keys.map(genFilterCode).join('&&')) + \")return;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$2 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$2,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$2;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$2 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && warn$2(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$2);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (false) {\n    warn$2('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:{\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"}\")\n}\n\nfunction genScopedSlot (key, el) {\n  return key + \":function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}\"\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n        el$1.for &&\n        el$1.tag !== 'template' &&\n        el$1.tag !== 'slot') {\n      return genElement(el$1)\n    }\n    var normalizationType = getNormalizationType(children);\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (checkSkip\n        ? normalizationType ? (\",\" + normalizationType) : ''\n        : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n/**\n * Compile a template.\n */\nfunction compile$1 (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\n/*  */\n\n// operators like typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"- invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + text));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"- avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + text\n      );\n    } else {\n      errors.push((\"- invalid expression: \" + text));\n    }\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nvar warn$3;\n\nfunction model$1 (\n  el,\n  dir,\n  _warn\n) {\n  warn$3 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n  if (false) {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$3(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n  }\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else {\n    genDefaultModel(el, value, modifiers);\n  }\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  if (false) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" +\n      \"inline checked attributes will be ignored when using v-model. \" +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, 'click',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + value + \"=$$c}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  if (false) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" +\n      \"inline checked attributes will be ignored when using v-model. \" +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'click', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  if (false) {\n    if (el.tag === 'input' && el.attrsMap.value) {\n      warn$3(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" value=\\\"\" + (el.attrsMap.value) + \"\\\">:\\n\" +\n        'inline value attributes will be ignored when using v-model. ' +\n        'Declare initial values in the component\\'s data option instead.'\n      );\n    }\n    if (el.tag === 'textarea' && el.children.length) {\n      warn$3(\n        \"<textarea v-model=\\\"\" + value + \"\\\">:\\n\" +\n        'inline content inside <textarea> will be ignored when using v-model. ' +\n        'Declare initial values in the component\\'s data option instead.'\n      );\n    }\n  }\n\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var event = lazy || (isIE && type === 'range') ? 'change' : 'input';\n  var needCompositionGuard = !lazy && type !== 'range';\n  var isNative = el.tag === 'input' || el.tag === 'textarea';\n\n  var valueExpression = isNative\n    ? (\"$event.target.value\" + (trim ? '.trim()' : ''))\n    : trim ? \"(typeof $event === 'string' ? $event.trim() : $event)\" : \"$event\";\n  valueExpression = number || type === 'number'\n    ? (\"_n(\" + valueExpression + \")\")\n    : valueExpression;\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (isNative && needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  // inputs with type=\"file\" are read only and setting the input's\n  // value will throw an error.\n  if (false) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n      \"File inputs are read only. Use a v-on:change listener instead.\"\n    );\n  }\n\n  addProp(el, 'value', isNative ? (\"_s(\" + value + \")\") : (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  if (false) {\n    el.children.some(checkOptionWarning);\n  }\n\n  var number = modifiers && modifiers.number;\n  var assignment = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\" +\n    (el.attrsMap.multiple == null ? '[0]' : '');\n\n  var code = genAssignmentCode(value, assignment);\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction checkOptionWarning (option) {\n  if (option.type === 1 &&\n    option.tag === 'option' &&\n    option.attrsMap.selected != null) {\n    warn$3(\n      \"<select v-model=\\\"\" + (option.parent.attrsMap['v-model']) + \"\\\">:\\n\" +\n      'inline selected attributes on <option> will be ignored when using v-model. ' +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n    return true\n  }\n  return false\n}\n\nfunction genAssignmentCode (value, assignment) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model$1,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar cache = Object.create(null);\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  staticKeys: genStaticKeys(modules$1),\n  directives: directives$1,\n  isReservedTag: isReservedTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  getTagNamespace: getTagNamespace,\n  isPreTag: isPreTag\n};\n\nfunction compile$$1 (\n  template,\n  options\n) {\n  options = options\n    ? extend(extend({}, baseOptions), options)\n    : baseOptions;\n  return compile$1(template, options)\n}\n\nfunction compileToFunctions (\n  template,\n  options,\n  vm\n) {\n  var _warn = (options && options.warn) || warn;\n  // detect possible CSP restriction\n  /* istanbul ignore if */\n  if (false) {\n    try {\n      new Function('return 1');\n    } catch (e) {\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        _warn(\n          'It seems you are using the standalone build of Vue.js in an ' +\n          'environment with Content Security Policy that prohibits unsafe-eval. ' +\n          'The template compiler cannot work in this environment. Consider ' +\n          'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n          'templates into render functions.'\n        );\n      }\n    }\n  }\n  var key = options && options.delimiters\n    ? String(options.delimiters) + template\n    : template;\n  if (cache[key]) {\n    return cache[key]\n  }\n  var res = {};\n  var compiled = compile$$1(template, options);\n  res.render = makeFunction(compiled.render);\n  var l = compiled.staticRenderFns.length;\n  res.staticRenderFns = new Array(l);\n  for (var i = 0; i < l; i++) {\n    res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i]);\n  }\n  if (false) {\n    if (res.render === noop || res.staticRenderFns.some(function (fn) { return fn === noop; })) {\n      _warn(\n        \"failed to compile template:\\n\\n\" + template + \"\\n\\n\" +\n        detectErrors(compiled.ast).join('\\n') +\n        '\\n\\n',\n        vm\n      );\n    }\n  }\n  return (cache[key] = res)\n}\n\nfunction makeFunction (code) {\n  try {\n    return new Function(code)\n  } catch (e) {\n    return noop\n  }\n}\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      var ref = compileToFunctions(template, {\n        warn: warn,\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nmodule.exports = Vue$3;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 27)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},/*!***************************************!*\
  !*** ../~/css-loader/lib/css-base.js ***!
  \***************************************/
function(module,exports){eval('/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push("@media " + item[2] + "{" + item[1] + "}");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join("");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === "string")\r\n\t\t\tmodules = [[null, modules, ""]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === "number")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzPzQyY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==')},/*!****************************************************!*\
  !*** ../~/vue-style-loader/lib/addStylesClient.js ***!
  \****************************************************/
function(module,exports,__webpack_require__){eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(/*! ./listToStyles */ 25)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = { css: css, media: media, sourceMap: sourceMap }\n    if (!newStyles[id]) {\n      part.id = parentId + ':0'\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      part.id = parentId + ':' + newStyles[id].parts.length\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n  var hasSSR = styleElement != null\n\n  // if in production mode and style is already provided by SSR,\n  // simply do nothing.\n  if (hasSSR && isProduction) {\n    return noop\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = styleElement || createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (!hasSSR) {\n    update(obj)\n  }\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},/*!*****************************!*\
  !*** ./components/root.vue ***!
  \*****************************/
function(module,exports,__webpack_require__){eval('var Component = __webpack_require__(/*! ./../../~/vue-loader/lib/component-normalizer */ 0)(\n  /* script */\n  __webpack_require__(/*! !babel-loader!eslint-loader!./../../~/vue-loader/lib/selector?type=script&index=0!./../../~/eslint-loader!./root.vue */ 9),\n  /* template */\n  __webpack_require__(/*! !./../../~/vue-loader/lib/template-compiler?id=data-v-764559c1!./../../~/vue-loader/lib/selector?type=template&index=0!./../../~/eslint-loader!./root.vue */ 21),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = "/media/ext_disk/CODEARMADA/http/experiments/vue/app/src/components/root.vue"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}\nif (Component.options.functional) {console.error("[vue-loader] root.vue: functional components are not supported with templates, they should use render functions.")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-764559c1", Component.options)\n  } else {\n    hotAPI.reload("data-v-764559c1", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NvbXBvbmVudHMvcm9vdC52dWU/NTUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciFlc2xpbnQtbG9hZGVyIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL3Jvb3QudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtNzY0NTU5YzEhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9yb290LnZ1ZVwiKSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBjc3NNb2R1bGVzICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL21lZGlhL2V4dF9kaXNrL0NPREVBUk1BREEvaHR0cC9leHBlcmltZW50cy92dWUvYXBwL3NyYy9jb21wb25lbnRzL3Jvb3QudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gcm9vdC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNzY0NTU5YzFcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi03NjQ1NTljMVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb21wb25lbnRzL3Jvb3QudnVlXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9')},/*!*************************************************************************************************************************************************!*\
  !*** ../~/babel-loader/lib!../~/eslint-loader!../~/vue-loader/lib/selector.js?type=script&index=0!../~/eslint-loader!./components/download.vue ***!
  \*************************************************************************************************************************************************/
function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _store = __webpack_require__(/*! ../store/store */ 1);\n\nexports.default = {\n\tcomputed: {\n\t\tbackGround: function backGround() {\n\t\t\treturn 'img/' + (parseInt(this.$store.getters.returnActivity) + 1) + '.jpg';\n\t\t}\n\t}\n}; //\n//\n//\n//\n//\n//\n//\n////# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9kb3dubG9hZC52dWU/NGJjYyJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGUgbGFuZz1cImh0bWxcIj5cblx0PHNlY3Rpb24gY2xhc3M9XCJEb3dubG9hZFwiXG5cdFx0OnN0eWxlPVwie1xuXHRcdFx0YmFja2dyb3VuZEltYWdlOiBgdXJsKCR7YmFja0dyb3VuZH0pYCxcblx0XHR9XCJcblx0Pjwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gJy4uL3N0b3JlL3N0b3JlJztcbmV4cG9ydCBkZWZhdWx0IHtcblx0Y29tcHV0ZWQ6IHtcblx0XHRiYWNrR3JvdW5kKCkge1xuXHRcdFx0cmV0dXJuICdpbWcvJyArIChwYXJzZUludCh0aGlzLiRzdG9yZS5nZXR0ZXJzLnJldHVybkFjdGl2aXR5KSArIDEpICsgJy5qcGcnO1xuXHRcdH0sXG5cdH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJjc3NcIj5cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZG93bmxvYWQudnVlPzM2MTY3OTNjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFTQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFIQTtBQURBOzs7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==")},/*!*********************************************************************************************************************************************!*\
  !*** ../~/babel-loader/lib!../~/eslint-loader!../~/vue-loader/lib/selector.js?type=script&index=0!../~/eslint-loader!./components/main.vue ***!
  \*********************************************************************************************************************************************/
function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\n\nvar _download = __webpack_require__(/*! ./download.vue */ 14);\n\nvar _download2 = _interopRequireDefault(_download);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\tcomponents: {\n\t\tDownload: _download2.default\n\t}\n}; //\n//\n//\n//\n//\n//\n//\n////# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9tYWluLnZ1ZT8wMDMyIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiaHRtbFwiPlxuXHQ8ZGl2IGNsYXNzPVwiTWFpblwiPlxuXHRcdDxkaXYgY2xhc3M9XCJ3cmFwcGVyXCI+XG5cdFx0XHQ8ZG93bmxvYWQgLz5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IGRvd25sb2FkIGZyb20gJy4vZG93bmxvYWQudnVlJ1xuZXhwb3J0IGRlZmF1bHQge1xuXHRjb21wb25lbnRzOiB7XG5cdFx0RG93bmxvYWQgOiBkb3dubG9hZCxcblx0fSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImNzc1wiPlxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBtYWluLnZ1ZT80ODE2YzBiYiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7QUFDQTs7Ozs7OztBQUdBO0FBREE7QUFEQTs7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=')},/*!*********************************************************************************************************************************************!*\
  !*** ../~/babel-loader/lib!../~/eslint-loader!../~/vue-loader/lib/selector.js?type=script&index=0!../~/eslint-loader!./components/menu.vue ***!
  \*********************************************************************************************************************************************/
function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _store = __webpack_require__(/*! ../store/store */ 1);\n\nexports.default = {\n\tdata: function data() {\n\t\treturn {\n\t\t\tmenu_items: [{ title: 'Download Panagia' }, { title: 'Download Xristo' }, { title: 'Download Kantili' }]\n\t\t};\n\t},\n\tcomputed: {\n\t\tmenuActivity: function menuActivity() {\n\t\t\treturn this.$store.getters.menuActivity;\n\t\t},\n\t\titemActivity: function itemActivity() {\n\t\t\treturn this.$store.getters.returnActivity;\n\t\t}\n\t},\n\tmethods: {\n\t\tsetActivity: function setActivity(item) {\n\t\t\tthis.$store.commit('setMenuActivity', item);\n\t\t}\n\t}\n}; //\n//\n//\n//\n//\n//\n//\n//\n////# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9tZW51LnZ1ZT8zZTlmIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiaHRtbFwiPlxuPGRpdiBjbGFzcz1cIk1lbnVcIiA6Y2xhc3M9XCJ7J3Nob3cnIDogbWVudUFjdGl2aXR5fVwiPlxuXHQ8dWw+XG5cdFx0PGxpIGNsYXNzPVwibWVudV9pdGVtXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogaXRlbUFjdGl2aXR5ID09PSBpbmRleCB9XCIgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIG1lbnVfaXRlbXNcIiBAY2xpY2s9XCJzZXRBY3Rpdml0eShpbmRleClcIj5cblx0XHRcdHt7aXRlbS50aXRsZX19XG5cdFx0PC9saT5cblx0PC91bD5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5cdGltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvc3RvcmUnO1xuXHRleHBvcnQgZGVmYXVsdCB7XG5cdFx0ZGF0YTogKCkgPT4ge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWVudV9pdGVtcyA6IFtcblx0XHRcdFx0XHR7dGl0bGU6J0Rvd25sb2FkIFBhbmFnaWEnfSxcblx0XHRcdFx0XHR7dGl0bGU6J0Rvd25sb2FkIFhyaXN0byd9LFxuXHRcdFx0XHRcdHt0aXRsZTonRG93bmxvYWQgS2FudGlsaSd9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y29tcHV0ZWQ6IHtcblx0XHRcdG1lbnVBY3Rpdml0eSgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMubWVudUFjdGl2aXR5O1xuXHRcdFx0fSxcblx0XHRcdGl0ZW1BY3Rpdml0eSgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMucmV0dXJuQWN0aXZpdHk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0bWV0aG9kczoge1xuXHRcdFx0c2V0QWN0aXZpdHkoaXRlbSkge1xuXHRcdFx0XHR0aGlzLiRzdG9yZS5jb21taXQoICdzZXRNZW51QWN0aXZpdHknLCBpdGVtICk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdH1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG1lbnUudnVlP2YxZTk0Nzc2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQTtBQUNBOztBQUVBOztBQUVBO0FBREE7QUFPQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTs7QUFTQTtBQUNBO0FBQ0E7QUFIQTtBQWxCQTs7Ozs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9")},/*!*********************************************************************************************************************************************!*\
  !*** ../~/babel-loader/lib!../~/eslint-loader!../~/vue-loader/lib/selector.js?type=script&index=0!../~/eslint-loader!./components/root.vue ***!
  \*********************************************************************************************************************************************/
function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\n\nvar _topbar = __webpack_require__(/*! ./topbar.vue */ 17);\n\nvar _topbar2 = _interopRequireDefault(_topbar);\n\nvar _main = __webpack_require__(/*! ./main.vue */ 15);\n\nvar _main2 = _interopRequireDefault(_main);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n\tcomponents: {\n\t\ttopbar: _topbar2.default,\n\t\tmainArea: _main2.default\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yb290LnZ1ZT8zYzgxIl0sInNvdXJjZXNDb250ZW50IjpbIjwhLS0tLT5cbjwhLS0tLT5cblx0PCEtLVJPT1QgVlVFIENPTVBPTkVOVC0tPlxuPCEtLS0tPlxuPCEtLS0tPlxuXG48dGVtcGxhdGU+XG5cdDxkaXYgY2xhc3M9XCJBcHBcIj5cblx0XHQ8dG9wYmFyIC8+XG5cdFx0PG1haW4tYXJlYSAvPlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cdGltcG9ydCB0b3BiYXIgZnJvbSAnLi90b3BiYXIudnVlJztcblx0aW1wb3J0IG1haW4gZnJvbSAnLi9tYWluLnZ1ZSc7XG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRjb21wb25lbnRzOiB7XG5cdFx0XHR0b3BiYXI6IHRvcGJhcixcblx0XHRcdG1haW5BcmVhOiBtYWluLFxuXHRcdH0sXG5cdH1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJvb3QudnVlPzE0YTUzMzM3Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFjQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTtBQUNBO0FBRkE7QUFEQSIsInNvdXJjZVJvb3QiOiIifQ==')},/*!***********************************************************************************************************************************************!*\
  !*** ../~/babel-loader/lib!../~/eslint-loader!../~/vue-loader/lib/selector.js?type=script&index=0!../~/eslint-loader!./components/topbar.vue ***!
  \***********************************************************************************************************************************************/
function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar _store = __webpack_require__(/*! ../store/store */ 1);\n\nvar _menu = __webpack_require__(/*! ./menu.vue */ 16);\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _moJs = __webpack_require__(/*! mo-js */ 13);\n\nvar _moJs2 = _interopRequireDefault(_moJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\tcomponents: {\n\t\tmenuItems: _menu2.default\n\t},\n\tcomputed: {\n\t\tmenuActivity: function menuActivity() {\n\t\t\treturn this.$store.getters.menuActivity;\n\t\t}\n\t},\n\tmethods: {\n\t\ttoggleMenu: function toggleMenu(el, done) {\n\t\t\tif (this.menuActivity) {\n\t\t\t\tthis.tl_triggerMenu.stop();\n\t\t\t\tthis.tl_untriggerMenu.replayBackward();\n\t\t\t} else {\n\t\t\t\tthis.tl_untriggerMenu.stop();\n\t\t\t\tthis.tl_triggerMenu.replay();\n\t\t\t}\n\t\t\tthis.$store.commit('triggerMenu');\n\t\t\tdone;\n\t\t}\n\t},\n\tmounted: function mounted() {\n\t\tvar DURATION = 300,\n\n\t\t// mojsCurve = new MojsCurveEditor({name: 'opacity'}),\n\t\t// op_curve = mojsCurve.getEasing(),\n\t\top_curve = _moJs2.default.easing.path('M0, 100 C0, 100 21.96339152816756, 60.04660549126827 50, 60 C78.03660847183244, 59.953394508731705 100, 100 100, 100 '),\n\t\t    V_OPTS = {\n\t\t\tfill: 'none',\n\t\t\tstroke: '#fff',\n\t\t\tisTimelineLess: true\n\t\t},\n\t\t    circle = new _moJs2.default.Shape({\n\t\t\tparent: this.$refs.settings,\n\t\t\tshape: 'circle',\n\t\t\tduration: DURATION,\n\t\t\tstroke: '#fff',\n\t\t\tstrokeWidth: { 10: 0 },\n\t\t\tfill: 'none',\n\t\t\tradius: { 5: 25 },\n\t\t\ttop: '50%', left: '50%',\n\t\t\teasing: 'cubic.out'\n\t\t}),\n\t\t    close = new _moJs2.default.Shape({\n\t\t\tparent: this.$refs.settings,\n\t\t\tshape: 'cross',\n\t\t\tstroke: '#fff',\n\t\t\tstrokeWidth: 1,\n\t\t\ttop: '50%', left: '50%',\n\t\t\tangle: { 14: 45 },\n\t\t\tradius: { 0: 12 },\n\t\t\topacity: { 0: 1 },\n\t\t\tduration: DURATION,\n\t\t\tdelay: .2 * DURATION,\n\t\t\teasing: 'back.out',\n\t\t\tbackwardEasing: 'circ.in'\n\t\t}),\n\t\t    BUBBLE_OPTS = _extends({}, V_OPTS, {\n\t\t\tparent: circle.el,\n\t\t\tstrokeWidth: { 5: 0 }\n\t\t}),\n\t\t    burst = new _moJs2.default.Burst({\n\t\t\tparent: close.el,\n\t\t\tradius: { 10: 35 },\n\t\t\tduration: .3 * DURATION,\n\t\t\tchildren: _extends({}, V_OPTS, {\n\t\t\t\tshape: 'line',\n\t\t\t\tscaleY: 1\n\t\t\t})\n\t\t}),\n\t\t    dots = new _moJs2.default.Html({\n\t\t\tel: this.$refs.dots,\n\t\t\tscale: { 1: 0 },\n\t\t\topacity: { 1: 0 },\n\t\t\tduration: .5 * DURATION,\n\t\t\teasing: 'circ.in',\n\t\t\tbackwardEasing: 'back.in'\n\t\t}),\n\t\t    bubbleTimeline = new _moJs2.default.Timeline({ delay: 100 }),\n\t\t    bubble1 = new _moJs2.default.Shape(_extends({}, BUBBLE_OPTS, {\n\t\t\tradius: { 0: 10 },\n\t\t\tleft: '7%', top: '25%'\n\t\t})),\n\t\t    bubble2 = new _moJs2.default.Shape(_extends({}, BUBBLE_OPTS, {\n\t\t\tradius: { 0: 6 },\n\t\t\tdelay: .4 * DURATION,\n\t\t\tleft: '85%', top: '45%'\n\t\t})),\n\t\t    bubble3 = new _moJs2.default.Shape(_extends({}, BUBBLE_OPTS, {\n\t\t\tradius: { 0: 4 },\n\t\t\tdelay: .2 * DURATION,\n\t\t\tleft: '22%', top: '90%'\n\t\t}));\n\t\tbubbleTimeline.add(bubble1, bubble2, bubble3);\n\t\tthis.tl_triggerMenu = new _moJs2.default.Timeline().add(circle, burst, dots, close, bubbleTimeline);\n\t\t// new MojsPlayer({ add: this.tl_triggerMenu });\n\t\tthis.tl_untriggerMenu = new _moJs2.default.Timeline().add(dots, close);\n\t}\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},/*!*******************************************************************************************************************************************************************************************!*\
  !*** ../~/css-loader?sourceMap!../~/vue-loader/lib/style-rewriter.js?id=data-v-0daf62e7!../~/vue-loader/lib/selector.js?type=styles&index=0!../~/eslint-loader!./components/download.vue ***!
  \*******************************************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 3)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"download.vue","sourceRoot":"webpack://"}]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZT8yOGI1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcImRvd25sb2FkLnZ1ZVwiLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4uL34vdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTBkYWY2MmU3IS4uL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuLi9+L2VzbGludC1sb2FkZXIhLi9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==')},/*!***************************************************************************************************************************************************************************************!*\
  !*** ../~/css-loader?sourceMap!../~/vue-loader/lib/style-rewriter.js?id=data-v-7fb69b18!../~/vue-loader/lib/selector.js?type=styles&index=0!../~/eslint-loader!./components/main.vue ***!
  \***************************************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 3)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"main.vue","sourceRoot":"webpack://"}]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4udnVlPzU4ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwiZmlsZVwiOlwibWFpbi52dWVcIixcInNvdXJjZVJvb3RcIjpcIndlYnBhY2s6Ly9cIn1dKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi03ZmI2OWIxOCEuLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi4vfi9lc2xpbnQtbG9hZGVyIS4vY29tcG9uZW50cy9tYWluLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==')},/*!******************************!*\
  !*** ../~/mo-js/build/mo.js ***!
  \******************************/
function(module,exports,__webpack_require__){eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mojs\"] = factory();\n\telse\n\t\troot[\"mojs\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(53);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(59);\n\t__webpack_require__(58);\n\tmodule.exports = __webpack_require__(61)('iterator');\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _module = __webpack_require__(16);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _thenable = __webpack_require__(12);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tunable = __webpack_require__(13);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _tweenable = __webpack_require__(11);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(19);\n\tvar Bit = __webpack_require__(26);\n\tvar shapesMap = __webpack_require__(20);\n\n\n\t// TODO\n\t//  - refactor\n\t//    - add setIfChanged to Module\n\t//  --\n\t//  - tween for every prop\n\n\tvar Shape = function (_Tunable) {\n\t  (0, _inherits3.default)(Shape, _Tunable);\n\n\t  function Shape() {\n\t    (0, _classCallCheck3.default)(this, Shape);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tunable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t  */\n\n\t  Shape.prototype._declareDefaults = function _declareDefaults() {\n\t    // DEFAULTS / APIs\n\t    this._defaults = {\n\t      // where to append the module to [selector, HTMLElement]\n\t      parent: document.body,\n\t      // class name for the `el`\n\t      className: '',\n\t      // Possible values: [circle, line, zigzag, rect, polygon, cross, equal ]\n\t      shape: 'circle',\n\t      // ∆ :: Possible values: [color name, rgb, rgba, hex]\n\t      stroke: 'transparent',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      strokeOpacity: 1,\n\t      // Possible values: ['butt' | 'round' | 'square']\n\t      strokeLinecap: '',\n\t      // ∆ :: Possible values: [ number ]\n\t      strokeWidth: 2,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      strokeDasharray: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      strokeDashoffset: 0,\n\t      // ∆ :: Possible values: [color name, rgb, rgba, hex]\n\t      fill: 'deeppink',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      fillOpacity: 1,\n\t      // {Boolean} - if should hide module with `opacity` instead of `display`\n\t      isSoftHide: true,\n\t      // {Boolean} - if should trigger composite layer for the `el`\n\t      isForce3d: false,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      left: '50%',\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      top: '50%',\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      x: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      y: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      angle: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      scale: 1,\n\t      // ∆ :: Possible values: [ number ] Fallbacks to `scale`.\n\t      scaleX: null,\n\t      // ∆ :: Possible values: [ number ] Fallbacks to `scale`.\n\t      scaleY: null,\n\t      // ∆ :: Possible values: [ number, string ]\n\t      origin: '50% 50%',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      opacity: 1,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      rx: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      ry: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      points: 3,\n\t      // ∆ :: Possible values: [ number ]\n\t      radius: 50,\n\t      // ∆ :: Possible values: [ number ]\n\t      radiusX: null,\n\t      // ∆ :: Possible values: [ number ]\n\t      radiusY: null,\n\t      // Possible values: [ boolean ]\n\t      isShowStart: false,\n\t      // Possible values: [ boolean ]\n\t      isShowEnd: true,\n\t      // Possible values: [ boolean ]\n\t      isRefreshState: true,\n\t      // Possible values: [ number > 0 ]\n\t      duration: 400,\n\t      // Possible values: [ number ]\n\n\t      /* technical ones: */\n\t      // explicit width of the module canvas\n\t      width: null,\n\t      // explicit height of the module canvas\n\t      height: null,\n\t      // Possible values: [ number ]\n\t      // sizeGap:          0,\n\t      /* [boolean] :: If should have child shape. */\n\t      isWithShape: true,\n\t      // context for all the callbacks\n\t      callbacksContext: this\n\t    };\n\t  };\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @overrides @ Tunable\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\n\n\t  Shape.prototype.tune = function tune(o) {\n\t    _Tunable.prototype.tune.call(this, o);\n\t    // update shapeModule's size to the max in `then` chain\n\t    this._getMaxSizeInChain();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    @overrides @ Thenable\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\n\n\t  Shape.prototype.then = function then(o) {\n\t    // this._makeTimeline()\n\t    _Tunable.prototype.then.call(this, o);\n\t    // update shapeModule's size to the max in `then` chain\n\t    this._getMaxSizeInChain();\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to declare variables.\n\t    @overrides Thenable\n\t  */\n\n\n\t  Shape.prototype._vars = function _vars() {\n\t    // call _vars method on Thenable\n\t    _Tunable.prototype._vars.call(this);\n\t    this._lastSet = {};\n\t    // save previous module in the chain\n\t    this._prevChainModule = this._o.prevChainModule;\n\t    // should draw on foreign svg canvas\n\t    this.isForeign = !!this._o.ctx;\n\t    // this._o.isTimelineLess = true;\n\t    // should take an svg element as self bit\n\t    return this.isForeignBit = !!this._o.shape;\n\t  };\n\t  /*\n\t    Method to initialize modules presentation.\n\t    @private\n\t    @overrides Module\n\t  */\n\n\n\t  Shape.prototype._render = function _render() {\n\t    if (!this._isRendered && !this._isChained) {\n\t      // create `mojs` shape element\n\t      this.el = document.createElement('div');\n\t      // set name on the `el`\n\t      this.el.setAttribute('data-name', 'mojs-shape');\n\t      // set class on the `el`\n\t      this.el.setAttribute('class', this._props.className);\n\t      // create shape module\n\t      this._createShape();\n\t      // append `el` to parent\n\t      this._props.parent.appendChild(this.el);\n\t      // set position styles on the el\n\t      this._setElStyles();\n\t      // set initial position for the first module in the chain\n\t      this._setProgress(0, 0);\n\t      // show at start if `isShowStart`\n\t      if (this._props.isShowStart) {\n\t        this._show();\n\t      } else {\n\t        this._hide();\n\t      }\n\t      // set `_isRendered` hatch\n\t      this._isRendered = true;\n\t    } else if (this._isChained) {\n\t      // save elements from master module\n\t      this.el = this._masterModule.el;\n\t      this.shapeModule = this._masterModule.shapeModule;\n\t    }\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set el styles on initialization.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._setElStyles = function _setElStyles() {\n\t    if (!this.el) {\n\t      return;\n\t    }\n\t    // if (!this.isForeign) {\n\t    var p = this._props,\n\t        style = this.el.style,\n\t        width = p.shapeWidth,\n\t        height = p.shapeHeight;\n\n\t    style.position = 'absolute';\n\t    this._setElSizeStyles(width, height);\n\n\t    if (p.isForce3d) {\n\t      var name = 'backface-visibility';\n\t      style['' + name] = 'hidden';\n\t      style['' + h.prefix.css + name] = 'hidden';\n\t    }\n\t    // }\n\t  };\n\t  /*\n\t    Method to set `width`/`height`/`margins` to the `el` styles.\n\t    @param {Number} Width.\n\t    @param {height} Height.\n\t  */\n\n\n\t  Shape.prototype._setElSizeStyles = function _setElSizeStyles(width, height) {\n\t    var style = this.el.style;\n\t    style.width = width + 'px';\n\t    style.height = height + 'px';\n\t    style['margin-left'] = -width / 2 + 'px';\n\t    style['margin-top'] = -height / 2 + 'px';\n\t  };\n\t  /*\n\t    Method to draw shape.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._draw = function _draw() {\n\t    if (!this.shapeModule) {\n\t      return;\n\t    }\n\n\t    var p = this._props,\n\t        bP = this.shapeModule._props;\n\t    // set props on bit\n\t    // bP.x                    = this._origin.x;\n\t    // bP.y                    = this._origin.y;\n\t    bP.rx = p.rx;\n\t    bP.ry = p.ry;\n\t    bP.stroke = p.stroke;\n\t    bP['stroke-width'] = p.strokeWidth;\n\t    bP['stroke-opacity'] = p.strokeOpacity;\n\t    bP['stroke-dasharray'] = p.strokeDasharray;\n\t    bP['stroke-dashoffset'] = p.strokeDashoffset;\n\t    bP['stroke-linecap'] = p.strokeLinecap;\n\t    bP['fill'] = p.fill;\n\t    bP['fill-opacity'] = p.fillOpacity;\n\t    bP.radius = p.radius;\n\t    bP.radiusX = p.radiusX;\n\t    bP.radiusY = p.radiusY;\n\t    bP.points = p.points;\n\n\t    this.shapeModule._draw();\n\t    this._drawEl();\n\t  };\n\t  /*\n\t    Method to set current modules props to main div el.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._drawEl = function _drawEl() {\n\t    // return;\n\t    if (this.el == null) {\n\t      return true;\n\t    }\n\t    var p = this._props;\n\t    var style = this.el.style;\n\n\t    // style.opacity = p.opacity;\n\t    this._isPropChanged('opacity') && (style.opacity = p.opacity);\n\t    if (!this.isForeign) {\n\t      this._isPropChanged('left') && (style.left = p.left);\n\t      this._isPropChanged('top') && (style.top = p.top);\n\n\t      var isX = this._isPropChanged('x'),\n\t          isY = this._isPropChanged('y'),\n\t          isTranslate = isX || isY,\n\t          isScaleX = this._isPropChanged('scaleX'),\n\t          isScaleY = this._isPropChanged('scaleY'),\n\t          isScale = this._isPropChanged('scale'),\n\t          isScale = isScale || isScaleX || isScaleY,\n\t          isRotate = this._isPropChanged('angle');\n\n\t      if (isTranslate || isScale || isRotate) {\n\t        var transform = this._fillTransform();\n\t        style[h.prefix.css + 'transform'] = transform;\n\t        style['transform'] = transform;\n\t      }\n\n\t      if (this._isPropChanged('origin') || this._deltas['origin']) {\n\t        var origin = this._fillOrigin();\n\t        style[h.prefix.css + 'transform-origin'] = origin;\n\t        style['transform-origin'] = origin;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to check if property changed after the latest check.\n\t    @private\n\t    @param {String} Name of the property to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Shape.prototype._isPropChanged = function _isPropChanged(name) {\n\t    // if there is no recod for the property - create it\n\t    if (this._lastSet[name] == null) {\n\t      this._lastSet[name] = {};\n\t    }\n\t    if (this._lastSet[name].value !== this._props[name]) {\n\t      this._lastSet[name].value = this._props[name];\n\t      return true;\n\t    } else {\n\t      return false;\n\t    }\n\t  };\n\t  /*\n\t    Method to tune new option on run.\n\t    @private\n\t    @override @ Module\n\t    @param {Object}  Option to tune on run.\n\t  */\n\n\n\t  Shape.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    // call super on Module\n\t    _Tunable.prototype._tuneNewOptions.call(this, o);\n\t    // return if empty object\n\t    if (!(o != null && (0, _keys2.default)(o).length)) {\n\t      return 1;\n\t    }\n\n\t    // this._calcSize();\n\t    this._setElStyles();\n\t  };\n\t  /*\n\t    Method to get max radiusX value.\n\t    @private\n\t    @param {String} Radius name.\n\t  */\n\n\n\t  Shape.prototype._getMaxRadius = function _getMaxRadius(name) {\n\t    var selfSize, selfSizeX;\n\t    selfSize = this._getRadiusSize('radius');\n\t    return this._getRadiusSize(name, selfSize);\n\t  };\n\t  /*\n\t    Method to increase calculated size based on easing.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._increaseSizeWithEasing = function _increaseSizeWithEasing() {\n\t    var p = this._props,\n\t        easing = this._o.easing,\n\t        isStringEasing = easing && typeof easing === 'string';\n\n\t    switch (isStringEasing && easing.toLowerCase()) {\n\t      case 'elastic.out':\n\t      case 'elastic.inout':\n\t        p.size *= 1.25;\n\t        break;\n\t      case 'back.out':\n\t      case 'back.inout':\n\t        p.size *= 1.1;\n\t    }\n\t  };\n\t  /*\n\t    Method to increase calculated size based on bit ratio.\n\t    @private\n\t  */\n\t  // _increaseSizeWithBitRatio () {\n\t  //   var p   = this._props;\n\t  //   // p.size *= this.shape._props.ratio;\n\t  //   p.size += 2 * p.sizeGap;\n\t  // }\n\t  /*\n\t    Method to get maximum radius size with optional fallback.\n\t    @private\n\t    @param {Object}\n\t      @param key {String} Name of the radius - [radius|radiusX|radiusY].\n\t      @param @optional fallback {Number}  Optional number to set if there\n\t                                          is no value for the key.\n\t  */\n\n\n\t  Shape.prototype._getRadiusSize = function _getRadiusSize(name) {\n\t    var fallback = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n\t    var delta = this._deltas[name];\n\t    // if value is delta value\n\t    if (delta != null) {\n\t      // get maximum number between start and end values of the delta\n\t      return Math.max(Math.abs(delta.end), Math.abs(delta.start));\n\t    } else if (this._props[name] != null) {\n\t      // else get the value from props object\n\t      return parseFloat(this._props[name]);\n\t    } else {\n\t      return fallback;\n\t    }\n\t  };\n\t  /*\n\t    Method to get max shape canvas size and save it to _props.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getShapeSize = function _getShapeSize() {\n\t    var p = this._props,\n\n\t    // get maximum stroke value\n\t    stroke = this._getMaxStroke();\n\t    // save shape `width` and `height` to `_props`\n\t    p.shapeWidth = p.width != null ? p.width : 2 * this._getMaxRadius('radiusX') + stroke;\n\n\t    p.shapeHeight = p.height != null ? p.height : 2 * this._getMaxRadius('radiusY') + stroke;\n\t  };\n\t  /*\n\t    Method to create shape.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._createShape = function _createShape() {\n\t    // calculate max shape canvas size and set to _props\n\t    this._getShapeSize();\n\t    // don't create actual shape if !`isWithShape`\n\t    if (!this._props.isWithShape) {\n\t      return;\n\t    }\n\n\t    var p = this._props;\n\t    // get shape's class\n\t    var Shape = shapesMap.getShape(this._props.shape);\n\t    // create `_shape` module\n\t    this.shapeModule = new Shape({\n\t      width: p.shapeWidth,\n\t      height: p.shapeHeight,\n\t      parent: this.el\n\t    });\n\t  };\n\t  /*\n\t    Method to get max size in `then` chain\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getMaxSizeInChain = function _getMaxSizeInChain() {\n\t    var p = this._props,\n\t        maxW = 0,\n\t        maxH = 0;\n\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      this._modules[i]._getShapeSize();\n\t      maxW = Math.max(maxW, this._modules[i]._props.shapeWidth);\n\t      maxH = Math.max(maxH, this._modules[i]._props.shapeHeight);\n\t    }\n\n\t    this.shapeModule && this.shapeModule._setSize(maxW, maxH);\n\t    this._setElSizeStyles(maxW, maxH);\n\t  };\n\t  /*\n\t    Method to get max value of the strokeWidth.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getMaxStroke = function _getMaxStroke() {\n\t    var p = this._props;\n\t    var dStroke = this._deltas['strokeWidth'];\n\t    return dStroke != null ? Math.max(dStroke.start, dStroke.end) : p.strokeWidth;\n\t  };\n\t  /*\n\t    Method to draw current progress of the deltas.\n\t    @private\n\t    @override @ Module\n\t    @param   {Number}  EasedProgress to set - [0..1].\n\t    @param   {Number}  Progress to set - [0..1].\n\t  */\n\n\n\t  Shape.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    // call the super on Module\n\t    _module2.default.prototype._setProgress.call(this, easedProgress, progress);\n\t    // draw current progress\n\t    this._draw(easedProgress);\n\t  };\n\t  /*\n\t    Method to add callback overrides to passed object.\n\t    @private\n\t    @param {Object} Object to add the overrides to.\n\t  */\n\n\n\t  Shape.prototype._applyCallbackOverrides = function _applyCallbackOverrides(obj) {\n\t    var it = this,\n\t        p = this._props;\n\t    // specify control functions for the module\n\t    obj.callbackOverrides = {\n\t      onUpdate: function onUpdate(ep, p) {\n\t        return it._setProgress(ep, p);\n\t      },\n\t      onStart: function onStart(isFwd) {\n\t        // don't touch main `el` onStart in chained elements\n\t        if (it._isChained) {\n\t          return;\n\t        };\n\t        if (isFwd) {\n\t          it._show();\n\t        } else {\n\t          if (!p.isShowStart) {\n\t            it._hide();\n\t          }\n\t        }\n\t      },\n\t      onComplete: function onComplete(isFwd) {\n\t        // don't touch main `el` if not the last in `then` chain\n\t        if (!it._isLastInChain()) {\n\t          return;\n\t        }\n\t        if (isFwd) {\n\t          if (!p.isShowEnd) {\n\t            it._hide();\n\t          }\n\t        } else {\n\t          it._show();\n\t        }\n\t      },\n\t      onRefresh: function onRefresh(isBefore) {\n\t        p.isRefreshState && isBefore && it._refreshBefore();\n\t      }\n\t    };\n\t  };\n\t  /*\n\t    Method to setup tween and timeline options before creating them.\n\t    @override @ Tweenable\n\t    @private  \n\t  */\n\n\n\t  Shape.prototype._transformTweenOptions = function _transformTweenOptions() {\n\t    this._applyCallbackOverrides(this._o);\n\t  };\n\t  /*\n\t    Method to create transform string.\n\t    @private\n\t    @returns {String} Transform string.\n\t  */\n\n\n\t  Shape.prototype._fillTransform = function _fillTransform() {\n\t    var p = this._props,\n\t        scaleX = p.scaleX != null ? p.scaleX : p.scale,\n\t        scaleY = p.scaleY != null ? p.scaleY : p.scale,\n\t        scale = scaleX + ', ' + scaleY;\n\t    return 'translate(' + p.x + ', ' + p.y + ') rotate(' + p.angle + 'deg) scale(' + scale + ')';\n\t  };\n\t  /*\n\t    Method to create transform-origin string.\n\t    @private\n\t    @returns {String} Transform string.\n\t  */\n\n\n\t  Shape.prototype._fillOrigin = function _fillOrigin() {\n\t    var p = this._props,\n\t        str = '';\n\t    for (var i = 0; i < p.origin.length; i++) {\n\t      str += p.origin[i].string + ' ';\n\t    }\n\t    return str;\n\t  };\n\t  /*\n\t    Method to refresh state befor startTime.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._refreshBefore = function _refreshBefore() {\n\t    // call setProgress with eased and normal progress\n\t    this._setProgress(this.tween._props.easing(0), 0);\n\n\t    if (this._props.isShowStart) {\n\t      this._show();\n\t    } else {\n\t      this._hide();\n\t    }\n\t  };\n\t  /*\n\t    Method that gets called on `soft` show of the module,\n\t    it should restore transform styles of the module.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Shape.prototype._showByTransform = function _showByTransform() {\n\t    // reset the cache of the scale prop\n\t    this._lastSet.scale = null;\n\t    // draw el accroding to it's props\n\t    this._drawEl();\n\t  };\n\n\t  return Shape;\n\t}(_tunable2.default);\n\n\texports.default = Shape;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _shape = __webpack_require__(2);\n\n\tvar _shape2 = _interopRequireDefault(_shape);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  *TODO:*\n\t  ---\n\t  - tweak then chains\n\t*/\n\n\tvar ShapeSwirl = function (_Shape) {\n\t  (0, _inherits3.default)(ShapeSwirl, _Shape);\n\n\t  function ShapeSwirl() {\n\t    (0, _classCallCheck3.default)(this, ShapeSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Shape.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare _defaults and other default objects.\n\t    @private\n\t    @override @ Shape\n\t  */\n\n\t  ShapeSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _Shape.prototype._declareDefaults.call(this);\n\n\t    /* _DEFAULTS ARE - Shape DEFAULTS + THESE: */\n\n\t    /* [boolean] :: If shape should follow sinusoidal path. */\n\t    this._defaults.isSwirl = true;\n\t    /* ∆ :: [number > 0] :: Degree size of the sinusoidal path. */\n\t    this._defaults.swirlSize = 10;\n\t    /* ∆ :: [number > 0] :: Frequency of the sinusoidal path. */\n\t    this._defaults.swirlFrequency = 3;\n\t    /* ∆ :: [number > 0] :: Sinusoidal path length scale. */\n\t    this._defaults.pathScale = 1;\n\t    /* ∆ :: [number] :: Degree shift for the sinusoidal path. */\n\t    this._defaults.degreeShift = 0;\n\t    /* ∆ :: [number] :: Radius of the shape. */\n\t    this._defaults.radius = 5;\n\t    // ∆ :: Units :: Possible values: [ number, string ]\n\t    this._defaults.x = 0;\n\t    // ∆ :: Units :: Possible values: [ number, string ]\n\t    this._defaults.y = 0;\n\t    // ∆ :: Possible values: [ number ]\n\t    this._defaults.scale = { 1: 0 };\n\t    /* [number: -1, 1] :: Directon of Swirl. */\n\t    this._defaults.direction = 1;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to copy _o options to _props with\n\t    fallback to _defaults.\n\t    @private\n\t    @override @ Module\n\t  */\n\n\n\t  ShapeSwirl.prototype._extendDefaults = function _extendDefaults() {\n\t    _Shape.prototype._extendDefaults.call(this);\n\t    this._calcPosData();\n\t  };\n\t  /*\n\t    Method to tune new oprions to _o and _props object.\n\t    @private\n\t    @overrides @ Module\n\t    @param {Object} Options object to tune to.\n\t  */\n\n\n\t  ShapeSwirl.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    if (o == null) {\n\t      return;\n\t    }\n\n\t    _Shape.prototype._tuneNewOptions.call(this, o);\n\t    if (o.x != null || o.y != null) {\n\t      this._calcPosData();\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate Swirl's position data.\n\t    @private\n\t  */\n\n\n\t  ShapeSwirl.prototype._calcPosData = function _calcPosData() {\n\t    var x = this._getPosValue('x'),\n\t        y = this._getPosValue('y'),\n\t        angle = 90 + Math.atan(y.delta / x.delta || 0) * _h2.default.RAD_TO_DEG;\n\n\t    this._posData = {\n\t      radius: Math.sqrt(x.delta * x.delta + y.delta * y.delta),\n\t      angle: x.delta < 0 ? angle + 180 : angle,\n\t      x: x, y: y\n\t    };\n\t    // set the last position to _props\n\t    // this._calcSwirlXY( 1 );\n\t  };\n\t  /*\n\t    Gets `x` or `y` position value.\n\t    @private\n\t    @param {String} Name of the property.\n\t  */\n\n\n\t  ShapeSwirl.prototype._getPosValue = function _getPosValue(name) {\n\t    var delta = this._deltas[name];\n\t    if (delta) {\n\t      // delete from deltas to prevent normal\n\t      delete this._deltas[name];\n\t      return {\n\t        start: delta.start.value,\n\t        end: delta.end.value,\n\t        delta: delta.delta,\n\t        units: delta.end.unit\n\t      };\n\t    } else {\n\t      var pos = _h2.default.parseUnit(this._props[name]);\n\t      return { start: pos.value, end: pos.value, delta: 0, units: pos.unit };\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate the progress of the Swirl.\n\t    @private\n\t    @overrides @ Shape\n\t    @param {Numer} Eased progress of the Swirl in range of [0..1]\n\t    @param {Numer} Progress of the Swirl in range of [0..1]\n\t  */\n\n\n\t  ShapeSwirl.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    this._progress = easedProgress;\n\t    this._calcCurrentProps(easedProgress, progress);\n\t    this._calcSwirlXY(easedProgress);\n\t    // this._calcOrigin();\n\t    this._draw(easedProgress);\n\t  };\n\t  /*\n\t    Method to calculate x/y for Swirl's progress\n\t    @private\n\t    @mutates _props\n\t    @param {Number} Current progress in [0...1]\n\t  */\n\n\n\t  ShapeSwirl.prototype._calcSwirlXY = function _calcSwirlXY(proc) {\n\t    var p = this._props,\n\t        angle = this._posData.angle + p.degreeShift,\n\t        point = _h2.default.getRadialPoint({\n\t      angle: p.isSwirl ? angle + this._getSwirl(proc) : angle,\n\t      radius: proc * this._posData.radius * p.pathScale,\n\t      center: {\n\t        x: this._posData.x.start,\n\t        y: this._posData.y.start\n\t      }\n\t    });\n\t    // if foreign svg canvas - set position without units\n\t    var x = point.x,\n\t        y = point.y,\n\t        smallNumber = 0.000001;\n\n\t    // remove very small numbers to prevent exponential forms\n\t    if (x > 0 && x < smallNumber) {\n\t      x = smallNumber;\n\t    }\n\t    if (y > 0 && y < smallNumber) {\n\t      y = smallNumber;\n\t    }\n\t    if (x < 0 && x > -smallNumber) {\n\t      x = -smallNumber;\n\t    }\n\t    if (y < 0 && y > -smallNumber) {\n\t      y = -smallNumber;\n\t    }\n\n\t    p.x = this._o.ctx ? x : '' + x + this._posData.x.units;\n\t    p.y = this._o.ctx ? y : '' + y + this._posData.y.units;\n\t  };\n\t  /*\n\t    Method to get progress of the swirl.\n\t    @private\n\t    @param {Number} Progress of the Swirl.\n\t    @returns {Number} Progress of the swirl.\n\t  */\n\n\n\t  ShapeSwirl.prototype._getSwirl = function _getSwirl(proc) {\n\t    var p = this._props;\n\t    return p.direction * p.swirlSize * Math.sin(p.swirlFrequency * proc);\n\t  };\n\t  /*\n\t    Method to draw shape.\n\t    If !isWithShape - draw self el only, but not shape.\n\t    @private\n\t    @overrides @ Shape.\n\t  */\n\n\n\t  ShapeSwirl.prototype._draw = function _draw() {\n\t    // call _draw or just _drawEl @ Shape depending if there is `shape`\n\t    var methodName = this._props.isWithShape ? '_draw' : '_drawEl';\n\t    _shape2.default.prototype[methodName].call(this);\n\t  };\n\n\t  return ShapeSwirl;\n\t}(_shape2.default);\n\n\texports.default = ShapeSwirl;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _shapeSwirl = __webpack_require__(3);\n\n\tvar _shapeSwirl2 = _interopRequireDefault(_shapeSwirl);\n\n\tvar _tunable = __webpack_require__(13);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t// import Shape    from './shape';\n\n\tvar Burst = function (_Tunable) {\n\t  (0, _inherits3.default)(Burst, _Tunable);\n\n\t  function Burst() {\n\t    (0, _classCallCheck3.default)(this, Burst);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tunable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare defaults.\n\t    @override @ ShapeSwirl.\n\t  */\n\n\t  Burst.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      /* [number > 0] :: Quantity of Burst particles. */\n\t      count: 5,\n\t      /* [0 < number < 360] :: Degree of the Burst. */\n\t      degree: 360,\n\t      /* ∆ :: [number > 0] :: Radius of the Burst. */\n\t      radius: { 0: 50 },\n\t      /* ∆ :: [number > 0] :: X radius of the Burst. */\n\t      radiusX: null,\n\t      /* ∆ :: [number > 0] :: Y radius of the Burst. */\n\t      radiusY: null,\n\t      /* [number >= 0] :: width of the main swirl. */\n\t      width: 0,\n\t      /* [number >= 0] :: height of the main swirl. */\n\t      height: 0\n\t    };\n\t  };\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    overrides @ Thenable\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\n\n\t  Burst.prototype.then = function then(o) {\n\t    // remove tween properties (not callbacks)\n\t    this._removeTweenProperties(o);\n\n\t    var newMaster = this._masterThen(o),\n\t        newSwirls = this._childThen(o);\n\n\t    this._setSwirlDuration(newMaster, this._calcPackTime(newSwirls));\n\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\n\n\t  Burst.prototype.tune = function tune(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    // save timeline options to _timelineOptions\n\t    // and delete the timeline options on o\n\t    // cuz masterSwirl should not get them\n\t    this._saveTimelineOptions(o);\n\n\t    // add new timeline properties to timeline\n\t    this.timeline._setProp(this._timelineOptions);\n\n\t    // remove tween options (not callbacks)\n\t    this._removeTweenProperties(o);\n\n\t    // tune _props\n\t    this._tuneNewOptions(o);\n\n\t    // tune master swirl\n\t    this.masterSwirl.tune(o);\n\n\t    // tune child swirls\n\t    this._tuneSwirls(o);\n\n\t    // recalc time for modules\n\t    this._recalcModulesTime();\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHODS ^\n\t  // v PRIVATE METHODS v\n\n\t  /*\n\t    Method to copy `_o` options to `_props` object\n\t    with fallback to `_defaults`.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Burst.prototype._extendDefaults = function _extendDefaults() {\n\t    // remove tween properties (not callbacks)\n\t    this._removeTweenProperties(this._o);\n\t    _Tunable.prototype._extendDefaults.call(this);\n\t  };\n\t  /*\n\t    Method to remove all tween (excluding\n\t    callbacks) props from object.\n\t    @private\n\t    @param {Object} Object which should be cleaned\n\t                    up from tween properties.\n\t  */\n\n\n\t  Burst.prototype._removeTweenProperties = function _removeTweenProperties(o) {\n\t    for (var key in _h2.default.tweenOptionMap) {\n\t      // remove all items that are not declared in _defaults\n\t      if (this._defaults[key] == null) {\n\t        delete o[key];\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to recalc modules chain tween\n\t    times after tuning new options.\n\t    @private\n\t  */\n\n\n\t  Burst.prototype._recalcModulesTime = function _recalcModulesTime() {\n\t    var modules = this.masterSwirl._modules,\n\t        swirls = this._swirls,\n\t        shiftTime = 0;\n\n\t    for (var i = 0; i < modules.length; i++) {\n\t      var tween = modules[i].tween,\n\t          packTime = this._calcPackTime(swirls[i]);\n\t      tween._setProp({ 'duration': packTime, 'shiftTime': shiftTime });\n\t      shiftTime += packTime;\n\t    }\n\n\t    this.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to tune Swirls with new options.\n\t    @private\n\t    @param {Object} New options.\n\t  */\n\n\n\t  Burst.prototype._tuneSwirls = function _tuneSwirls(o) {\n\t    // get swirls in first pack\n\t    var pack0 = this._swirls[0];\n\t    for (var i = 0; i < pack0.length; i++) {\n\t      var swirl = pack0[i],\n\t          option = this._getChildOption(o || {}, i);\n\n\t      // since the `degreeShift` participate in\n\t      // children position calculations, we need to keep\n\t      // the old `degreeShift` value if new not set\n\t      var isDegreeShift = option.degreeShift != null;\n\t      if (!isDegreeShift) {\n\t        option.degreeShift = this._swirls[0][i]._props.degreeShift;\n\t      }\n\n\t      this._addBurstProperties(option, i);\n\n\t      // after burst position calculation - delete the old `degreeShift`\n\t      // from the options, since anyways we have copied it from the swirl\n\t      if (!isDegreeShift) {\n\t        delete option.degreeShift;\n\t      }\n\n\t      swirl.tune(option);\n\t      this._refreshBurstOptions(swirl._modules, i);\n\t    }\n\t  };\n\t  /*\n\t    Method to refresh burst x/y/angle options on further chained \n\t    swirls, because they will be overriden after `tune` call on\n\t    very first swirl.\n\t    @param {Array} Chained modules array\n\t    param {Number} Index of the first swirl in the chain.\n\t  */\n\n\n\t  Burst.prototype._refreshBurstOptions = function _refreshBurstOptions(modules, i) {\n\t    for (var j = 1; j < modules.length; j++) {\n\t      var module = modules[j],\n\t          options = {};\n\t      this._addBurstProperties(options, i, j);\n\t      module._tuneNewOptions(options);\n\t    }\n\t  };\n\t  /*\n\t    Method to call then on masterSwirl.\n\t    @param {Object} Then options.\n\t    @returns {Object} New master swirl.\n\t  */\n\n\n\t  Burst.prototype._masterThen = function _masterThen(o) {\n\t    this.masterSwirl.then(o);\n\t    // get the latest master swirl in then chain\n\t    var newMasterSwirl = _h2.default.getLastItem(this.masterSwirl._modules);\n\t    // save to masterSwirls\n\t    this._masterSwirls.push(newMasterSwirl);\n\t    return newMasterSwirl;\n\t  };\n\t  /*\n\t    Method to call then on child swilrs.\n\t    @param {Object} Then options.\n\t    @return {Array} Array of new Swirls.\n\t  */\n\n\n\t  Burst.prototype._childThen = function _childThen(o) {\n\t    var pack = this._swirls[0],\n\t        newPack = [];\n\n\t    for (var i = 0; i < pack.length; i++) {\n\t      // get option by modulus\n\t      var options = this._getChildOption(o, i);\n\t      var swirl = pack[i];\n\t      var lastSwirl = _h2.default.getLastItem(swirl._modules);\n\t      // add new Master Swirl as parent of new childswirl\n\t      options.parent = this.el;\n\n\t      this._addBurstProperties(options, i, this._masterSwirls.length - 1);\n\n\t      swirl.then(options);\n\n\t      // save the new item in `then` chain\n\t      newPack.push(_h2.default.getLastItem(swirl._modules));\n\t    }\n\t    // save the pack to _swirls object\n\t    this._swirls[this._masterSwirls.length - 1] = newPack;\n\t    return newPack;\n\t  };\n\t  /*\n\t    Method to initialize properties.\n\t    @private\n\t    @overrides @ Thenable\n\t  */\n\n\n\t  Burst.prototype._vars = function _vars() {\n\t    _Tunable.prototype._vars.call(this);\n\t    // just buffer timeline for calculations\n\t    this._bufferTimeline = new _timeline2.default();\n\t  };\n\t  /*\n\t    Method for initial render of the module.\n\t  */\n\n\n\t  Burst.prototype._render = function _render() {\n\t    this._o.isWithShape = false;\n\t    this._o.isSwirl = this._props.isSwirl;\n\t    this._o.callbacksContext = this;\n\t    // save timeline options and remove from _o\n\t    // cuz the master swirl should not get them\n\t    this._saveTimelineOptions(this._o);\n\n\t    this.masterSwirl = new MainSwirl(this._o);\n\t    this._masterSwirls = [this.masterSwirl];\n\t    this.el = this.masterSwirl.el;\n\n\t    this._renderSwirls();\n\t  };\n\t  /*\n\t    Method for initial render of swirls.\n\t    @private\n\t  */\n\n\n\t  Burst.prototype._renderSwirls = function _renderSwirls() {\n\t    var p = this._props,\n\t        pack = [];\n\n\t    for (var i = 0; i < p.count; i++) {\n\t      var option = this._getChildOption(this._o, i);\n\t      pack.push(new ChildSwirl(this._addOptionalProps(option, i)));\n\t    }\n\t    this._swirls = { 0: pack };\n\t    this._setSwirlDuration(this.masterSwirl, this._calcPackTime(pack));\n\t  };\n\t  /*\n\t    Method to save timeline options to _timelineOptions\n\t    and delete the property on the object.\n\t    @private\n\t    @param {Object} The object to save the timeline options from.\n\t  */\n\n\n\t  Burst.prototype._saveTimelineOptions = function _saveTimelineOptions(o) {\n\t    this._timelineOptions = o.timeline;\n\t    delete o.timeline;\n\t  };\n\t  /*\n\t    Method to calculate total time of array of\n\t    concurrent tweens.\n\t    @param   {Array}  Pack to calculate the total time for.\n\t    @returns {Number} Total pack duration.\n\t  */\n\n\n\t  Burst.prototype._calcPackTime = function _calcPackTime(pack) {\n\t    var maxTime = 0;\n\t    for (var i = 0; i < pack.length; i++) {\n\t      var tween = pack[i].tween,\n\t          p = tween._props;\n\n\t      maxTime = Math.max(p.repeatTime / p.speed, maxTime);\n\t    }\n\n\t    return maxTime;\n\t  };\n\t  /*\n\t    Method to set duration for Swirl.\n\t    @param {Object} Swirl instance to set the duration to.\n\t    @param {Number} Duration to set.\n\t  */\n\n\n\t  Burst.prototype._setSwirlDuration = function _setSwirlDuration(swirl, duration) {\n\t    swirl.tween._setProp('duration', duration);\n\t    var isRecalc = swirl.timeline && swirl.timeline._recalcTotalDuration;\n\t    isRecalc && swirl.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to get childOption form object call by modulus.\n\t    @private\n\t    @param   {Object} Object to look in.\n\t    @param   {Number} Index of the current Swirl.\n\t    @returns {Object} Options for the current swirl.\n\t  */\n\n\n\t  Burst.prototype._getChildOption = function _getChildOption(obj, i) {\n\t    var options = {};\n\t    for (var key in obj.children) {\n\t      options[key] = this._getPropByMod(key, i, obj.children);\n\t    }\n\t    return options;\n\t  };\n\t  /*\n\t    Method to get property by modulus.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Number} Index for the modulus.\n\t    @param {Object} Source object to check in.\n\t    @returns {Any} Property.\n\t  */\n\n\n\t  Burst.prototype._getPropByMod = function _getPropByMod(name, index) {\n\t    var sourceObj = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n\t    var prop = sourceObj[name];\n\t    return _h2.default.isArray(prop) ? prop[index % prop.length] : prop;\n\t  };\n\t  /*\n\t    Method to add optional Swirls' properties to passed object.\n\t    @private\n\t    @param {Object} Object to add the properties to.\n\t    @param {Number} Index of the property.\n\t  */\n\n\n\t  Burst.prototype._addOptionalProps = function _addOptionalProps(options, index) {\n\t    options.index = index;\n\t    options.parent = this.masterSwirl.el;\n\n\t    this._addBurstProperties(options, index);\n\n\t    return options;\n\t  };\n\t  /*\n\t    Method to add Burst options to object.\n\t    @private\n\t    @param {Object} Options to add the properties to.\n\t    @param {Number} Index of the Swirl.\n\t    @param {Number} Index of the main swirl.\n\t  */\n\n\n\t  Burst.prototype._addBurstProperties = function _addBurstProperties(options, index, i) {\n\t    // save index of the module\n\t    var mainIndex = this._index;\n\t    // temporary change the index to parse index based properties like stagger\n\t    this._index = index;\n\t    // parse degree shift for the bit\n\t    var degreeShift = this._parseProperty('degreeShift', options.degreeShift || 0);\n\t    // put the index of the module back\n\t    this._index = mainIndex;\n\n\t    var p = this._props,\n\t        degreeCnt = p.degree % 360 === 0 ? p.count : p.count - 1 || 1,\n\t        step = p.degree / degreeCnt,\n\t        pointStart = this._getSidePoint('start', index * step + degreeShift, i),\n\t        pointEnd = this._getSidePoint('end', index * step + degreeShift, i);\n\n\t    options.x = this._getDeltaFromPoints('x', pointStart, pointEnd);\n\t    options.y = this._getDeltaFromPoints('y', pointStart, pointEnd);\n\n\t    options.angle = this._getBitAngle(options.angle || 0, degreeShift, index);\n\t  };\n\t  /* \n\t    Method to get shapes angle in burst so\n\t    it will follow circular shape.\n\t     \n\t     @param    {Number, Object} Base angle.\n\t     @param    {Number}         Angle shift for the bit\n\t     @param    {Number}         Shape's index in burst.\n\t     @returns  {Number}         Angle in burst.\n\t  */\n\n\n\t  Burst.prototype._getBitAngle = function _getBitAngle() {\n\t    var angleProperty = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t    var angleShift = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t    var i = arguments[2];\n\n\t    var p = this._props,\n\t        degCnt = p.degree % 360 === 0 ? p.count : p.count - 1 || 1,\n\t        step = p.degree / degCnt,\n\t        angle = i * step + 90;\n\n\t    angle += angleShift;\n\t    // if not delta option\n\t    if (!this._isDelta(angleProperty)) {\n\t      angleProperty += angle;\n\t    } else {\n\t      var delta = {},\n\t          keys = (0, _keys2.default)(angleProperty),\n\t          start = keys[0],\n\t          end = angleProperty[start];\n\n\t      start = _h2.default.parseStringOption(start, i);\n\t      end = _h2.default.parseStringOption(end, i);\n\t      // new start = newEnd\n\t      delta[parseFloat(start) + angle] = parseFloat(end) + angle;\n\n\t      angleProperty = delta;\n\t    }\n\t    return angleProperty;\n\t  };\n\t  /*\n\t    Method to get radial point on `start` or `end`.\n\t    @private\n\t    @param {String} Name of the side - [start, end].\n\t    @param {Number} Angle of the radial point.\n\t    @param {Number} Index of the main swirl.\n\t    @returns radial point.\n\t  */\n\n\n\t  Burst.prototype._getSidePoint = function _getSidePoint(side, angle, i) {\n\t    var p = this._props,\n\t        sideRadius = this._getSideRadius(side, i);\n\n\t    return _h2.default.getRadialPoint({\n\t      radius: sideRadius.radius,\n\t      radiusX: sideRadius.radiusX,\n\t      radiusY: sideRadius.radiusY,\n\t      angle: angle,\n\t      // center:  { x: p.center, y: p.center }\n\t      center: { x: 0, y: 0 }\n\t    });\n\t  };\n\t  /*\n\t    Method to get radius of the side.\n\t    @private\n\t    @param {String} Name of the side - [start, end].\n\t    @param {Number} Index of the main swirl.\n\t    @returns {Object} Radius.\n\t  */\n\n\n\t  Burst.prototype._getSideRadius = function _getSideRadius(side, i) {\n\t    return {\n\t      radius: this._getRadiusByKey('radius', side, i),\n\t      radiusX: this._getRadiusByKey('radiusX', side, i),\n\t      radiusY: this._getRadiusByKey('radiusY', side, i)\n\t    };\n\t  };\n\t  /*\n\t    Method to get radius from ∆ or plain property.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {String} Side name - [start, end].\n\t    @param {Number} Index of the main swirl.\n\t    @returns {Number} Radius value.\n\t  */\n\n\n\t  Burst.prototype._getRadiusByKey = function _getRadiusByKey(key, side) {\n\t    var i = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n\t    var swirl = this._masterSwirls[i],\n\t        deltas = swirl._deltas,\n\t        props = swirl._props;\n\n\t    if (deltas[key] != null) {\n\t      return deltas[key][side];\n\t    } else if (props[key] != null) {\n\t      return props[key];\n\t    }\n\t  };\n\t  /*\n\t    Method to get delta from start and end position points.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {Object} Start position point.\n\t    @param {Object} End position point.\n\t    @returns {Object} Delta of the end/start.\n\t  */\n\n\n\t  Burst.prototype._getDeltaFromPoints = function _getDeltaFromPoints(key, pointStart, pointEnd) {\n\t    var delta = {};\n\t    if (pointStart[key] === pointEnd[key]) {\n\t      delta = pointStart[key];\n\t    } else {\n\t      delta[pointStart[key]] = pointEnd[key];\n\t    }\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to create timeline.\n\t    @private\n\t    @override @ Tweenable\n\t  */\n\n\n\t  Burst.prototype._makeTimeline = function _makeTimeline() {\n\t    // restore timeline options that were deleted in _render method\n\t    this._o.timeline = this._timelineOptions;\n\t    _Tunable.prototype._makeTimeline.call(this);\n\t    this.timeline.add(this.masterSwirl, this._swirls[0]);\n\t  };\n\t  /*\n\t    Method to make Tween for the module.\n\t    @private\n\t    @override @ Tweenable\n\t  */\n\n\n\t  Burst.prototype._makeTween = function _makeTween() {} /* don't create any tween */\n\t  /*\n\t    Override `_hide` and `_show` methods on module\n\t    since we don't have to hide nor show on the module.\n\t  */\n\t  ;\n\n\t  Burst.prototype._hide = function _hide() {/* do nothing */};\n\n\t  Burst.prototype._show = function _show() {/* do nothing */};\n\n\t  return Burst;\n\t}(_tunable2.default);\n\n\tvar ChildSwirl = function (_ShapeSwirl) {\n\t  (0, _inherits3.default)(ChildSwirl, _ShapeSwirl);\n\n\t  function ChildSwirl() {\n\t    (0, _classCallCheck3.default)(this, ChildSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _ShapeSwirl.apply(this, arguments));\n\t  }\n\n\t  ChildSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _ShapeSwirl.prototype._declareDefaults.call(this);\n\t    this._defaults.isSwirl = false;\n\t    this._o.duration = this._o.duration != null ? this._o.duration : 700;\n\t  };\n\t  // disable degreeshift calculations\n\n\n\t  ChildSwirl.prototype._calcSwirlXY = function _calcSwirlXY(proc) {\n\t    var degreeShift = this._props.degreeShift;\n\n\t    this._props.degreeShift = 0;\n\t    _ShapeSwirl.prototype._calcSwirlXY.call(this, proc);\n\t    this._props.degreeShift = degreeShift;\n\t  };\n\n\t  return ChildSwirl;\n\t}(_shapeSwirl2.default);\n\n\tvar MainSwirl = function (_ChildSwirl) {\n\t  (0, _inherits3.default)(MainSwirl, _ChildSwirl);\n\n\t  function MainSwirl() {\n\t    (0, _classCallCheck3.default)(this, MainSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _ChildSwirl.apply(this, arguments));\n\t  }\n\n\t  MainSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _ChildSwirl.prototype._declareDefaults.call(this);\n\t    this._defaults.scale = 1;\n\t    this._defaults.width = 0;\n\t    this._defaults.height = 0;\n\t    this._defaults.radius = { 25: 75 };\n\t    // this._defaults.duration = 2000;\n\t  };\n\n\t  return MainSwirl;\n\t}(ChildSwirl);\n\n\tBurst.ChildSwirl = ChildSwirl;\n\tBurst.MainSwirl = MainSwirl;\n\n\texports.default = Burst;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _extends4 = __webpack_require__(27);\n\n\tvar _extends5 = _interopRequireDefault(_extends4);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _thenable = __webpack_require__(12);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _deltas = __webpack_require__(15);\n\n\tvar _deltas2 = _interopRequireDefault(_deltas);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(19);\n\n\n\t// get tween properties\n\tvar obj = {};\n\t_tween2.default.prototype._declareDefaults.call(obj);\n\tvar keys = (0, _keys2.default)(obj._defaults);\n\tfor (var i = 0; i < keys.length; i++) {\n\t  obj._defaults[keys[i]] = 1;\n\t}\n\tobj._defaults['timeline'] = 1;\n\tvar TWEEN_PROPERTIES = obj._defaults;\n\n\t/*\n\t  TODO:\n\n\t    - change _props to _propsObj for animations\n\t    - current values in deltas\n\t*/\n\n\tvar Html = function (_Thenable) {\n\t  (0, _inherits3.default)(Html, _Thenable);\n\n\t  function Html() {\n\t    (0, _classCallCheck3.default)(this, Html);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Thenable.apply(this, arguments));\n\t  }\n\n\t  Html.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      x: 0,\n\t      y: 0,\n\t      z: 0,\n\n\t      skewX: 0,\n\t      skewY: 0,\n\n\t      // angle:      0,\n\t      angleX: 0,\n\t      angleY: 0,\n\t      angleZ: 0,\n\n\t      scale: 1,\n\t      scaleX: 1,\n\t      scaleY: 1,\n\n\t      isSoftHide: true,\n\t      isShowStart: true,\n\t      isShowEnd: true,\n\t      isForce3d: false,\n\t      isRefreshState: true\n\n\t    };\n\t    // exclude from automatic drawing\n\t    this._drawExclude = { el: 1 };\n\t    // properties that cause 3d layer\n\t    this._3dProperties = ['angleX', 'angleY', 'z'];\n\t    // properties that have array values\n\t    this._arrayPropertyMap = { transformOrigin: 1, backgroundPosition: 1 };\n\t    // properties that have no units\n\t    this._numberPropertyMap = {\n\t      opacity: 1, scale: 1, scaleX: 1, scaleY: 1,\n\t      // angle: 1,\n\t      angleX: 1, angleY: 1, angleZ: 1,\n\t      skewX: 1, skewY: 1\n\t    };\n\t    // properties that should be prefixed\n\t    this._prefixPropertyMap = { transform: 1, transformOrigin: 1 };\n\t    // save prefix\n\t    this._prefix = h.prefix.css;\n\t  };\n\n\t  Html.prototype.then = function then(o) {\n\t    // return if nothing was passed\n\t    if (o == null || !(0, _keys2.default)(o).length) {\n\t      return 1;\n\t    }\n\n\t    // get the last item in `then` chain\n\t    var prevModule = h.getLastItem(this._modules);\n\t    // set deltas to the finish state\n\t    prevModule.deltas.refresh(false);\n\t    // copy finish state to the last history record\n\t    this._history[this._history.length - 1] = prevModule._o;\n\t    // call super\n\t    _Thenable.prototype.then.call(this, o);\n\t    // restore the _props\n\t    prevModule.deltas.restore();\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to pipe startValue of the delta.\n\t    @private\n\t    @ovarrides @ Thenable\n\t    @param {String} Start property name.\n\t    @param {Any} Start property value.\n\t    @returns {Any} Start property value.\n\t  */\n\n\n\t  Html.prototype._checkStartValue = function _checkStartValue(key, value) {\n\t    if (value == null) {\n\t      // return default value for transforms\n\t      if (this._defaults[key] != null) {\n\t        return this._defaults[key];\n\t      }\n\t      // return default value from _customProps\n\t      if (this._customProps[key] != null) {\n\t        return this._customProps[key];\n\t      }\n\t      // try to get the default value\n\t      if (h.defaultStyles[key] != null) {\n\t        return h.defaultStyles[key];\n\t      }\n\t      // at the end return 0\n\t      return 0;\n\t    }\n\n\t    return value;\n\t  };\n\t  /*\n\t    Method to draw _props to el.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._draw = function _draw() {\n\t    var p = this._props;\n\t    for (var i = 0; i < this._drawProps.length; i++) {\n\t      var name = this._drawProps[i];\n\t      this._setStyle(name, p[name]);\n\t    }\n\t    // draw transforms\n\t    this._drawTransform();\n\t    // call custom transform callback if exist\n\t    this._customDraw && this._customDraw(this._props.el, this._props);\n\t  };\n\t  /*\n\t    Method to set transform on element.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._drawTransform = function _drawTransform() {\n\t    var p = this._props;\n\t    var string = !this._is3d ? 'translate(' + p.x + ', ' + p.y + ')\\n          rotate(' + p.angleZ + 'deg)\\n          skew(' + p.skewX + 'deg, ' + p.skewY + 'deg)\\n          scale(' + p.scaleX + ', ' + p.scaleY + ')' : 'translate3d(' + p.x + ', ' + p.y + ', ' + p.z + ')\\n          rotateX(' + p.angleX + 'deg)\\n          rotateY(' + p.angleY + 'deg)\\n          rotateZ(' + p.angleZ + 'deg)\\n          skew(' + p.skewX + 'deg, ' + p.skewY + 'deg)\\n          scale(' + p.scaleX + ', ' + p.scaleY + ')';\n\n\t    this._setStyle('transform', string);\n\t  };\n\t  /*\n\t    Method to render on initialization.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Html.prototype._render = function _render() {\n\t    // return immediately if not the first in `then` chain\n\t    if (this._o.prevChainModule) {\n\t      return;\n\t    }\n\n\t    var p = this._props;\n\n\t    for (var i = 0; i < this._renderProps.length; i++) {\n\t      var name = this._renderProps[i],\n\t          value = p[name];\n\n\t      value = typeof value === 'number' ? value + 'px' : value;\n\t      this._setStyle(name, value);\n\t    }\n\n\t    this._draw();\n\n\t    if (!p.isShowStart) {\n\t      this._hide();\n\t    }\n\t  };\n\t  /*\n\t    Method to set style on el.\n\t    @private\n\t    @param {String} Style property name.\n\t    @param {String} Style property value.\n\t  */\n\n\n\t  Html.prototype._setStyle = function _setStyle(name, value) {\n\t    if (this._state[name] !== value) {\n\t      var style = this._props.el.style;\n\t      // set style\n\t      style[name] = value;\n\t      // if prefix needed - set it\n\t      if (this._prefixPropertyMap[name]) {\n\t        style['' + this._prefix + name] = value;\n\t      }\n\t      // cache the last set value\n\t      this._state[name] = value;\n\t    }\n\t  };\n\t  /*\n\t    Method to copy `_o` options to `_props` object.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._extendDefaults = function _extendDefaults() {\n\t    this._props = this._o.props || {};\n\t    // props for intial render only\n\t    this._renderProps = [];\n\t    // props for draw on every frame update\n\t    this._drawProps = [];\n\t    // save custom properties if present\n\t    this._saveCustomProperties(this._o);\n\t    // copy the options\n\t    var o = (0, _extends5.default)({}, this._o);\n\t    // extend options with defaults\n\t    o = this._addDefaults(o);\n\n\t    var keys = (0, _keys2.default)(o);\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      // include the property if it is not in drawExclude object\n\t      // and not in defaults = not a transform\n\t      var isInclude = !this._drawExclude[key] && // not in exclude map\n\t      this._defaults[key] == null && // not transform property\n\t      !TWEEN_PROPERTIES[key]; // not tween property\n\n\t      var isCustom = this._customProps[key];\n\t      // copy all non-delta properties to the props\n\t      // if not delta then add the property to render\n\t      // list that is called on initialization\n\t      // otherwise add it to the draw list that will\n\t      // be drawed on each frame\n\t      if (!h.isDelta(o[key]) && !TWEEN_PROPERTIES[key]) {\n\t        this._parseOption(key, o[key]);\n\t        if (key === 'el') {\n\t          this._props.el = h.parseEl(o.el);\n\t          this.el = this._props.el;\n\t        }\n\t        if (isInclude && !isCustom) {\n\t          this._renderProps.push(key);\n\t        }\n\t        // copy delta prop but not transforms\n\t        // otherwise push it to draw list that gets traversed on every draw\n\t      } else if (isInclude && !isCustom) {\n\t          this._drawProps.push(key);\n\t        }\n\t    }\n\n\t    this._createDeltas(o);\n\t  };\n\t  /*\n\t    Method to save customProperties to _customProps.\n\t    @param {Object} Options of the module.\n\t  */\n\n\n\t  Html.prototype._saveCustomProperties = function _saveCustomProperties() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    this._customProps = o.customProperties || {};\n\t    this._customProps = (0, _extends5.default)({}, this._customProps);\n\t    this._customDraw = this._customProps.draw;\n\t    delete this._customProps.draw;\n\t    delete o.customProperties;\n\n\t    this._copyDefaultCustomProps();\n\n\t    // if ( this._customProps ) {}\n\t    // this._customProps = this._customProps || {};\n\t  };\n\n\t  Html.prototype._copyDefaultCustomProps = function _copyDefaultCustomProps() {\n\t    for (var key in this._customProps) {\n\t      if (this._o[key] == null) {\n\t        this._o[key] = this._customProps[key];\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to reset some flags on merged options object.\n\t    @private\n\t    @overrides @ Thenable\n\t    @param   {Object} Options object.\n\t    @returns {Object} Options object.\n\t  */\n\n\n\t  Html.prototype._resetMergedFlags = function _resetMergedFlags(o) {\n\t    _Thenable.prototype._resetMergedFlags.call(this, o);\n\t    o.props = this._props;\n\t    o.customProperties = this._customProps;\n\t    return o;\n\t  };\n\t  /*\n\t    Method to parse option value.\n\t    @private\n\t    @param {String} Option name.\n\t    @param {Any} Option value.\n\t  */\n\n\n\t  Html.prototype._parseOption = function _parseOption(key, value) {\n\t    _Thenable.prototype._parseOption.call(this, key, value);\n\t    // at this point the property is parsed\n\t    var parsed = this._props[key];\n\t    // cast it to string if it is array\n\t    if (h.isArray(parsed)) {\n\t      this._props[key] = this._arrToString(parsed);\n\t    }\n\t  };\n\t  /*\n\t    Method cast array to string value.\n\t    @private\n\t    @param {Array} Array of parsed numbers with units.\n\t    @returns {String} Casted array.\n\t  */\n\n\n\t  Html.prototype._arrToString = function _arrToString(arr) {\n\t    var string = '';\n\t    for (var i = 0; i < arr.length; i++) {\n\t      string += arr[i].string + ' ';\n\t    }\n\t    return string;\n\t  };\n\t  /*\n\t    Method to add defauls to passed object.\n\t    @private\n\t    @param {Object} Object to add defaults to.\n\t  */\n\n\n\t  Html.prototype._addDefaults = function _addDefaults(obj) {\n\t    // flag that after all defaults are set will indicate\n\t    // if user have set the 3d transform\n\t    this._is3d = false;\n\n\t    for (var key in this._defaults) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\n\t      // copy the properties to the _o object\n\t      // if it's null - set the default value\n\t      if (obj[key] == null) {\n\t        // scaleX and scaleY should fallback to scale\n\t        if (key === 'scaleX' || key === 'scaleY') {\n\t          obj[key] = obj['scale'] != null ? obj['scale'] : this._defaults['scale'];\n\t        } else {\n\t          obj[key] = this._defaults[key];\n\t        }\n\t      } else {\n\t        // get if 3d property was set.\n\t        if (this._3dProperties.indexOf(key) !== -1) {\n\t          this._is3d = true;\n\t        }\n\t      }\n\t    }\n\n\t    if (this._o.isForce3d) {\n\t      this._is3d = true;\n\t    }\n\n\t    return obj;\n\t  };\n\t  /*\n\t    Lifecycle method to declare variables.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._vars = function _vars() {\n\t    // set deltas to the last value, so the _props with\n\t    // end values will be copied to the _history, it is\n\t    // crucial for `then` chaining\n\t    this.deltas.refresh(false);\n\t    // call super vars\n\t    _Thenable.prototype._vars.call(this);\n\t    // state of set properties\n\t    this._state = {};\n\t    // restore delta values that we have refreshed before\n\t    this.deltas.restore(false);\n\t  };\n\t  /*\n\t    Method to create deltas from passed object.\n\t    @private\n\t    @param {Object} Options object to pass to the Deltas.\n\t  */\n\n\n\t  Html.prototype._createDeltas = function _createDeltas(options) {\n\t    this.deltas = new _deltas2.default({\n\t      options: options,\n\t      props: this._props,\n\t      arrayPropertyMap: this._arrayPropertyMap,\n\t      numberPropertyMap: this._numberPropertyMap,\n\t      customProps: this._customProps,\n\t      callbacksContext: options.callbacksContext || this,\n\t      isChained: !!this._o.prevChainModule\n\t    });\n\n\t    // if chained module set timeline to deltas' timeline\n\t    if (this._o.prevChainModule) {\n\t      this.timeline = this.deltas.timeline;\n\t    }\n\t  };\n\t  /* @overrides @ Tweenable */\n\n\n\t  Html.prototype._makeTween = function _makeTween() {};\n\n\t  Html.prototype._makeTimeline = function _makeTimeline() {\n\t    // do not create timeline if module if chained\n\t    if (this._o.prevChainModule) {\n\t      return;\n\t    }\n\t    // add callbacks overrides\n\t    this._o.timeline = this._o.timeline || {};\n\t    this._addCallbackOverrides(this._o.timeline);\n\t    _Thenable.prototype._makeTimeline.call(this);\n\t    this.timeline.add(this.deltas);\n\t  };\n\t  /*\n\t    Method to add callback overrides to passed object object.\n\t    @param {Object} Object to add overrides on.\n\t  */\n\n\n\t  Html.prototype._addCallbackOverrides = function _addCallbackOverrides(o) {\n\t    var it = this;\n\t    var p = this._props;\n\t    o.callbackOverrides = {\n\t      onUpdate: this._draw,\n\t      onRefresh: this._props.isRefreshState ? this._draw : void 0,\n\t      onStart: function onStart(isFwd) {\n\t        // don't touch main `el` onStart in chained elements\n\t        if (it._isChained) {\n\t          return;\n\t        };\n\t        // show if was hidden at start\n\t        if (isFwd && !p.isShowStart) {\n\t          it._show();\n\t        }\n\t        // hide if should be hidden at start\n\t        else {\n\t            if (!p.isShowStart) {\n\t              it._hide();\n\t            }\n\t          }\n\t      },\n\t      onComplete: function onComplete(isFwd) {\n\t        // don't touch main `el` if not the last in `then` chain\n\t        if (it._isChained) {\n\t          return;\n\t        }\n\t        if (isFwd) {\n\t          if (!p.isShowEnd) {\n\t            it._hide();\n\t          }\n\t        } else if (!p.isShowEnd) {\n\t          it._show();\n\t        }\n\t      }\n\t    };\n\t  };\n\n\t  /*\n\t    Method that gets called on `soft` show of the module,\n\t    it should restore transform styles of the module.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Html.prototype._showByTransform = function _showByTransform() {\n\t    this._drawTransform();\n\t  };\n\n\t  /*\n\t    Method to merge `start` and `end` for a property in then record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Start value of the property.\n\t    @param {Any}    End value of the property.\n\t  */\n\t  // !! COVER !!\n\n\n\t  Html.prototype._mergeThenProperty = function _mergeThenProperty(key, startValue, endValue) {\n\t    // if isnt tween property\n\t    var isBoolean = typeof endValue === 'boolean',\n\t        curve,\n\t        easing;\n\n\t    if (!h.isTweenProp(key) && !this._nonMergeProps[key] && !isBoolean) {\n\n\t      var TWEEN_PROPS = {};\n\t      if (h.isObject(endValue) && endValue.to != null) {\n\t        for (var _key in endValue) {\n\t          if (TWEEN_PROPERTIES[_key] || _key === 'curve') {\n\t            TWEEN_PROPS[_key] = endValue[_key];\n\t            delete endValue[_key];\n\t          }\n\t        }\n\t        // curve    = endValue.curve;\n\t        // easing   = endValue.easing;\n\t        endValue = endValue.to;\n\t      }\n\n\t      // if end value is delta - just save it\n\t      if (this._isDelta(endValue)) {\n\n\t        var _TWEEN_PROPS = {};\n\t        for (var _key2 in endValue) {\n\t          if (TWEEN_PROPERTIES[_key2] || _key2 === 'curve') {\n\t            _TWEEN_PROPS[_key2] = endValue[_key2];\n\t            delete endValue[_key2];\n\t          }\n\t        }\n\t        var result = this._parseDeltaValues(key, endValue);\n\n\t        return (0, _extends5.default)({}, result, _TWEEN_PROPS);\n\t      } else {\n\t        var parsedEndValue = this._parsePreArrayProperty(key, endValue);\n\t        // if end value is not delta - merge with start value\n\t        if (this._isDelta(startValue)) {\n\t          var _extends2;\n\n\t          // if start value is delta - take the end value\n\t          // as start value of the new delta\n\t          return (0, _extends5.default)((_extends2 = {}, _extends2[h.getDeltaEnd(startValue)] = parsedEndValue, _extends2), TWEEN_PROPS);\n\t          // if both start and end value are not ∆ - make ∆\n\t        } else {\n\t            var _extends3;\n\n\t            return (0, _extends5.default)((_extends3 = {}, _extends3[startValue] = parsedEndValue, _extends3), TWEEN_PROPS);\n\t          }\n\t      }\n\t      // copy the tween values unattended\n\t    } else {\n\t        return endValue;\n\t      }\n\t  };\n\n\t  return Html;\n\t}(_thenable2.default);\n\n\texports.default = Html;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tunable = __webpack_require__(13);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Stagger = function (_Tunable) {\n\t  (0, _inherits3.default)(Stagger, _Tunable);\n\n\t  function Stagger(options, Module) {\n\t    var _ret;\n\n\t    (0, _classCallCheck3.default)(this, Stagger);\n\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Tunable.call(this));\n\n\t    return _ret = _this._init(options, Module), (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t  /*\r\n\t    Method to create then chain on child modules.\r\n\t    @param {Object} Then options.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.then = function then(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].then(this._getOptionByIndex(i, o));\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to tune child modules.\r\n\t    @param {Object} Tune options.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.tune = function tune(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].tune(this._getOptionByIndex(i, o));\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to generate child modules.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.generate = function generate() {\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].generate();\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to get an option by modulo and name.\r\n\t    @param {String} Name of the property to get.\r\n\t    @param {Number} Index for the modulo calculation.\r\n\t    @param {Object} Options hash to look in.\r\n\t    @return {Any} Property.\r\n\t  */\n\n\n\t  Stagger.prototype._getOptionByMod = function _getOptionByMod(name, i, store) {\n\t    var props = store[name];\n\t    // if not dom list then clone it to array\n\t    if (props + '' === '[object NodeList]' || props + '' === '[object HTMLCollection]') props = Array.prototype.slice.call(props, 0);\n\t    // get the value in array or return the value itself\n\t    var value = _h2.default.isArray(props) ? props[i % props.length] : props;\n\t    // check if value has the stagger expression, if so parse it\n\t    return _h2.default.parseIfStagger(value, i);\n\t  };\n\t  /*\r\n\t    Method to get option by modulo of index.\r\n\t    @param {Number} Index for modulo calculations.\r\n\t    @param {Object} Options hash to look in.\r\n\t  */\n\n\n\t  Stagger.prototype._getOptionByIndex = function _getOptionByIndex(i, store) {\n\t    var _this2 = this;\n\n\t    var options = {};\n\t    (0, _keys2.default)(store).forEach(function (key) {\n\t      return options[key] = _this2._getOptionByMod(key, i, store);\n\t    });\n\t    return options;\n\t  };\n\t  /*\r\n\t    Method to get total child modules quantity.\r\n\t    @param  {String} Name of quantifier in options hash.\r\n\t    @param  {Object} Options hash object.\r\n\t    @return {Number} Number of child object that should be defined.\r\n\t  */\n\n\n\t  Stagger.prototype._getChildQuantity = function _getChildQuantity(name, store) {\n\t    // if number was set\n\t    if (typeof name === 'number') {\n\t      return name;\n\t    }\n\n\t    var quantifier = store[name];\n\t    if (_h2.default.isArray(quantifier)) {\n\t      return quantifier.length;\n\t    } else if (quantifier + '' === '[object NodeList]') {\n\t      return quantifier.length;\n\t    } else if (quantifier + '' === '[object HTMLCollection]') {\n\t      return Array.prototype.slice.call(quantifier, 0).length;\n\t    } else if (quantifier instanceof HTMLElement) {\n\t      return 1;\n\t    } else if (typeof quantifier == 'string') {\n\t      return 1;\n\t    }\n\t  };\n\t  /*\r\n\t    Method to make stagger form options\r\n\t    @param {Object} Options.\r\n\t    @param {Object} Child class.\r\n\t  */\n\n\n\t  Stagger.prototype._init = function _init(options, Module) {\n\t    var count = this._getChildQuantity(options.quantifier || 'el', options);\n\t    this._createTimeline(options);this._modules = [];\n\t    for (var i = 0; i < count; i++) {\n\t      // get child module's option\n\t      var option = this._getOptionByIndex(i, options);\n\t      option.isRunLess = true;\n\t      // set index of the module\n\t      option.index = i;\n\t      // create child module\n\t      var module = new Module(option);this._modules.push(module);\n\t      // add child module's timeline to the self timeline\n\t      this.timeline.add(module);\n\t    }\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to create timeline.\r\n\t    @param {Object} Timeline options.\r\n\t  */\n\n\n\t  Stagger.prototype._createTimeline = function _createTimeline() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    this.timeline = new _timeline2.default(options.timeline);\n\t  };\n\n\t  /* @overrides @ Tweenable */\n\n\n\t  Stagger.prototype._makeTween = function _makeTween() {};\n\n\t  Stagger.prototype._makeTimeline = function _makeTimeline() {};\n\n\t  return Stagger;\n\t}(_tunable2.default);\n\n\tmodule.exports = function (Module) {\n\t  return function (options) {\n\t    return new Stagger(options, Module);\n\t  };\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\r\n\t  Class for toggling opacity on bunch of elements\r\n\t  @class Spriter\r\n\t  @todo\r\n\t    - add isForce3d option\r\n\t    - add run new option merging\r\n\t    - add then chains\r\n\t*/\n\n\tvar Spriter = function () {\n\t  /*\r\n\t    Defaults/APIs\r\n\t  */\n\n\t  Spriter.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      /*\r\n\t        Duration\r\n\t        @property duration\r\n\t        @type     {Number}\r\n\t      */\n\t      duration: 500,\n\t      /*\r\n\t        Delay\r\n\t        @property delay\r\n\t        @type     {Number}\r\n\t      */\n\t      delay: 0,\n\t      /*\r\n\t        Easing. Please see the \r\n\t        [timeline module parseEasing function](timeline.coffee.html#parseEasing)\r\n\t        for all avaliable options.\r\n\t          @property easing\r\n\t        @type     {String, Function}\r\n\t      */\n\t      easing: 'linear.none',\n\t      /*\r\n\t        Repeat times count\r\n\t        \r\n\t        @property repeat\r\n\t        @type     {Number}\r\n\t      */\n\t      repeat: 0,\n\t      /*\r\n\t        Yoyo option defines if animation should be altered on repeat.\r\n\t        \r\n\t        @property yoyo\r\n\t        @type     {Boolean}\r\n\t      */\n\t      yoyo: false,\n\t      /*\r\n\t        isRunLess option prevents animation from running immediately after\r\n\t        initialization.\r\n\t        \r\n\t        @property isRunLess\r\n\t        @type     {Boolean}\r\n\t      */\n\t      isRunLess: false,\n\t      /*\r\n\t        isShowEnd option defines if the last frame should be shown when\r\n\t        animation completed.\r\n\t        \r\n\t        @property isShowEnd\r\n\t        @type     {Boolean}\r\n\t      */\n\t      isShowEnd: false,\n\t      /*\r\n\t        onStart callback will be called once on animation start.\r\n\t        \r\n\t        @property onStart\r\n\t        @type     {Function}\r\n\t      */\n\t      onStart: null,\n\t      /*\r\n\t        onUpdate callback will be called on every frame of the animation.\r\n\t        The current progress in range **[0,1]** will be passed to the callback.\r\n\t        \r\n\t        @property onUpdate\r\n\t        @type     {Function}\r\n\t      */\n\t      onUpdate: null,\n\t      /*\r\n\t        onComplete callback will be called once on animation complete.\r\n\t        \r\n\t        @property onComplete\r\n\t        @type     {Function}\r\n\t      */\n\t      onComplete: null\n\t    };\n\t  };\n\n\t  function Spriter() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Spriter);\n\n\t    this.o = o;\n\t    if (!this.o.el) {\n\t      return _h2.default.error('No \"el\" option specified, aborting');\n\t    }\n\t    this._vars();this._declareDefaults();this._extendDefaults();this._parseFrames();\n\t    if (this._frames.length <= 2) _h2.default.warn('Spriter: only ' + this._frames.length + ' frames found');\n\t    if (this._frames.length < 1) _h2.default.error(\"Spriter: there is no frames to animate, aborting\");\n\t    this._createTween();\n\t    return this;\n\t  }\n\t  /*\r\n\t    Method to declare some variables.\r\n\t    \r\n\t    @method run\r\n\t    @param  {Object} New options\r\n\t    @todo   Implement new object merging\r\n\t  */\n\n\n\t  Spriter.prototype._vars = function _vars() {\n\t    this._props = _h2.default.cloneObj(this.o);\n\t    this.el = this.o.el;\n\t    this._frames = [];\n\t  };\n\t  /*\r\n\t    Method to run the spriter on demand.\r\n\t    \r\n\t    @method run\r\n\t    @param  {Object} New options\r\n\t    @todo   Implement new object merging\r\n\t  */\n\n\n\t  Spriter.prototype.run = function run(o) {\n\t    return this.timeline.play();\n\t  };\n\t  /*\r\n\t    Method to extend _props by options(this.o)\r\n\t    \r\n\t    @method _extendDefaults\r\n\t  */\n\n\n\t  Spriter.prototype._extendDefaults = function _extendDefaults() {\n\t    return _h2.default.extend(this._props, this._defaults);\n\t  };\n\t  /*\r\n\t    Method to parse frames as child nodes of el.\r\n\t    \r\n\t    @method _parseFrames\r\n\t  */\n\n\n\t  Spriter.prototype._parseFrames = function _parseFrames() {\n\t    this._frames = Array.prototype.slice.call(this.el.children, 0);\n\t    this._frames.forEach(function (frame, i) {\n\t      return frame.style.opacity = 0;\n\t    });\n\t    this._frameStep = 1 / this._frames.length;\n\t  };\n\n\t  /*\r\n\t    Method to create tween and timeline and supply callbacks.\r\n\t    \r\n\t    @method _createTween\r\n\t  */\n\n\n\t  Spriter.prototype._createTween = function _createTween() {\n\t    var _this = this;\n\n\t    this._tween = new _tween2.default({\n\t      duration: this._props.duration,\n\t      delay: this._props.delay,\n\t      yoyo: this._props.yoyo,\n\t      repeat: this._props.repeat,\n\t      easing: this._props.easing,\n\t      onStart: function onStart() {\n\t        return _this._props.onStart && _this._props.onStart();\n\t      },\n\t      onComplete: function onComplete() {\n\t        return _this._props.onComplete && _this._props.onComplete();\n\t      },\n\t      onUpdate: function onUpdate(p) {\n\t        return _this._setProgress(p);\n\t      }\n\t    });\n\t    this.timeline = new _timeline2.default();this.timeline.add(this._tween);\n\t    if (!this._props.isRunLess) this._startTween();\n\t  };\n\n\t  /*\r\n\t    Method to start tween\r\n\t    \r\n\t    @method _startTween\r\n\t  */\n\n\n\t  Spriter.prototype._startTween = function _startTween() {\n\t    var _this2 = this;\n\n\t    setTimeout(function () {\n\t      return _this2.timeline.play();\n\t    }, 1);\n\t  };\n\t  /*\r\n\t    Method to set progress of the sprite\r\n\t    \r\n\t    @method _setProgress\r\n\t    @param  {Number} Progress in range **[0,1]**\r\n\t  */\n\n\n\t  Spriter.prototype._setProgress = function _setProgress(p) {\n\t    // get the frame number\n\t    var proc = Math.floor(p / this._frameStep);\n\t    // react only if frame changes\n\t    if (this._prevFrame != this._frames[proc]) {\n\t      // if previous frame isnt current one, hide it\n\t      if (this._prevFrame) {\n\t        this._prevFrame.style.opacity = 0;\n\t      }\n\t      // if end of animation and isShowEnd flag was specified\n\t      // then show the last frame else show current frame\n\t      var currentNum = p === 1 && this._props.isShowEnd ? proc - 1 : proc;\n\t      // show the current frame\n\t      if (this._frames[currentNum]) {\n\t        this._frames[currentNum].style.opacity = 1;\n\t      }\n\t      // set previous frame as current\n\t      this._prevFrame = this._frames[proc];\n\t    }\n\t    if (this._props.onUpdate) {\n\t      this._props.onUpdate(p);\n\t    }\n\t  };\n\n\t  return Spriter;\n\t}();\n\n\texports.default = Spriter;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tweener = __webpack_require__(10);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _easing = __webpack_require__(22);\n\n\tvar _easing2 = _interopRequireDefault(_easing);\n\n\tvar _module = __webpack_require__(16);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t// import h from '../h';\n\n\tvar Tween = function (_Module) {\n\t  (0, _inherits3.default)(Tween, _Module);\n\n\t  /*\n\t    Method do declare defaults with this._defaults object.\n\t    @private\n\t  */\n\n\t  Tween.prototype._declareDefaults = function _declareDefaults() {\n\t    // DEFAULTS\n\t    this._defaults = {\n\t      /* duration of the tween [0..∞] */\n\t      duration: 350,\n\t      /* delay of the tween [-∞..∞] */\n\t      delay: 0,\n\t      /* repeat of the tween [0..∞], means how much to\n\t         repeat the tween regardless first run,\n\t         for instance repeat: 2 will make the tween run 3 times */\n\t      repeat: 0,\n\t      /* speed of playback [0..∞], speed that is less then 1\n\t         will slowdown playback, for instance .5 will make tween\n\t         run 2x slower. Speed of 2 will speedup the tween to 2x. */\n\t      speed: 1,\n\t      /*  flip onUpdate's progress on each even period.\n\t          note that callbacks order won't flip at least\n\t          for now (under consideration). */\n\t      isYoyo: false,\n\t      /* easing for the tween, could be any easing type [link to easing-types.md] */\n\t      easing: 'Sin.Out',\n\t      /*\n\t        Easing for backward direction of the tweenthe tween,\n\t        if `null` - fallbacks to `easing` property.\n\t        forward direction in `yoyo` period is treated as backward for the easing.\n\t      */\n\t      backwardEasing: null,\n\t      /* custom tween's name */\n\t      name: null,\n\t      /* custom tween's base name */\n\t      nameBase: 'Tween',\n\t      /*\n\t        onProgress callback runs before any other callback.\n\t        @param {Number}   The entire, not eased, progress\n\t                          of the tween regarding repeat option.\n\t        @param {Boolean}  The direction of the tween.\n\t                          `true` for forward direction.\n\t                          `false` for backward direction(tween runs in reverse).\n\t      */\n\t      onProgress: null,\n\t      /*\n\t        onStart callback runs on very start of the tween just after onProgress\n\t        one. Runs on very end of the tween if tween is reversed.\n\t        @param {Boolean}  Direction of the tween.\n\t                          `true` for forward direction.\n\t                          `false` for backward direction(tween runs in reverse).\n\t      */\n\t      onStart: null,\n\t      onRefresh: null,\n\t      onComplete: null,\n\t      onRepeatStart: null,\n\t      onRepeatComplete: null,\n\t      onFirstUpdate: null,\n\t      onUpdate: null,\n\t      isChained: false,\n\t      // playback callbacks\n\t      onPlaybackStart: null,\n\t      onPlaybackPause: null,\n\t      onPlaybackStop: null,\n\t      onPlaybackComplete: null,\n\t      // context which all callbacks will be called with\n\t      callbacksContext: null\n\t    };\n\t  };\n\t  /*\n\t    API method to play the Tween.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.play = function play() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    if (this._state === 'play' && this._isRunning) {\n\t      return this;\n\t    }\n\t    this._props.isReversed = false;\n\t    this._subPlay(shift, 'play');\n\t    this._setPlaybackState('play');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to play the Tween in reverse.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.playBackward = function playBackward() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    if (this._state === 'reverse' && this._isRunning) {\n\t      return this;\n\t    }\n\t    this._props.isReversed = true;\n\t    this._subPlay(shift, 'reverse');\n\t    this._setPlaybackState('reverse');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to pause Tween.\n\t    @public\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.pause = function pause() {\n\t    if (this._state === 'pause' || this._state === 'stop') {\n\t      return this;\n\t    }\n\t    this._removeFromTweener();\n\t    this._setPlaybackState('pause');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to stop the Tween.\n\t    @public\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.stop = function stop(progress) {\n\t    if (this._state === 'stop') {\n\t      return this;\n\t    }\n\n\t    this._wasUknownUpdate = undefined;\n\n\t    var stopProc = progress != null ? progress\n\t    /* if no progress passsed - set 1 if tween\n\t       is playingBackward, otherwise set to 0 */\n\t    : this._state === 'reverse' ? 1 : 0;\n\n\t    this.setProgress(stopProc);\n\n\t    this.reset();\n\t    return this;\n\t  };\n\t  /*\n\t    API method to replay(restart) the Tween.\n\t    @public\n\t    @param   {Number} Shift time in milliseconds.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.replay = function replay() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    this.reset();\n\t    this.play(shift);\n\t    return this;\n\t  };\n\t  /*\n\t    API method to replay(restart) backward the Tween.\n\t    @public\n\t    @param   {Number} Shift time in milliseconds.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.replayBackward = function replayBackward() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    this.reset();\n\t    this.playBackward(shift);\n\t    return this;\n\t  };\n\t  /*\n\t    API method to resume the Tween.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.resume = function resume() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    if (this._state !== 'pause') {\n\t      return this;\n\t    }\n\n\t    switch (this._prevState) {\n\t      case 'play':\n\t        this.play(shift);\n\t        break;\n\t      case 'reverse':\n\t        this.playBackward(shift);\n\t        break;\n\t    }\n\n\t    return this;\n\t  };\n\t  /*\n\t    API method to set progress on tween.\n\t    @public\n\t    @param {Number} Progress to set.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.setProgress = function setProgress(progress) {\n\t    var p = this._props;\n\t    // set start time if there is no one yet.\n\t    !p.startTime && this._setStartTime();\n\t    // reset play time\n\t    this._playTime = null;\n\t    // progress should be in range of [0..1]\n\t    progress < 0 && (progress = 0);\n\t    progress > 1 && (progress = 1);\n\t    // update self with calculated time\n\t    this._update(p.startTime - p.delay + progress * p.repeatTime);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set tween's speed.\n\t    @public\n\t    @param {Number} Speed value.\n\t    @returns this.\n\t  */\n\n\n\t  Tween.prototype.setSpeed = function setSpeed(speed) {\n\t    this._props.speed = speed;\n\t    // if playing - normalize _startTime and _prevTime to the current point.\n\t    if (this._state === 'play' || this._state === 'reverse') {\n\t      this._setResumeTime(this._state);\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to reset tween's state and properties.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tween.prototype.reset = function reset() {\n\t    this._removeFromTweener();\n\t    this._setPlaybackState('stop');\n\t    this._progressTime = 0;\n\t    this._isCompleted = false;\n\t    this._isStarted = false;\n\t    this._isFirstUpdate = false;\n\t    this._wasUknownUpdate = undefined;\n\t    this._prevTime = undefined;\n\t    this._prevYoyo = undefined;\n\t    // this._props.startTime  = undefined;\n\t    this._props.isReversed = false;\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to launch play. Used as launch\n\t    method for bothplay and reverse methods.\n\t    @private\n\t    @param  {Number} Shift time in milliseconds.\n\t    @param  {String} Play or reverse state.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._subPlay = function _subPlay() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t    var state = arguments[1];\n\n\t    var resumeTime,\n\t        startTime,\n\t        p = this._props,\n\n\t    // check if direction of playback changes,\n\t    // if so, the _progressTime needs to be flipped\n\t    _state = this._state,\n\t        _prevState = this._prevState,\n\t        isPause = _state === 'pause',\n\t        wasPlay = _state === 'play' || isPause && _prevState === 'play',\n\t        wasReverse = _state === 'reverse' || isPause && _prevState === 'reverse',\n\t        isFlip = wasPlay && state === 'reverse' || wasReverse && state === 'play';\n\n\t    // if tween was ended, set progress to 0 if not, set to elapsed progress\n\t    this._progressTime = this._progressTime >= p.repeatTime ? 0 : this._progressTime;\n\t    // flip the _progressTime if playback direction changed\n\t    if (isFlip) {\n\t      this._progressTime = p.repeatTime - this._progressTime;\n\t    }\n\t    // set resume time and normalize prev/start times\n\t    this._setResumeTime(state, shift);\n\t    // add self to tweener = play\n\t    _tweener2.default.add(this);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set _resumeTime, _startTime and _prevTime.\n\t    @private\n\t    @param {String} Current state. [play, reverse]\n\t    @param {Number} Time shift. *Default* is 0.\n\t  */\n\n\n\t  Tween.prototype._setResumeTime = function _setResumeTime(state) {\n\t    var shift = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n\t    // get current moment as resume time\n\t    this._resumeTime = performance.now();\n\t    // set start time regarding passed `shift` and `procTime`\n\t    var startTime = this._resumeTime - Math.abs(shift) - this._progressTime;\n\t    this._setStartTime(startTime, false);\n\t    // if we have prevTime - we need to normalize\n\t    // it for the current resume time\n\t    if (this._prevTime != null) {\n\t      this._prevTime = state === 'play' ? this._normPrevTimeForward() : this._props.endTime - this._progressTime;\n\t    }\n\t  };\n\t  /*\n\t    Method recalculate _prevTime for forward direction.\n\t    @private\n\t    @return {Number} Normalized prev time.\n\t  */\n\n\n\t  Tween.prototype._normPrevTimeForward = function _normPrevTimeForward() {\n\t    var p = this._props;\n\t    return p.startTime + this._progressTime - p.delay;\n\t  };\n\t  /*\n\t    Constructor of the class.\n\t    @private\n\t  */\n\n\n\t  function Tween() {\n\t    var _ret;\n\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Tween);\n\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Module.call(this, o));\n\n\t    _this._props.name == null && _this._setSelfName();\n\t    return _ret = _this, (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t  /*\n\t    Method to set self name to generic one.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._setSelfName = function _setSelfName() {\n\t    var globalName = '_' + this._props.nameBase + 's';\n\t    // track amount of tweens globally\n\t    _tweener2.default[globalName] = _tweener2.default[globalName] == null ? 1 : ++_tweener2.default[globalName];\n\t    // and set generic tween's name  || Tween # ||\n\t    this._props.name = this._props.nameBase + ' ' + _tweener2.default[globalName];\n\t  };\n\t  /*\n\t    Method set playback state string.\n\t    @private\n\t    @param {String} State name\n\t  */\n\n\n\t  Tween.prototype._setPlaybackState = function _setPlaybackState(state) {\n\t    // save previous state\n\t    this._prevState = this._state;\n\t    this._state = state;\n\n\t    // callbacks\n\t    var wasPause = this._prevState === 'pause',\n\t        wasStop = this._prevState === 'stop',\n\t        wasPlay = this._prevState === 'play',\n\t        wasReverse = this._prevState === 'reverse',\n\t        wasPlaying = wasPlay || wasReverse,\n\t        wasStill = wasStop || wasPause;\n\n\t    if ((state === 'play' || state === 'reverse') && wasStill) {\n\t      this._playbackStart();\n\t    }\n\t    if (state === 'pause' && wasPlaying) {\n\t      this._playbackPause();\n\t    }\n\t    if (state === 'stop' && (wasPlaying || wasPause)) {\n\t      this._playbackStop();\n\t    }\n\t  };\n\t  /*\n\t    Method to declare some vars.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._vars = function _vars() {\n\t    this.progress = 0;\n\t    this._prevTime = undefined;\n\t    this._progressTime = 0;\n\t    this._negativeShift = 0;\n\t    this._state = 'stop';\n\t    // if negative delay was specified,\n\t    // save it to _negativeShift property and\n\t    // reset it back to 0\n\t    if (this._props.delay < 0) {\n\t      this._negativeShift = this._props.delay;\n\t      this._props.delay = 0;\n\t    }\n\n\t    return this._calcDimentions();\n\t  };\n\t  /*\n\t    Method to calculate tween's dimentions.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._calcDimentions = function _calcDimentions() {\n\t    this._props.time = this._props.duration + this._props.delay;\n\t    this._props.repeatTime = this._props.time * (this._props.repeat + 1);\n\t  };\n\t  /*\n\t    Method to extend defaults by options and put them in _props.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._extendDefaults = function _extendDefaults() {\n\t    // save callback overrides object with fallback to empty one\n\t    this._callbackOverrides = this._o.callbackOverrides || {};\n\t    delete this._o.callbackOverrides;\n\t    // call the _extendDefaults @ Module\n\t    _Module.prototype._extendDefaults.call(this);\n\n\t    var p = this._props;\n\t    p.easing = _easing2.default.parseEasing(p.easing);\n\t    p.easing._parent = this;\n\n\t    // parse only present backward easing to prevent parsing as `linear.none`\n\t    // because we need to fallback to `easing` in `_setProgress` method\n\t    if (p.backwardEasing != null) {\n\t      p.backwardEasing = _easing2.default.parseEasing(p.backwardEasing);\n\t      p.backwardEasing._parent = this;\n\t    }\n\t  };\n\t  /*\n\t    Method for setting start and end time to props.\n\t    @private\n\t    @param {Number(Timestamp)}, {Null} Start time.\n\t    @param {Boolean} Should reset flags.\n\t    @returns this\n\t  */\n\n\n\t  Tween.prototype._setStartTime = function _setStartTime(time) {\n\t    var isResetFlags = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n\t    var p = this._props,\n\t        shiftTime = p.shiftTime || 0;\n\t    // reset flags\n\t    if (isResetFlags) {\n\t      this._isCompleted = false;this._isRepeatCompleted = false;\n\t      this._isStarted = false;\n\t    }\n\t    // set start time to passed time or to the current moment\n\t    var startTime = time == null ? performance.now() : time;\n\t    // calculate bounds\n\t    // - negativeShift is negative delay in options hash\n\t    // - shift time is shift of the parent\n\t    p.startTime = startTime + p.delay + this._negativeShift + shiftTime;\n\t    p.endTime = p.startTime + p.repeatTime - p.delay;\n\t    // set play time to the startTimes\n\t    // if playback controls are used - use _resumeTime as play time,\n\t    // else use shifted startTime -- shift is needed for timelines append chains\n\t    this._playTime = this._resumeTime != null ? this._resumeTime : startTime + shiftTime;\n\t    this._resumeTime = null;\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to update tween's progress.\n\t    @private\n\t    @param {Number} Current update time.\n\t    -- next params only present when parent Timeline calls the method.\n\t    @param {Number} Previous Timeline's update time.\n\t    @param {Boolean} Was parent in yoyo period.\n\t    @param {Number} [-1, 0, 1] If update is on edge.\n\t                   -1 = edge jump in negative direction.\n\t                    0 = no edge jump.\n\t                    1 = edge jump in positive direction.\n\t  */\n\n\n\t  Tween.prototype._update = function _update(time, timelinePrevTime, wasYoyo, onEdge) {\n\t    var p = this._props;\n\t    // if we don't the _prevTime thus the direction we are heading to,\n\t    // but prevTime was passed thus we are child of a Timeline\n\t    // set _prevTime to passed one and pretent that there was unknown\n\t    // update to not to block start/complete callbacks\n\t    if (this._prevTime == null && timelinePrevTime != null) {\n\n\t      if (this._props.speed && this._playTime) {\n\t        // play point + ( speed * delta )\n\t        this._prevTime = this._playTime + this._props.speed * (timelinePrevTime - this._playTime);\n\t      }\n\t      // this._prevTime = timelinePrevTime;\n\t      this._wasUknownUpdate = true;\n\t    }\n\n\t    // var before = time;\n\t    // cache vars\n\t    var startPoint = p.startTime - p.delay;\n\t    // if speed param was defined - calculate\n\t    // new time regarding speed\n\t    if (p.speed && this._playTime) {\n\t      // play point + ( speed * delta )\n\t      time = this._playTime + p.speed * (time - this._playTime);\n\t    }\n\n\t    // due to javascript precision issues, after speed mapping\n\t    // we can get very close number that was made from progress of 1\n\t    // and in fact represents `endTime` if so, set the time to `endTime`\n\t    if (Math.abs(p.endTime - time) < 0.00000001) {\n\t      time = p.endTime;\n\t    }\n\n\t    // if parent is onEdge but not very start nor very end\n\t    if (onEdge && wasYoyo != null) {\n\t      var T = this._getPeriod(time),\n\t          isYoyo = !!(p.isYoyo && this._props.repeat && T % 2 === 1);\n\n\t      // for timeline\n\t      // notify children about edge jump\n\t      if (this._timelines) {\n\t        for (var i = 0; i < this._timelines.length; i++) {\n\t          this._timelines[i]._update(time, timelinePrevTime, wasYoyo, onEdge);\n\t        }\n\t      }\n\t      // forward edge direction\n\t      if (onEdge === 1) {\n\t        // jumped from yoyo period?\n\t        if (wasYoyo) {\n\t          this._prevTime = time + 1;\n\t          this._repeatStart(time, isYoyo);\n\t          this._start(time, isYoyo);\n\t        } else {\n\t          this._prevTime = time - 1;\n\t          this._repeatComplete(time, isYoyo);\n\t          this._complete(time, isYoyo);\n\t        }\n\t        // backward edge direction\n\t      } else if (onEdge === -1) {\n\t          // jumped from yoyo period?\n\t          if (wasYoyo) {\n\t            this._prevTime = time - 1;\n\t            this._repeatComplete(time, isYoyo);\n\t            this._complete(time, isYoyo);\n\t          } else {\n\t            // call _start callbacks only if prev time was in active area\n\t            // not always true for append chains\n\t            if (this._prevTime >= p.startTime && this._prevTime <= p.endTime) {\n\t              this._prevTime = time + 1;\n\t              this._repeatStart(time, isYoyo);\n\t              this._start(time, isYoyo);\n\t              // reset isCOmpleted immediately to prevent onComplete cb\n\t              this._isCompleted = true;\n\t            }\n\t          }\n\t        }\n\t      // reset the _prevTime - drop one frame to undestand\n\t      // where we are heading\n\t      this._prevTime = undefined;\n\t    }\n\t    // if in active area and not ended - save progress time\n\t    // for pause/play purposes.\n\t    if (time > startPoint && time < p.endTime) {\n\t      this._progressTime = time - startPoint;\n\t    }\n\t    // else if not started or ended set progress time to 0\n\t    else if (time <= startPoint) {\n\t        this._progressTime = 0;\n\t      } else if (time >= p.endTime) {\n\t        // set progress time to repeat time + tiny cofficient\n\t        // to make it extend further than the end time\n\t        this._progressTime = p.repeatTime + .00000000001;\n\t      }\n\t    // reverse time if _props.isReversed is set\n\t    if (p.isReversed) {\n\t      time = p.endTime - this._progressTime;\n\t    }\n\t    // We need to know what direction we are heading to,\n\t    // so if we don't have the previous update value - this is very first\n\t    // update, - skip it entirely and wait for the next value\n\t    if (this._prevTime == null) {\n\t      this._prevTime = time;\n\t      this._wasUknownUpdate = true;\n\t      return false;\n\t    }\n\n\t    // ====== AFTER SKIPPED FRAME ======\n\n\t    // handle onProgress callback\n\t    if (time >= startPoint && time <= p.endTime) {\n\t      this._progress((time - startPoint) / p.repeatTime, time);\n\t    }\n\t    /*\n\t      if time is inside the active area of the tween.\n\t      active area is the area from start time to end time,\n\t      with all the repeat and delays in it\n\t    */\n\t    if (time >= p.startTime && time <= p.endTime) {\n\t      this._updateInActiveArea(time);\n\t    } else {\n\t      // if was in active area - update in inactive area but just once -\n\t      // right after the active area\n\t      if (this._isInActiveArea) {\n\t        this._updateInInactiveArea(time);\n\t      } else if (!this._isRefreshed) {\n\t        // onRefresh callback\n\t        // before startTime\n\t        if (time < p.startTime && this.progress !== 0) {\n\t          this._refresh(true);\n\t          this._isRefreshed = true;\n\t          // after endTime\n\t        }\n\t        // else if ( time > p.endTime ) { }\n\t      }\n\t    }\n\n\t    this._prevTime = time;\n\t    return time >= p.endTime || time <= startPoint;\n\t  };\n\t  /*\n\t    Method to handle tween's progress in inactive area.\n\t    @private\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Tween.prototype._updateInInactiveArea = function _updateInInactiveArea(time) {\n\t    if (!this._isInActiveArea) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    // complete if time is larger then end time\n\t    if (time > p.endTime && !this._isCompleted) {\n\t      this._progress(1, time);\n\t      // get period number\n\t      var T = this._getPeriod(p.endTime),\n\t          isYoyo = p.isYoyo && T % 2 === 0;\n\n\t      this._setProgress(isYoyo ? 0 : 1, time, isYoyo);\n\t      this._repeatComplete(time, isYoyo);\n\t      this._complete(time, isYoyo);\n\t    }\n\t    // if was active and went to - inactive area \"-\"\n\t    if (time < this._prevTime && time < p.startTime && !this._isStarted && !this._isCompleted) {\n\t      // if was in active area and didn't fire onStart callback\n\t      this._progress(0, time, false);\n\t      this._setProgress(0, time, false);\n\t      this._isRepeatStart = false;\n\t      this._repeatStart(time, false);\n\t      this._start(time, false);\n\t    }\n\t    this._isInActiveArea = false;\n\t  };\n\t  /*\n\t    Method to handle tween's progress in active area.\n\t    @private\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Tween.prototype._updateInActiveArea = function _updateInActiveArea(time) {\n\n\t    var props = this._props,\n\t        delayDuration = props.delay + props.duration,\n\t        startPoint = props.startTime - props.delay,\n\t        elapsed = (time - props.startTime + props.delay) % delayDuration,\n\t        TCount = Math.round((props.endTime - props.startTime + props.delay) / delayDuration),\n\t        T = this._getPeriod(time),\n\t        TValue = this._delayT,\n\t        prevT = this._getPeriod(this._prevTime),\n\t        TPrevValue = this._delayT;\n\n\t    // \"zero\" and \"one\" value regarding yoyo and it's period\n\t    var isYoyo = props.isYoyo && T % 2 === 1,\n\t        isYoyoPrev = props.isYoyo && prevT % 2 === 1,\n\t        yoyoZero = isYoyo ? 1 : 0,\n\t        yoyoOne = 1 - yoyoZero;\n\n\t    if (time === props.endTime) {\n\t      this._wasUknownUpdate = false;\n\t      // if `time` is equal to `endTime`, T represents the next period,\n\t      // so we need to decrement T and calculate \"one\" value regarding yoyo\n\t      var isYoyo = props.isYoyo && (T - 1) % 2 === 1;\n\t      this._setProgress(isYoyo ? 0 : 1, time, isYoyo);\n\t      if (time > this._prevTime) {\n\t        this._isRepeatCompleted = false;\n\t      }\n\t      this._repeatComplete(time, isYoyo);\n\t      return this._complete(time, isYoyo);\n\t    }\n\n\t    // reset callback flags\n\t    this._isCompleted = false;\n\t    this._isRefreshed = false;\n\t    // if time is inside the duration area of the tween\n\t    if (startPoint + elapsed >= props.startTime) {\n\t      this._isInActiveArea = true;this._isRepeatCompleted = false;\n\t      this._isRepeatStart = false;this._isStarted = false;\n\t      // active zone or larger then end\n\t      var elapsed2 = (time - props.startTime) % delayDuration,\n\t          proc = elapsed2 / props.duration;\n\t      // |=====|=====|=====| >>>\n\t      //      ^1^2\n\t      var isOnEdge = T > 0 && prevT < T;\n\t      // |=====|=====|=====| <<<\n\t      //      ^2^1\n\t      var isOnReverseEdge = prevT > T;\n\n\t      // for use in timeline\n\t      this._onEdge = 0;\n\t      isOnEdge && (this._onEdge = 1);\n\t      isOnReverseEdge && (this._onEdge = -1);\n\n\t      if (this._wasUknownUpdate) {\n\t        if (time > this._prevTime) {\n\t          this._start(time, isYoyo);\n\t          this._repeatStart(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t        }\n\t        // if backward direction and\n\t        // if ( time < this._prevTime && time !== this._props.startTime ) {\n\t        if (time < this._prevTime) {\n\t          this._complete(time, isYoyo);\n\t          this._repeatComplete(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t          // reset isCompleted immediately\n\t          this._isCompleted = false;\n\t        }\n\t      }\n\n\t      if (isOnEdge) {\n\t        // if not just after delay\n\t        // |---=====|---=====|---=====| >>>\n\t        //            ^1 ^2\n\t        // because we have already handled\n\t        // 1 and onRepeatComplete in delay gap\n\t        if (this.progress !== 1) {\n\t          // prevT\n\t          var isThisYoyo = props.isYoyo && (T - 1) % 2 === 1;\n\t          this._repeatComplete(time, isThisYoyo);\n\t        }\n\t        // if on edge but not at very start\n\t        // |=====|=====|=====| >>>\n\t        // ^!    ^here ^here\n\t        if (prevT >= 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      if (time > this._prevTime) {\n\t        //  |=====|=====|=====| >>>\n\t        // ^1  ^2\n\t        if (!this._isStarted && this._prevTime <= props.startTime) {\n\t          this._start(time, isYoyo);\n\t          this._repeatStart(time, isYoyo);\n\t          // it was zero anyways\n\n\t          // restart flags immediately in case if we will\n\t          // return to '-' inactive area on the next step\n\t          this._isStarted = false;\n\t          this._isRepeatStart = false;\n\t        }\n\t        this._firstUpdate(time, isYoyo);\n\t      }\n\n\t      if (isOnReverseEdge) {\n\t        // if on edge but not at very end\n\t        // |=====|=====|=====| <<<\n\t        //       ^here ^here ^not here\n\t        if (this.progress !== 0 && this.progress !== 1 && prevT != TCount) {\n\t          this._repeatStart(time, isYoyoPrev);\n\t        }\n\t        // if on very end edge\n\t        // |=====|=====|=====| <<<\n\t        //       ^!    ^! ^2 ^1\n\t        // we have handled the case in this._wasUknownUpdate\n\t        // block so filter that\n\t        if (prevT === TCount && !this._wasUknownUpdate) {\n\t          this._complete(time, isYoyo);\n\t          this._repeatComplete(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t          // reset isComplete flag call\n\t          // cuz we returned to active area\n\t          // this._isRepeatCompleted = false;\n\t          this._isCompleted = false;\n\t        }\n\t        this._repeatComplete(time, isYoyo);\n\t      }\n\n\t      if (prevT === 'delay') {\n\t        // if just before delay gap\n\t        // |---=====|---=====|---=====| <<<\n\t        //               ^2    ^1\n\t        if (T < TPrevValue) {\n\t          this._repeatComplete(time, isYoyo);\n\t        }\n\t        // if just after delay gap\n\t        // |---=====|---=====|---=====| >>>\n\t        //            ^1  ^2\n\t        if (T === TPrevValue && T > 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      // swap progress and repeatStart based on direction\n\t      if (time > this._prevTime) {\n\t        // if progress is equal 0 and progress grows\n\t        if (proc === 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t        if (time !== props.endTime) {\n\t          this._setProgress(isYoyo ? 1 - proc : proc, time, isYoyo);\n\t        }\n\t      } else {\n\t        if (time !== props.endTime) {\n\t          this._setProgress(isYoyo ? 1 - proc : proc, time, isYoyo);\n\t        }\n\t        // if progress is equal 0 and progress grows\n\t        if (proc === 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      if (time === props.startTime) {\n\t        this._start(time, isYoyo);\n\t      }\n\t      // delay gap - react only once\n\t    } else if (this._isInActiveArea) {\n\t        // because T will be string of \"delay\" here,\n\t        // let's normalize it be setting to TValue\n\t        var t = T === 'delay' ? TValue : T,\n\t            isGrows = time > this._prevTime;\n\t        // decrement period if forward direction of update\n\t        isGrows && t--;\n\t        // calculate normalized yoyoZero value\n\t        yoyoZero = props.isYoyo && t % 2 === 1 ? 1 : 0;\n\t        // if was in active area and previous time was larger\n\t        // |---=====|---=====|---=====| <<<\n\t        //   ^2 ^1    ^2 ^1    ^2 ^1\n\t        if (time < this._prevTime) {\n\t          this._setProgress(yoyoZero, time, yoyoZero === 1);\n\t          this._repeatStart(time, yoyoZero === 1);\n\t        }\n\t        // set 1 or 0 regarding direction and yoyo\n\t        this._setProgress(isGrows ? 1 - yoyoZero : yoyoZero, time, yoyoZero === 1);\n\t        // if time grows\n\t        if (time > this._prevTime) {\n\t          // if reverse direction and in delay gap, then progress will be 0\n\t          // if so we don't need to call the onRepeatComplete callback\n\t          // |---=====|---=====|---=====| <<<\n\t          //   ^0       ^0       ^0  \n\t          // OR we have flipped 0 to 1 regarding yoyo option\n\t          if (this.progress !== 0 || yoyoZero === 1) {\n\t            // since we repeatComplete for previous period\n\t            // invert isYoyo option\n\t            // is elapsed is 0 - count as previous period\n\t            this._repeatComplete(time, yoyoZero === 1);\n\t          }\n\t        }\n\t        // set flag to indicate inactive area\n\t        this._isInActiveArea = false;\n\t      }\n\t    // we've got the first update now\n\t    this._wasUknownUpdate = false;\n\t  };\n\t  /*\n\t    Method to remove the Tween from the tweener.\n\t    @private\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._removeFromTweener = function _removeFromTweener() {\n\t    _tweener2.default.remove(this);return this;\n\t  };\n\t  /*\n\t    Method to get current period number.\n\t    @private\n\t    @param {Number} Time to get the period for.\n\t    @returns {Number} Current period number.\n\t  */\n\n\n\t  Tween.prototype._getPeriod = function _getPeriod(time) {\n\t    var p = this._props,\n\t        TTime = p.delay + p.duration,\n\t        dTime = p.delay + time - p.startTime,\n\t        T = dTime / TTime,\n\n\t    // if time if equal to endTime we need to set the elapsed\n\t    // time to 0 to fix the occasional precision js bug, which\n\t    // causes 0 to be something like 1e-12\n\t    elapsed = time < p.endTime ? dTime % TTime : 0;\n\t    // If the latest period, round the result, otherwise floor it.\n\t    // Basically we always can floor the result, but because of js\n\t    // precision issues, sometimes the result is 2.99999998 which\n\t    // will result in 2 instead of 3 after the floor operation.\n\t    T = time >= p.endTime ? Math.round(T) : Math.floor(T);\n\t    // if time is larger then the end time\n\t    if (time > p.endTime) {\n\t      // set equal to the periods count\n\t      T = Math.round((p.endTime - p.startTime + p.delay) / TTime);\n\t      // if in delay gap, set _delayT to current\n\t      // period number and return \"delay\"\n\t    } else if (elapsed > 0 && elapsed < p.delay) {\n\t        this._delayT = T;T = 'delay';\n\t      }\n\t    // if the end of period and there is a delay\n\t    return T;\n\t  };\n\t  /*\n\t    Method to set Tween's progress and call onUpdate callback.\n\t    @private\n\t    @override @ Module\n\t    @param {Number} Progress to set.\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo perido. Used in Timeline to pass to Tween.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._setProgress = function _setProgress(proc, time, isYoyo) {\n\t    var p = this._props,\n\t        isYoyoChanged = p.wasYoyo !== isYoyo,\n\t        isForward = time > this._prevTime;\n\n\t    this.progress = proc;\n\t    // get the current easing for `forward` direction regarding `yoyo`\n\t    if (isForward && !isYoyo || !isForward && isYoyo) {\n\t      this.easedProgress = p.easing(proc);\n\t      // get the current easing for `backward` direction regarding `yoyo`\n\t    } else if (!isForward && !isYoyo || isForward && isYoyo) {\n\t        var easing = p.backwardEasing != null ? p.backwardEasing : p.easing;\n\n\t        this.easedProgress = easing(proc);\n\t      }\n\n\t    if (p.prevEasedProgress !== this.easedProgress || isYoyoChanged) {\n\t      if (p.onUpdate != null && typeof p.onUpdate === 'function') {\n\t        p.onUpdate.call(p.callbacksContext || this, this.easedProgress, this.progress, isForward, isYoyo);\n\t      }\n\t    }\n\t    p.prevEasedProgress = this.easedProgress;\n\t    p.wasYoyo = isYoyo;\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set tween's state to start and call onStart callback.\n\t    @method _start\n\t    @private\n\t    @param {Number} Progress to set.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._start = function _start(time, isYoyo) {\n\t    if (this._isStarted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onStart != null && typeof p.onStart === 'function') {\n\t      p.onStart.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isCompleted = false;this._isStarted = true;\n\t    this._isFirstUpdate = false;\n\t  };\n\t  /*\n\t    Method to call onPlaybackStart callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackStart = function _playbackStart() {\n\t    var p = this._props;\n\t    if (p.onPlaybackStart != null && typeof p.onPlaybackStart === 'function') {\n\t      p.onPlaybackStart.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackPause callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackPause = function _playbackPause() {\n\t    var p = this._props;\n\t    if (p.onPlaybackPause != null && typeof p.onPlaybackPause === 'function') {\n\t      p.onPlaybackPause.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackStop callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackStop = function _playbackStop() {\n\t    var p = this._props;\n\t    if (p.onPlaybackStop != null && typeof p.onPlaybackStop === 'function') {\n\t      p.onPlaybackStop.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackComplete callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackComplete = function _playbackComplete() {\n\t    var p = this._props;\n\t    if (p.onPlaybackComplete != null && typeof p.onPlaybackComplete === 'function') {\n\t      p.onPlaybackComplete.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to set tween's state to complete.\n\t    @method _complete\n\t    @private\n\t    @param {Number} Current time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._complete = function _complete(time, isYoyo) {\n\t    if (this._isCompleted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onComplete != null && typeof p.onComplete === 'function') {\n\t      p.onComplete.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\n\t    this._isCompleted = true;this._isStarted = false;\n\t    this._isFirstUpdate = false;\n\t    // reset _prevYoyo for timeline usage\n\t    this._prevYoyo = undefined;\n\t  };\n\n\t  /*\n\t    Method to run onFirstUpdate callback.\n\t    @method _firstUpdate\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._firstUpdate = function _firstUpdate(time, isYoyo) {\n\t    if (this._isFirstUpdate) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onFirstUpdate != null && typeof p.onFirstUpdate === 'function') {\n\t      // onFirstUpdate should have tween pointer\n\t      p.onFirstUpdate.tween = this;\n\t      p.onFirstUpdate.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isFirstUpdate = true;\n\t  };\n\t  /*\n\t    Method call onRepeatComplete calback and set flags.\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is repeat period.\n\t  */\n\n\n\t  Tween.prototype._repeatComplete = function _repeatComplete(time, isYoyo) {\n\t    if (this._isRepeatCompleted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onRepeatComplete != null && typeof p.onRepeatComplete === 'function') {\n\t      p.onRepeatComplete.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isRepeatCompleted = true;\n\t    // this._prevYoyo = null;\n\t  };\n\n\t  /*\n\t    Method call onRepeatStart calback and set flags.\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._repeatStart = function _repeatStart(time, isYoyo) {\n\t    if (this._isRepeatStart) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onRepeatStart != null && typeof p.onRepeatStart === 'function') {\n\t      p.onRepeatStart.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isRepeatStart = true;\n\t  };\n\t  /*\n\t    Method to launch onProgress callback.\n\t    @method _progress\n\t    @private\n\t    @param {Number} Progress to set.\n\t  */\n\n\n\t  Tween.prototype._progress = function _progress(progress, time) {\n\t    var p = this._props;\n\t    if (p.onProgress != null && typeof p.onProgress === 'function') {\n\t      p.onProgress.call(p.callbacksContext || this, progress, time > this._prevTime);\n\t    }\n\t  };\n\t  /*\n\t    Method to launch onRefresh callback.\n\t    @method _refresh\n\t    @private\n\t    @param {Boolean} If refresh even before start time.\n\t  */\n\n\n\t  Tween.prototype._refresh = function _refresh(isBefore) {\n\t    var p = this._props;\n\t    if (p.onRefresh != null) {\n\t      var context = p.callbacksContext || this,\n\t          progress = isBefore ? 0 : 1;\n\n\t      p.onRefresh.call(context, isBefore, p.easing(progress), progress);\n\t    }\n\t  };\n\t  /*\n\t    Method which is called when the tween is removed from tweener.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._onTweenerRemove = function _onTweenerRemove() {};\n\t  /*\n\t    Method which is called when the tween is removed\n\t    from tweener when finished.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._onTweenerFinish = function _onTweenerFinish() {\n\t    this._setPlaybackState('stop');\n\t    this._playbackComplete();\n\t  };\n\t  /*\n\t    Method to set property[s] on Tween.\n\t    @private\n\t    @override @ Module\n\t    @param {Object, String} Hash object of key/value pairs, or property name.\n\t    @param {_} Property's value to set.\n\t  */\n\n\n\t  Tween.prototype._setProp = function _setProp(obj, value) {\n\t    _Module.prototype._setProp.call(this, obj, value);\n\t    this._calcDimentions();\n\t  };\n\t  /*\n\t    Method to set single property.\n\t    @private\n\t    @override @ Module\n\t    @param {String} Name of the property.\n\t    @param {Any} Value for the property.\n\t  */\n\n\n\t  Tween.prototype._assignProp = function _assignProp(key, value) {\n\t    // fallback to defaults\n\t    if (value == null) {\n\t      value = this._defaults[key];\n\t    }\n\t    // parse easing\n\t    if (key === 'easing') {\n\t      value = _easing2.default.parseEasing(value);\n\t      value._parent = this;\n\t    }\n\t    // handle control callbacks overrides\n\t    var control = this._callbackOverrides[key],\n\t        isntOverriden = !value || !value.isMojsCallbackOverride;\n\t    if (control && isntOverriden) {\n\t      value = this._overrideCallback(value, control);\n\t    }\n\t    // call super on Module\n\t    _Module.prototype._assignProp.call(this, key, value);\n\t  };\n\t  /*\n\t    Method to override callback for controll pupropes.\n\t    @private\n\t    @param {String}    Callback name.\n\t    @parma {Function}  Method to call  \n\t  */\n\n\n\t  Tween.prototype._overrideCallback = function _overrideCallback(callback, fun) {\n\t    var isCallback = callback && typeof callback === 'function',\n\t        override = function callbackOverride() {\n\t      // call overriden callback if it exists\n\t      isCallback && callback.apply(this, arguments);\n\t      // call the passed cleanup function\n\t      fun.apply(this, arguments);\n\t    };\n\t    // add overridden flag\n\t    override.isMojsCallbackOverride = true;\n\t    return override;\n\t  };\n\n\t  // _visualizeProgress(time) {\n\t  //   var str = '|',\n\t  //       procStr = ' ',\n\t  //       p = this._props,\n\t  //       proc = p.startTime - p.delay;\n\n\t  //   while ( proc < p.endTime ) {\n\t  //     if (p.delay > 0 ) {\n\t  //       var newProc = proc + p.delay;\n\t  //       if ( time > proc && time < newProc ) {\n\t  //         procStr += ' ^ ';\n\t  //       } else {\n\t  //         procStr += '   ';\n\t  //       }\n\t  //       proc = newProc;\n\t  //       str  += '---';\n\t  //     }\n\t  //     var newProc = proc + p.duration;\n\t  //     if ( time > proc && time < newProc ) {\n\t  //       procStr += '  ^   ';\n\t  //     } else if (time === proc) {\n\t  //       procStr += '^     ';\n\t  //     } else if (time === newProc) {\n\t  //       procStr += '    ^ ';\n\t  //     } else {\n\t  //       procStr += '      ';\n\t  //     }\n\t  //     proc = newProc;\n\t  //     str += '=====|';\n\t  //   }\n\n\t  //   console.log(str);\n\t  //   console.log(procStr);\n\t  // }\n\n\n\t  return Tween;\n\t}(_module2.default);\n\n\texports.default = Tween;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _getIterator2 = __webpack_require__(29);\n\n\tvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tweener = __webpack_require__(10);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Timeline = function (_Tween) {\n\t  (0, _inherits3.default)(Timeline, _Tween);\n\n\t  /*\n\t    API method to add child tweens/timelines.\n\t    @public\n\t    @param {Object, Array} Tween/Timeline or an array of such.\n\t    @returns {Object} Self.\n\t  */\n\n\t  Timeline.prototype.add = function add() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this._pushTimelineArray(args);\n\t    this._calcDimentions();\n\t    return this;\n\t  };\n\t  /*\n\t    API method to append the Tween/Timeline to the end of the\n\t    timeline. Each argument is treated as a new append.\n\t    Array of tweens is treated as a parallel sequence. \n\t    @public\n\t    @param {Object, Array} Tween/Timeline to append or array of such.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Timeline.prototype.append = function append() {\n\t    for (var _len2 = arguments.length, timeline = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      timeline[_key2] = arguments[_key2];\n\t    }\n\n\t    for (var _iterator = timeline, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n\t      var _ref;\n\n\t      if (_isArray) {\n\t        if (_i >= _iterator.length) break;\n\t        _ref = _iterator[_i++];\n\t      } else {\n\t        _i = _iterator.next();\n\t        if (_i.done) break;\n\t        _ref = _i.value;\n\t      }\n\n\t      var tm = _ref;\n\n\t      if (_h2.default.isArray(tm)) {\n\t        this._appendTimelineArray(tm);\n\t      } else {\n\t        this._appendTimeline(tm, this._timelines.length);\n\t      }\n\t      this._calcDimentions();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    API method to stop the Tween.\n\t    @public\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Timeline.prototype.stop = function stop(progress) {\n\t    _Tween.prototype.stop.call(this, progress);\n\t    this._stopChildren(progress);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to reset tween's state and properties.\n\t    @public\n\t    @overrides @ Tween\n\t    @returns this.\n\t  */\n\n\n\t  Timeline.prototype.reset = function reset() {\n\t    _Tween.prototype.reset.call(this);\n\t    this._resetChildren();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to call `reset` method on all children.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._resetChildren = function _resetChildren() {\n\t    for (var i = 0; i < this._timelines.length; i++) {\n\t      this._timelines[i].reset();\n\t    }\n\t  };\n\t  /*\n\t    Method to call `stop` method on all children.\n\t    @private\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t  */\n\n\n\t  Timeline.prototype._stopChildren = function _stopChildren(progress) {\n\t    for (var i = this._timelines.length - 1; i >= 0; i--) {\n\t      this._timelines[i].stop(progress);\n\t    }\n\t  };\n\t  /*\n\t    Method to set tween's state to complete.\n\t    @private\n\t    @overrides @ Tween\n\t    @param {Number} Current time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\t  // _complete ( time, isYoyo ) {\n\t  //   // this._updateChildren( 1, time, isYoyo );\n\t  //   // this._setProgress( 1, time, isYoyo );\n\t  //   super._complete( time, isYoyo );\n\t  //   // this._resetChildren();\n\t  // }\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to append Tween/Timeline array or mix of such.\n\t    @private\n\t    @param {Array} Array of Tweens/Timelines.\n\t  */\n\n\n\t  Timeline.prototype._appendTimelineArray = function _appendTimelineArray(timelineArray) {\n\t    var i = timelineArray.length,\n\t        time = this._props.repeatTime - this._props.delay,\n\t        len = this._timelines.length;\n\n\t    while (i--) {\n\t      this._appendTimeline(timelineArray[i], len, time);\n\t    }\n\t  };\n\t  /*\n\t    Method to append a single timeline to the Timeline.\n\t    @private\n\t    @param {Object} Tween/Timline to append.\n\t    @param {Number} Index of the append.\n\t    @param {Number} Shift time.\n\t  */\n\n\n\t  Timeline.prototype._appendTimeline = function _appendTimeline(timeline, index, time) {\n\t    // if timeline is a module with timeline property then extract it\n\t    if (timeline.timeline instanceof Timeline) {\n\t      timeline = timeline.timeline;\n\t    }\n\t    if (timeline.tween instanceof _tween2.default) {\n\t      timeline = timeline.tween;\n\t    }\n\n\t    var shift = time != null ? time : this._props.duration;\n\t    shift += timeline._props.shiftTime || 0;\n\t    timeline.index = index;this._pushTimeline(timeline, shift);\n\t  };\n\t  /*\n\t    PrivateMethod to push Tween/Timeline array.\n\t    @private\n\t    @param {Array} Array of Tweens/Timelines.\n\t  */\n\n\n\t  Timeline.prototype._pushTimelineArray = function _pushTimelineArray(array) {\n\t    for (var i = 0; i < array.length; i++) {\n\t      var tm = array[i];\n\t      // recursive push to handle arrays of arrays\n\t      if (_h2.default.isArray(tm)) {\n\t        this._pushTimelineArray(tm);\n\t      } else {\n\t        this._pushTimeline(tm);\n\t      }\n\t    };\n\t  };\n\t  /*\n\t    Method to push a single Tween/Timeline.\n\t    @private\n\t    @param {Object} Tween or Timeline to push.\n\t    @param {Number} Number of milliseconds to shift the start time\n\t                    of the Tween/Timeline.\n\t  */\n\n\n\t  Timeline.prototype._pushTimeline = function _pushTimeline(timeline, shift) {\n\t    // if timeline is a module with timeline property then extract it\n\t    if (timeline.timeline instanceof Timeline) {\n\t      timeline = timeline.timeline;\n\t    }\n\t    if (timeline.tween instanceof _tween2.default) {\n\t      timeline = timeline.tween;\n\t    }\n\t    // add self delay to the timeline\n\t    shift != null && timeline._setProp({ 'shiftTime': shift });\n\t    this._timelines.push(timeline);\n\t    this._recalcDuration(timeline);\n\t  };\n\t  /*\n\t    Method set progress on self and child Tweens/Timelines.\n\t    @private\n\t    @param {Number} Progress to set.\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Timeline.prototype._setProgress = function _setProgress(p, time, isYoyo) {\n\t    // we need to pass self previous time to children\n\t    // to prevent initial _wasUnknownUpdate nested waterfall\n\t    // if not yoyo option set, pass the previous time\n\t    // otherwise, pass previous or next time regarding yoyo period.\n\n\t    // COVER CURRENT SWAPPED ORDER\n\t    this._updateChildren(p, time, isYoyo);\n\n\t    _tween2.default.prototype._setProgress.call(this, p, time);\n\t  };\n\n\t  Timeline.prototype._updateChildren = function _updateChildren(p, time, isYoyo) {\n\t    var coef = time > this._prevTime ? -1 : 1;\n\t    if (this._props.isYoyo && isYoyo) {\n\t      coef *= -1;\n\t    }\n\t    var timeToTimelines = this._props.startTime + p * this._props.duration,\n\t        prevTimeToTimelines = timeToTimelines + coef,\n\t        len = this._timelines.length;\n\n\t    for (var i = 0; i < len; i++) {\n\t      // specify the children's array update loop direction\n\t      // if time > prevTime go from 0->length else from length->0\n\t      // var j = ( time > this._prevTime ) ? i : (len-1) - i ;\n\t      var j = timeToTimelines > prevTimeToTimelines ? i : len - 1 - i;\n\t      this._timelines[j]._update(timeToTimelines, prevTimeToTimelines, this._prevYoyo, this._onEdge);\n\t    }\n\t    this._prevYoyo = isYoyo;\n\t  };\n\t  /*\n\t    Method calculate self duration based on timeline's duration.\n\t    @private\n\t    @param {Object} Tween or Timeline to calculate.\n\t  */\n\n\n\t  Timeline.prototype._recalcDuration = function _recalcDuration(timeline) {\n\t    var p = timeline._props,\n\t        timelineTime = p.repeatTime / p.speed + (p.shiftTime || 0) + timeline._negativeShift;\n\n\t    this._props.duration = Math.max(timelineTime, this._props.duration);\n\t  };\n\t  /*\n\t    Method calculate self duration from skretch.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._recalcTotalDuration = function _recalcTotalDuration() {\n\t    var i = this._timelines.length;\n\t    this._props.duration = 0;\n\t    while (i--) {\n\t      var tm = this._timelines[i];\n\t      // recalc total duration on child timelines\n\t      tm._recalcTotalDuration && tm._recalcTotalDuration();\n\t      // add the timeline's duration to selft duration\n\t      this._recalcDuration(tm);\n\t    }\n\t    this._calcDimentions();\n\t  };\n\t  /*\n\t    Method set start and end times.\n\t    @private\n\t    @param {Number, Null} Time to start with.\n\t  */\n\n\n\t  Timeline.prototype._setStartTime = function _setStartTime(time) {\n\t    var isReset = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n\t    _Tween.prototype._setStartTime.call(this, time);\n\t    this._startTimelines(this._props.startTime, isReset);\n\t  };\n\t  /*\n\t    Method calculate self duration based on timeline's duration.\n\t    @private\n\t    @param {Number, Null} Time to start with.\n\t  */\n\n\n\t  Timeline.prototype._startTimelines = function _startTimelines(time) {\n\t    var isReset = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n\t    var p = this._props,\n\t        isStop = this._state === 'stop';\n\n\t    time == null && (time = this._props.startTime);\n\n\t    for (var i = 0; i < this._timelines.length; i++) {\n\t      var tm = this._timelines[i];\n\t      tm._setStartTime(time, isReset);\n\t      // if from `_subPlay` and `_prevTime` is set and state is `stop`\n\t      // prevTime normalizing is for play/pause functionality, so no\n\t      // need to normalize if the timeline is in `stop` state.\n\t      if (!isReset && tm._prevTime != null && !isStop) {\n\t        tm._prevTime = tm._normPrevTimeForward();\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to launch onRefresh callback.\n\t    @method _refresh\n\t    @private\n\t    @overrides @ Tween\n\t    @param {Boolean} If refresh even before start time.\n\t  */\n\n\n\t  Timeline.prototype._refresh = function _refresh(isBefore) {\n\t    var len = this._timelines.length;\n\t    for (var i = 0; i < len; i++) {\n\t      this._timelines[i]._refresh(isBefore);\n\t    }\n\t    _Tween.prototype._refresh.call(this, isBefore);\n\t  };\n\t  /*\n\t    Method do declare defaults by this._defaults object\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._declareDefaults = function _declareDefaults() {\n\t    // if duration was passed on initialization stage, warn user and reset it.\n\t    if (this._o.duration != null) {\n\t      _h2.default.error('Duration can not be declared on Timeline, but \"' + this._o.duration + '\" is. You probably want to use Tween instead.');\n\t      this._o.duration = 0;\n\t    }\n\t    _Tween.prototype._declareDefaults.call(this);\n\t    // remove default\n\t    this._defaults.duration = 0;\n\t    this._defaults.easing = 'Linear.None';\n\t    this._defaults.backwardEasing = 'Linear.None';\n\t    this._defaults.nameBase = 'Timeline';\n\t  };\n\n\t  function Timeline() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Timeline);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tween.call(this, o));\n\t  }\n\t  /*\n\t    Method to declare some vars.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._vars = function _vars() {\n\t    this._timelines = [];\n\t    _Tween.prototype._vars.call(this);\n\t  };\n\n\t  return Timeline;\n\t}(_tween2.default);\n\n\texports.default = Timeline;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\t__webpack_require__(30);\n\n\t__webpack_require__(31);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Tweener = function () {\n\t  function Tweener() {\n\t    (0, _classCallCheck3.default)(this, Tweener);\n\n\t    this._vars();\n\t    this._listenVisibilityChange();\n\t    return this;\n\t  }\n\n\t  Tweener.prototype._vars = function _vars() {\n\t    this.tweens = [];\n\t    this._loop = this._loop.bind(this);\n\t    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\t  };\n\t  /*\n\t    Main animation loop. Should have only one concurrent loop.\n\t    @private\n\t    @returns this\n\t  */\n\n\n\t  Tweener.prototype._loop = function _loop() {\n\t    if (!this._isRunning) {\n\t      return false;\n\t    }\n\t    this._update(window.performance.now());\n\t    if (!this.tweens.length) {\n\t      return this._isRunning = false;\n\t    }\n\t    requestAnimationFrame(this._loop);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to start animation loop.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._startLoop = function _startLoop() {\n\t    if (this._isRunning) {\n\t      return;\n\t    };this._isRunning = true;\n\t    requestAnimationFrame(this._loop);\n\t  };\n\t  /*\n\t    Method to stop animation loop.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._stopLoop = function _stopLoop() {\n\t    this._isRunning = false;\n\t  };\n\t  /*\n\t    Method to update every tween/timeline on animation frame.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._update = function _update(time) {\n\t    var i = this.tweens.length;\n\t    while (i--) {\n\t      // cache the current tween\n\t      var tween = this.tweens[i];\n\t      if (tween && tween._update(time) === true) {\n\t        this.remove(tween);\n\t        tween._onTweenerFinish();\n\t        tween._prevTime = undefined;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to add a Tween/Timeline to loop pool.\n\t    @param {Object} Tween/Timeline to add.\n\t  */\n\n\n\t  Tweener.prototype.add = function add(tween) {\n\t    // return if tween is already running\n\t    if (tween._isRunning) {\n\t      return;\n\t    }\n\t    tween._isRunning = true;\n\t    this.tweens.push(tween);\n\t    this._startLoop();\n\t  };\n\t  /*\n\t    Method stop updating all the child tweens/timelines.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype.removeAll = function removeAll() {\n\t    this.tweens.length = 0;\n\t  };\n\t  /*\n\t    Method to remove specific tween/timeline form updating.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype.remove = function remove(tween) {\n\t    var index = typeof tween === 'number' ? tween : this.tweens.indexOf(tween);\n\n\t    if (index !== -1) {\n\t      tween = this.tweens[index];\n\t      if (tween) {\n\t        tween._isRunning = false;\n\t        this.tweens.splice(index, 1);\n\t        tween._onTweenerRemove();\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t    Method to initialize event listeners to visibility change events.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._listenVisibilityChange = function _listenVisibilityChange() {\n\t    if (typeof document.hidden !== \"undefined\") {\n\t      this._visibilityHidden = \"hidden\";\n\t      this._visibilityChange = \"visibilitychange\";\n\t    } else if (typeof document.mozHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"mozHidden\";\n\t      this._visibilityChange = \"mozvisibilitychange\";\n\t    } else if (typeof document.msHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"msHidden\";\n\t      this._visibilityChange = \"msvisibilitychange\";\n\t    } else if (typeof document.webkitHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"webkitHidden\";\n\t      this._visibilityChange = \"webkitvisibilitychange\";\n\t    }\n\n\t    document.addEventListener(this._visibilityChange, this._onVisibilityChange, false);\n\t  };\n\t  /*\n\t    Method that will fire on visibility change.\n\t  */\n\n\n\t  Tweener.prototype._onVisibilityChange = function _onVisibilityChange() {\n\t    if (document[this._visibilityHidden]) {\n\t      this._savePlayingTweens();\n\t    } else {\n\t      this._restorePlayingTweens();\n\t    }\n\t  };\n\t  /*\n\t    Method to save all playing tweens.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._savePlayingTweens = function _savePlayingTweens() {\n\t    this._savedTweens = this.tweens.slice(0);\n\t    for (var i = 0; i < this._savedTweens.length; i++) {\n\t      this._savedTweens[i].pause();\n\t    }\n\t  };\n\t  /*\n\t    Method to restore all playing tweens.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._restorePlayingTweens = function _restorePlayingTweens() {\n\t    for (var i = 0; i < this._savedTweens.length; i++) {\n\t      this._savedTweens[i].resume();\n\t    }\n\t  };\n\n\t  return Tweener;\n\t}();\n\n\tvar t = new Tweener();\n\texports.default = t;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _module = __webpack_require__(16);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Class to define a module ancestor\n\t  with timeline and tween options and functionality.\n\t  All runable modules should inherit from this class.\n\n\t  @class Tweenable\n\t*/\n\n\tvar Tweenable = function (_Module) {\n\t  (0, _inherits3.default)(Tweenable, _Module);\n\n\t  /*\n\t    `play` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\n\t  Tweenable.prototype.play = function play() {\n\t    this.timeline.play.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `playBackward` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.playBackward = function playBackward() {\n\t    this.timeline.playBackward.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `pause` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.pause = function pause() {\n\t    this.timeline.pause.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `stop` method for the timeline.\n\t    @public\n\t    @param {Number} [0...1] Progress to set on stop.\n\t                            *Default* is `0` if `play`\n\t                            and `1` if `playBAckward`.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.stop = function stop() {\n\t    this.timeline.stop.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `reset` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.reset = function reset() {\n\t    this.timeline.reset.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `replay` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.replay = function replay() {\n\t    this.timeline.replay.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `replay` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.replayBackward = function replayBackward() {\n\t    this.timeline.replayBackward.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `resume` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.resume = function resume() {\n\t    var shift = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t    this.timeline.resume.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `setProgress` method for the timeline.\n\t    @public\n\t    @param {Number} [0...1] Progress value.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.setProgress = function setProgress() {\n\t    this.timeline.setProgress.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    setSpeed method for the timeline.\n\t    @param {Number} Speed value.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.setSpeed = function setSpeed(speed) {\n\t    this.timeline.setSpeed.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  function Tweenable() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Tweenable);\n\n\t    // pipe function for _o object\n\t    // before creating tween/timeline\n\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Module.call(this, o));\n\t    // super of Module\n\n\n\t    _this._transformTweenOptions();\n\t    // make tween only if isTweenLess option is not set\n\t    !_this._o.isTweenLess && _this._makeTween();\n\t    // make timeline only if isTimelineLess option is not set\n\t    !_this._o.isTimelineLess && _this._makeTimeline();\n\t    return _this;\n\t  }\n\t  /*\n\t    Placeholder method that should be overrided\n\t    and will be called before tween/timeline creation.\n\t    @private\n\t  */\n\n\n\t  Tweenable.prototype._transformTweenOptions = function _transformTweenOptions() {};\n\t  /*\n\t    Method to create tween.\n\t    @private\n\t  */\n\n\n\t  Tweenable.prototype._makeTween = function _makeTween() {\n\t    // pass callbacks context\n\t    this._o.callbacksContext = this._o.callbacksContext || this;\n\t    this.tween = new _tween2.default(this._o);\n\t    // make timeline property point to tween one is \"no timeline\" mode\n\t    this._o.isTimelineLess && (this.timeline = this.tween);\n\t  };\n\t  /*\n\t    Method to create timeline.\n\t    @private\n\t    @param {Object} Timeline's options.\n\t                    An object which contains \"timeline\" property with\n\t                    timeline options.\n\t  */\n\n\n\t  Tweenable.prototype._makeTimeline = function _makeTimeline() {\n\t    // pass callbacks context\n\t    this._o.timeline = this._o.timeline || {};\n\t    this._o.timeline.callbacksContext = this._o.callbacksContext || this;\n\t    this.timeline = new _timeline2.default(this._o.timeline);\n\t    // set the flag to indicate that real timeline is present\n\t    this._isTimeline = true;\n\t    // if tween exist - add it to the timeline there is some\n\t    // modules like burst and stagger that have no tween\n\t    this.tween && this.timeline.add(this.tween);\n\t  };\n\n\t  return Tweenable;\n\t}(_module2.default);\n\n\texports.default = Tweenable;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _tweenable = __webpack_require__(11);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  The Thenable class adds .then public method and\n\t  the ability to chain API calls.\n\t*/\n\n\tvar Thenable = function (_Tweenable) {\n\t  (0, _inherits3.default)(Thenable, _Tweenable);\n\n\t  function Thenable() {\n\t    (0, _classCallCheck3.default)(this, Thenable);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tweenable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\n\t  Thenable.prototype.then = function then(o) {\n\t    // return if nothing was passed\n\t    if (o == null || !(0, _keys2.default)(o).length) {\n\t      return 1;\n\t    }\n\t    // merge then options with the current ones\n\t    var prevRecord = this._history[this._history.length - 1],\n\t        prevModule = this._modules[this._modules.length - 1],\n\t        merged = this._mergeThenOptions(prevRecord, o);\n\n\t    this._resetMergedFlags(merged);\n\t    // create a submodule of the same type as the master module\n\t    var module = new this.constructor(merged);\n\t    // set `this` as amster module of child module\n\t    module._masterModule = this;\n\t    // save the modules to the _modules array\n\t    this._modules.push(module);\n\t    // add module's tween into master timeline\n\t    this.timeline.append(module);\n\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to reset some flags on merged options object.\n\t    @private\n\t    @param   {Object} Options object.\n\t    @returns {Object} Options object.\n\t  */\n\n\n\t  Thenable.prototype._resetMergedFlags = function _resetMergedFlags(obj) {\n\t    // set the submodule to be without timeline for perf reasons\n\t    obj.isTimelineLess = true;\n\t    // reset isShowStart flag for the submodules\n\t    obj.isShowStart = false;\n\t    // reset isRefreshState flag for the submodules\n\t    obj.isRefreshState = false;\n\t    // set the submodule callbacks context\n\t    obj.callbacksContext = this._props.callbacksContext || this;\n\t    // set previous module\n\t    obj.prevChainModule = _h2.default.getLastItem(this._modules);\n\t    // pass the `this` as master module\n\t    obj.masterModule = this;\n\t    return obj;\n\t  };\n\t  /*\n\t    Method to initialize properties.\n\t    @private\n\t  */\n\n\n\t  Thenable.prototype._vars = function _vars() {\n\t    _Tweenable.prototype._vars.call(this);\n\t    // save _master module\n\t    this._masterModule = this._o.masterModule;\n\t    // set isChained flag based on prevChainModule option\n\t    this._isChained = !!this._masterModule;\n\t    // we are expect that the _o object\n\t    // have been already extended by defaults\n\t    var initialRecord = _h2.default.cloneObj(this._props);\n\t    for (var key in this._arrayPropertyMap) {\n\t      if (this._o[key]) {\n\t        var preParsed = this._parsePreArrayProperty(key, this._o[key]);\n\t        initialRecord[key] = preParsed;\n\t      }\n\t    }\n\n\t    this._history = [initialRecord];\n\t    // the array holds all modules in the then chain\n\t    this._modules = [this];\n\t    // the props that to exclude from then merge\n\t    this._nonMergeProps = { shape: 1 };\n\t  };\n\t  /*\n\t    Method to merge two options into one. Used in .then chains.\n\t    @private\n\t    @param {Object} Start options for the merge.\n\t    @param {Object} End options for the merge.\n\t    @returns {Object} Merged options.\n\t  */\n\n\n\t  Thenable.prototype._mergeThenOptions = function _mergeThenOptions(start, end) {\n\t    var o = {};\n\t    this._mergeStartLoop(o, start);\n\t    this._mergeEndLoop(o, start, end);\n\t    this._history.push(o);\n\t    return o;\n\t  };\n\t  /*\n\t    Method to pipe startValue of the delta.\n\t    @private\n\t    @param {String} Start property name.\n\t    @param {Any} Start property value.\n\t    @returns {Any} Start property value.\n\t  */\n\n\n\t  Thenable.prototype._checkStartValue = function _checkStartValue(name, value) {\n\t    return value;\n\t  };\n\t  /*\n\t    Originally part of the _mergeThenOptions.\n\t    Loops thru start object and copies all the props from it.\n\t    @param {Object} An object to copy in.\n\t    @parma {Object} Start options object.\n\t  */\n\n\n\t  Thenable.prototype._mergeStartLoop = function _mergeStartLoop(o, start) {\n\t    // loop thru start options object\n\t    for (var key in start) {\n\t      var value = start[key];\n\t      if (start[key] == null) {\n\t        continue;\n\t      };\n\t      // copy all values from start if not tween prop or duration\n\t      if (!_h2.default.isTweenProp(key) || key === 'duration') {\n\t        // if delta - copy only the end value\n\t        if (this._isDelta(value)) {\n\t          o[key] = _h2.default.getDeltaEnd(value);\n\t        } else {\n\t          o[key] = value;\n\t        }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Originally part of the _mergeThenOptions.\n\t    Loops thru start object and merges all the props from it.\n\t    @param {Object} An object to copy in.\n\t    @parma {Object} Start options object.\n\t    @parma {Object} End options object.\n\t  */\n\n\n\t  Thenable.prototype._mergeEndLoop = function _mergeEndLoop(o, start, end) {\n\t    var endKeys = (0, _keys2.default)(end);\n\n\t    for (var key in end) {\n\t      // just copy parent option\n\t      if (key == 'parent') {\n\t        o[key] = end[key];continue;\n\t      };\n\n\t      // get key/value of the end object\n\t      // endKey - name of the property, endValue - value of the property\n\t      var endValue = end[key],\n\t          startValue = start[key] != null ? start[key] : this._defaults[key];\n\n\t      startValue = this._checkStartValue(key, startValue);\n\t      if (endValue == null) {\n\t        continue;\n\t      };\n\t      // make ∆ of start -> end\n\t      // if key name is radiusX/radiusY and\n\t      // the startValue is not set fallback to radius value\n\t      var isSubRadius = key === 'radiusX' || key === 'radiusY';\n\t      if (isSubRadius && startValue == null) {\n\t        startValue = start.radius;\n\t      }\n\n\t      var isSubRadius = key === 'scaleX' || key === 'scaleY';\n\t      if (isSubRadius && startValue == null) {\n\t        startValue = start.scale;\n\t      }\n\n\t      o[key] = this._mergeThenProperty(key, startValue, endValue);\n\t    }\n\t  };\n\t  /*\n\t    Method to merge `start` and `end` for a property in then record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Start value of the property.\n\t    @param {Any}    End value of the property.\n\t  */\n\n\n\t  Thenable.prototype._mergeThenProperty = function _mergeThenProperty(key, startValue, endValue) {\n\t    // if isnt tween property\n\t    var isBoolean = typeof endValue === 'boolean',\n\t        curve,\n\t        easing;\n\n\t    if (!_h2.default.isTweenProp(key) && !this._nonMergeProps[key] && !isBoolean) {\n\n\t      if (_h2.default.isObject(endValue) && endValue.to != null) {\n\t        curve = endValue.curve;\n\t        easing = endValue.easing;\n\t        endValue = endValue.to;\n\t      }\n\n\t      // if end value is delta - just save it\n\t      if (this._isDelta(endValue)) {\n\t        return this._parseDeltaValues(key, endValue);\n\t      } else {\n\t        var parsedEndValue = this._parsePreArrayProperty(key, endValue);\n\t        // if end value is not delta - merge with start value\n\t        if (this._isDelta(startValue)) {\n\t          var _ref;\n\n\t          // if start value is delta - take the end value\n\t          // as start value of the new delta\n\t          return _ref = {}, _ref[_h2.default.getDeltaEnd(startValue)] = parsedEndValue, _ref.easing = easing, _ref.curve = curve, _ref;\n\t          // if both start and end value are not ∆ - make ∆\n\t        } else {\n\t            var _ref2;\n\n\t            return _ref2 = {}, _ref2[startValue] = parsedEndValue, _ref2.easing = easing, _ref2.curve = curve, _ref2;\n\t          }\n\t      }\n\t      // copy the tween values unattended\n\t    } else {\n\t        return endValue;\n\t      }\n\t  };\n\t  /*\n\t    Method to retreive array's length and return -1 for\n\t    all other types.\n\t    @private\n\t    @param {Array, Any} Array to get the width for.\n\t    @returns {Number} Array length or -1 if not array.\n\t  */\n\n\n\t  Thenable.prototype._getArrayLength = function _getArrayLength(arr) {\n\t    return _h2.default.isArray(arr) ? arr.length : -1;\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Thenable.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = _h2.default.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || _h2.default.isArray(optionsValue) || _h2.default.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to check if the module is first in `then` chain.\n\t    @private\n\t    @returns {Boolean} If the module is the first in module chain.\n\t  */\n\n\n\t  Thenable.prototype._isFirstInChain = function _isFirstInChain() {\n\t    return !this._masterModule;\n\t  };\n\t  /*\n\t    Method to check if the module is last in `then` chain.\n\t    @private\n\t    @returns {Boolean} If the module is the last in module chain.\n\t  */\n\n\n\t  Thenable.prototype._isLastInChain = function _isLastInChain() {\n\t    var master = this._masterModule;\n\t    // if there is no master field - check the modules length\n\t    // if module length is 1 thus there is no modules chain\n\t    // it is the last one, otherwise it isnt\n\t    if (!master) {\n\t      return this._modules.length === 1;\n\t    }\n\t    // if there is master - check if it is the last item in _modules chain\n\t    return this === _h2.default.getLastItem(master._modules);\n\t  };\n\n\t  return Thenable;\n\t}(_tweenable2.default);\n\n\texports.default = Thenable;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _thenable = __webpack_require__(12);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Tuneable = function (_Thenable) {\n\t  (0, _inherits3.default)(Tuneable, _Thenable);\n\n\t  function Tuneable() {\n\t    (0, _classCallCheck3.default)(this, Tuneable);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Thenable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\n\t  Tuneable.prototype.tune = function tune(o) {\n\t    // if options object was passed\n\t    if (o && (0, _keys2.default)(o).length) {\n\t      this._transformHistory(o);\n\t      this._tuneNewOptions(o);\n\t      // restore array prop values because _props\n\t      // contain them as parsed arrays\n\t      // but we need the as strings to store in history\n\t      // and merge in history chains\n\t      this._history[0] = _h2.default.cloneObj(this._props);\n\t      for (var key in this._arrayPropertyMap) {\n\t        if (o[key] != null) {\n\t          this._history[0][key] = this._preparsePropValue(key, o[key]);\n\t        }\n\t      }\n\n\t      this._tuneSubModules();\n\t      this._resetTweens();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to regenerate all the random properties form initial object.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tuneable.prototype.generate = function generate() {\n\t    return this.tune(this._o);\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to preparse options in object.\n\t    @private\n\t    @param {Object} Object to preparse properties on.\n\t    @returns {Object} Passed object with preparsed props.\n\t  */\n\t  // _preParseOptions ( o ) {\n\t  //   for (var key in o) {\n\t  //     o[key] = this._preparsePropValue( key, o[key] );\n\t  //   }\n\t  //   return o;\n\t  // }\n\t  /*\n\t    Method to transform history rewrite new options object chain on run.\n\t    @private\n\t    @param {Object} New options to tune for.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistory = function _transformHistory(o) {\n\t    for (var key in o) {\n\t      var value = o[key];\n\t      // don't transform for childOptions\n\t      // if ( key === 'childOptions' ) { continue; }\n\t      this._transformHistoryFor(key, this._preparsePropValue(key, value));\n\t    }\n\t  };\n\t  /*\n\t    Method to transform history chain for specific key/value.\n\t    @param {String} Name of the property to transform history for.\n\t    @param {Any} The new property's value.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistoryFor = function _transformHistoryFor(key, value) {\n\t    for (var i = 0; i < this._history.length; i++) {\n\t      if (value = this._transformHistoryRecord(i, key, value)) {\n\t        // break if no further history modifications needed\n\t        if (value == null) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to transform history recod with key/value.\n\t    @param {Number} Index of the history record to transform.\n\t    @param {String} Property name to transform.\n\t    @param {Any} Property value to transform to.\n\t    @param {Object} Optional the current history record.\n\t    @param {Object} Optional the next history record.\n\t    @returns {Boolean} Returns true if no further\n\t                       history modifications is needed.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistoryRecord = function _transformHistoryRecord(index, key, newVal, currRecord, nextRecord) {\n\t    // newVal = this._parseProperty( key, newVal );\n\t    if (newVal == null) {\n\t      return null;\n\t    }\n\n\t    // fallback to history records, if wasn't specified\n\t    currRecord = currRecord == null ? this._history[index] : currRecord;\n\t    nextRecord = nextRecord == null ? this._history[index + 1] : nextRecord;\n\n\t    var oldVal = currRecord[key],\n\t        nextVal = nextRecord == null ? null : nextRecord[key];\n\n\t    // if index is 0 - always save the newVal\n\t    // and return non-delta for subsequent modifications\n\t    if (index === 0) {\n\t      currRecord[key] = newVal;\n\t      // always return on tween properties\n\t      if (_h2.default.isTweenProp(key) && key !== 'duration') {\n\t        return null;\n\t      }\n\t      // nontween properties\n\t      var isRewriteNext = this._isRewriteNext(oldVal, nextVal),\n\t          returnVal = this._isDelta(newVal) ? _h2.default.getDeltaEnd(newVal) : newVal;\n\t      return isRewriteNext ? returnVal : null;\n\t    } else {\n\t      // if was delta and came none-deltta - rewrite\n\t      // the start of the delta and stop\n\t      if (this._isDelta(oldVal)) {\n\t        var _currRecord$key;\n\n\t        currRecord[key] = (_currRecord$key = {}, _currRecord$key[newVal] = _h2.default.getDeltaEnd(oldVal), _currRecord$key);\n\t        return null;\n\t      } else {\n\t        // if the old value is not delta and the new one is\n\t        currRecord[key] = newVal;\n\t        // if the next item has the same value - return the\n\t        // item for subsequent modifications or stop\n\t        return this._isRewriteNext(oldVal, nextVal) ? newVal : null;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to check if the next item should\n\t    be rewrited in transform history operation.\n\t    @private\n\t    @param {Any} Current value.\n\t    @param {Any} Next value.\n\t    @returns {Boolean} If need to rewrite the next value.\n\t  */\n\n\n\t  Tuneable.prototype._isRewriteNext = function _isRewriteNext(currVal, nextVal) {\n\t    // return false if nothing to rewrite next\n\t    if (nextVal == null && currVal != null) {\n\t      return false;\n\t    }\n\n\t    var isEqual = currVal === nextVal,\n\t        isNextDelta = this._isDelta(nextVal),\n\t        isDelta = this._isDelta(currVal),\n\t        isValueDeltaChain = false,\n\t        isDeltaChain = false;\n\n\t    if (isDelta && isNextDelta) {\n\t      if (_h2.default.getDeltaEnd(currVal) == _h2.default.getDeltaStart(nextVal)) {\n\t        isDeltaChain = true;\n\t      }\n\t    } else if (isNextDelta) {\n\t      isValueDeltaChain = _h2.default.getDeltaStart(nextVal) === '' + currVal;\n\t    }\n\n\t    return isEqual || isValueDeltaChain || isDeltaChain;\n\t  };\n\t  /*\n\t    Method to tune new history options to all the submodules.\n\t    @private\n\t  */\n\n\n\t  Tuneable.prototype._tuneSubModules = function _tuneSubModules() {\n\t    for (var i = 1; i < this._modules.length; i++) {\n\t      this._modules[i]._tuneNewOptions(this._history[i]);\n\t    }\n\t  };\n\t  /*\n\t    Method to set new options on run.\n\t    @param {Boolean} If foreign context.\n\t    @private\n\t  */\n\n\n\t  Tuneable.prototype._resetTweens = function _resetTweens() {\n\t    var i = 0,\n\t        shift = 0,\n\t        tweens = this.timeline._timelines;\n\n\t    // if `isTimelineLess` return\n\t    if (tweens == null) {\n\t      return;\n\t    }\n\n\t    for (var i = 0; i < tweens.length; i++) {\n\t      var tween = tweens[i],\n\t          prevTween = tweens[i - 1];\n\n\t      shift += prevTween ? prevTween._props.repeatTime : 0;\n\t      this._resetTween(tween, this._history[i], shift);\n\t    }\n\t    this.timeline._setProp(this._props.timeline);\n\t    this.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to reset tween with new options.\n\t    @param {Object} Tween to reset.\n\t    @param {Object} Tween's to reset tween with.\n\t    @param {Number} Optional number to shift tween start time.\n\t  */\n\n\n\t  Tuneable.prototype._resetTween = function _resetTween(tween, o) {\n\t    var shift = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n\t    o.shiftTime = shift;tween._setProp(o);\n\t  };\n\n\t  return Tuneable;\n\t}(_thenable2.default);\n\n\texports.default = Tuneable;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(19);\n\n\tvar Delta = function () {\n\t  function Delta() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Delta);\n\n\t    this._o = o;\n\t    this._createTween(o.tweenOptions);\n\t    // initial properties render\n\t    !this._o.isChained && this.refresh(true);\n\t  }\n\t  /*\n\t    Method to call `_refresh` method on `tween`.\n\t    Use switch between `0` and `1` progress for delta value.\n\t    @public\n\t    @param {Boolean} If refresh before start time or after.\n\t    @returns this.\n\t  */\n\n\n\t  Delta.prototype.refresh = function refresh(isBefore) {\n\t    this._previousValues = [];\n\n\t    var deltas = this._o.deltas;\n\t    for (var i = 0; i < deltas.length; i++) {\n\t      var name = deltas[i].name;\n\t      this._previousValues.push({\n\t        name: name, value: this._o.props[name]\n\t      });\n\t    }\n\n\t    this.tween._refresh(isBefore);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to restore all saved properties from `_previousValues` array.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Delta.prototype.restore = function restore() {\n\t    var prev = this._previousValues;\n\t    for (var i = 0; i < prev.length; i++) {\n\t      var record = prev[i];\n\t      this._o.props[record.name] = record.value;\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create tween of the delta.\n\t    @private\n\t    @param {Object} Options object.\n\t  */\n\n\n\t  Delta.prototype._createTween = function _createTween() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var it = this;\n\t    o.callbackOverrides = {\n\t      onUpdate: function onUpdate(ep, p) {\n\t        it._calcCurrentProps(ep, p);\n\t      }\n\t    };\n\n\t    // if not chained - add the onRefresh callback\n\t    // to refresh the tween when needed\n\t    if (!this._o.isChained) {\n\t      o.callbackOverrides.onRefresh = function (isBefore, ep, p) {\n\t        it._calcCurrentProps(ep, p);\n\t      };\n\t    }\n\n\t    o.callbacksContext = this._o.callbacksContext;\n\t    this.tween = new _tween2.default(o);\n\t  };\n\t  /*\n\t    Method to calculate current progress of the deltas.\n\t    @private\n\t    @param {Number} Eased progress to calculate - [0..1].\n\t    @param {Number} Progress to calculate - [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrentProps = function _calcCurrentProps(easedProgress, p) {\n\t    var deltas = this._o.deltas;\n\t    for (var i = 0; i < deltas.length; i++) {\n\t      var type = deltas[i].type;\n\t      this['_calcCurrent_' + type](deltas[i], easedProgress, p);\n\t    }\n\t  };\n\t  /*\n\t    Method to calc the current color delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_color = function _calcCurrent_color(delta, ep, p) {\n\t    var r,\n\t        g,\n\t        b,\n\t        a,\n\t        start = delta.start,\n\t        d = delta.delta;\n\t    if (!delta.curve) {\n\t      r = parseInt(start.r + ep * d.r, 10);\n\t      g = parseInt(start.g + ep * d.g, 10);\n\t      b = parseInt(start.b + ep * d.b, 10);\n\t      a = parseFloat(start.a + ep * d.a);\n\t    } else {\n\t      var cp = delta.curve(p);\n\t      r = parseInt(cp * (start.r + p * d.r), 10);\n\t      g = parseInt(cp * (start.g + p * d.g), 10);\n\t      b = parseInt(cp * (start.b + p * d.b), 10);\n\t      a = parseFloat(cp * (start.a + p * d.a));\n\t    }\n\t    this._o.props[delta.name] = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\t  };\n\t  /*\n\t    Method to calc the current number delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_number = function _calcCurrent_number(delta, ep, p) {\n\t    this._o.props[delta.name] = !delta.curve ? delta.start + ep * delta.delta : delta.curve(p) * (delta.start + p * delta.delta);\n\t  };\n\t  /*\n\t    Method to calc the current number with units delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_unit = function _calcCurrent_unit(delta, ep, p) {\n\t    var currentValue = !delta.curve ? delta.start.value + ep * delta.delta : delta.curve(p) * (delta.start.value + p * delta.delta);\n\n\t    this._o.props[delta.name] = '' + currentValue + delta.end.unit;\n\t  };\n\t  /*\n\t    Method to calc the current array delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_array = function _calcCurrent_array(delta, ep, p) {\n\t    // var arr,\n\t    var name = delta.name,\n\t        props = this._o.props,\n\t        string = '';\n\n\t    // to prevent GC bothering with arrays garbage\n\t    // if ( h.isArray( props[name] ) ) {\n\t    //   arr = props[name];\n\t    //   arr.length = 0;\n\t    // } else { arr = []; }\n\n\t    // just optimization to prevent curve\n\t    // calculations on every array item\n\t    var proc = delta.curve ? delta.curve(p) : null;\n\n\t    for (var i = 0; i < delta.delta.length; i++) {\n\t      var item = delta.delta[i],\n\t          dash = !delta.curve ? delta.start[i].value + ep * item.value : proc * (delta.start[i].value + p * item.value);\n\n\t      string += '' + dash + item.unit + ' ';\n\t      // arr.push({\n\t      //   string: `${dash}${item.unit}`,\n\t      //   value:  dash,\n\t      //   unit:   item.unit,\n\t      // });\n\t    }\n\t    props[name] = string;\n\t  };\n\n\t  return Delta;\n\t}();\n\n\texports.default = Delta;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _extends2 = __webpack_require__(27);\n\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _keys = __webpack_require__(28);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _delta = __webpack_require__(14);\n\n\tvar _delta2 = _interopRequireDefault(_delta);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  This module's target is to parse options object,\n\t  find deltas in it and send them to `Delta` classes.\n\t  The `Delta` class is dull - they expect actual parsed deltas\n\t  and separated tween options, so we should parse them here.\n\t  The timeline of the module controls the `Delta` modules' tweens.\n\n\t  @param {Object} props Object to set deltas result to (pass to the Delta classes).\n\t  @param {Object} options Object to parse the deltas from.\n\t  @param {Function} onUpdate onUpdate callback.\n\t  @param optional {Object} arrayPropertyMap List of properties with truthy\n\t                                            values which describe properties\n\t                                            that should be parsed as arrays.\n\t  @param optional {Object} numberPropertyMap List of properties with truthy\n\t                                            values which describe properties\n\t                                            that should be parsed as numbers\n\t                                            without units.\n\t*/\n\n\t// TODO:\n\t// - colors with curves change alpha level too\n\t// const html = new mojs.Html({\n\t//   el: '#js-el',\n\t//   x: { 0: 100 },\n\t//   onUpdate () {\n\t//     console.log(this._props.originX);\n\t//   },\n\t//   originX: { 'white': 'black', curve: 'M0,100 L100, 0' },\n\t//   customProperties: {\n\t//     originX: {\n\t//       type: 'color',\n\t//       default: 'cyan'\n\t//     },\n\t//     draw() { console.log('draw'); }\n\t//   }\n\t// });\n\n\tvar easing = __webpack_require__(22);\n\tvar h = __webpack_require__(19);\n\n\n\t// get tween properties\n\tvar obj = {};\n\t_tween2.default.prototype._declareDefaults.call(obj);\n\tvar keys = (0, _keys2.default)(obj._defaults);\n\tfor (var i = 0; i < keys.length; i++) {\n\t  obj._defaults[keys[i]] = 1;\n\t}\n\tobj._defaults['timeline'] = 1;\n\tvar TWEEN_PROPERTIES = obj._defaults;\n\n\tvar Deltas = function () {\n\t  function Deltas() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Deltas);\n\n\t    this._o = o;\n\n\t    this._shortColors = {\n\t      transparent: 'rgba(0,0,0,0)',\n\t      none: 'rgba(0,0,0,0)',\n\t      aqua: 'rgb(0,255,255)',\n\t      black: 'rgb(0,0,0)',\n\t      blue: 'rgb(0,0,255)',\n\t      fuchsia: 'rgb(255,0,255)',\n\t      gray: 'rgb(128,128,128)',\n\t      green: 'rgb(0,128,0)',\n\t      lime: 'rgb(0,255,0)',\n\t      maroon: 'rgb(128,0,0)',\n\t      navy: 'rgb(0,0,128)',\n\t      olive: 'rgb(128,128,0)',\n\t      purple: 'rgb(128,0,128)',\n\t      red: 'rgb(255,0,0)',\n\t      silver: 'rgb(192,192,192)',\n\t      teal: 'rgb(0,128,128)',\n\t      white: 'rgb(255,255,255)',\n\t      yellow: 'rgb(255,255,0)',\n\t      orange: 'rgb(255,128,0)'\n\t    };\n\n\t    this._ignoreDeltasMap = { prevChainModule: 1, masterModule: 1 };\n\n\t    this._parseDeltas(o.options);\n\t    this._createDeltas();\n\t    this._createTimeline(this._mainTweenOptions);\n\t  }\n\t  /*\n\t    Method to call `refresh` on all child `delta` objects.\n\t    @public\n\t    @param {Boolean} If before start time (true) or after end time (false).\n\t  */\n\n\n\t  Deltas.prototype.refresh = function refresh(isBefore) {\n\t    for (var i = 0; i < this._deltas.length; i++) {\n\t      this._deltas[i].refresh(isBefore);\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to call `restore` on all child `delta` objects.\n\t    @public\n\t  */\n\n\n\t  Deltas.prototype.restore = function restore() {\n\t    for (var i = 0; i < this._deltas.length; i++) {\n\t      this._deltas[i].restore();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create Timeline.\n\t    @private\n\t    @param {Object} Timeline options.\n\t  */\n\n\n\t  Deltas.prototype._createTimeline = function _createTimeline() {\n\t    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    // const o = this._o;\n\t    // opts.timeline = opts.timeline || {};\n\t    // opts.timeline.callbackOverrides = {\n\t    //   onUpdate:   o.onUpdate,\n\t    //   onRefresh:  o.onUpdate\n\t    // }\n\t    // send callbacksContext to timeline if set\n\t    // o.callbacksContext && (opts.timeline.callbacksContext = o.callbacksContext);\n\t    // opts.timeline\n\t    this.timeline = new _timeline2.default();\n\t    this.timeline.add(this._deltas);\n\t  };\n\t  /*\n\t    Method to create Deltas from parsed options.\n\t    @private\n\t  */\n\n\n\t  Deltas.prototype._createDeltas = function _createDeltas() {\n\t    this._deltas = [];\n\n\t    // create main delta object\n\t    this._deltas.push(this._createDelta(this._mainDeltas, this._mainTweenOptions));\n\n\t    // create child delta object\n\t    for (var i = 0; i < this._childDeltas.length; i++) {\n\t      var delta = this._childDeltas[i];\n\t      this._deltas.push(this._createDelta([delta.delta], delta.tweenOptions));\n\t    }\n\t  };\n\t  /*\n\t    Method to create Delta object with passed options.\n\t    @private\n\t    @param {Array} Array of deltas.\n\t    @param {Object} Tween properties.\n\t    @returns {Object} Delta object\n\t  */\n\n\n\t  Deltas.prototype._createDelta = function _createDelta(deltas, tweenOptions) {\n\t    var o = this._o;\n\t    return new _delta2.default({\n\t      deltas: deltas, tweenOptions: tweenOptions,\n\t      props: o.props,\n\t      isChained: o.isChained,\n\t      callbacksContext: o.callbacksContext\n\t    });\n\t  };\n\t  /*\n\t    Method to parse delta objects from options.\n\t    @private\n\t    @param {Object} Options object to parse the deltas from.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltas = function _parseDeltas(obj) {\n\t    // spilt main animation properties and main tween properties\n\t    var mainSplit = this._splitTweenOptions(obj);\n\t    // main animation properties\n\t    var opts = mainSplit.delta;\n\t    // main tween properties\n\t    this._mainTweenOptions = mainSplit.tweenOptions;\n\n\t    this._mainDeltas = [];\n\t    this._childDeltas = [];\n\t    var keys = (0, _keys2.default)(opts);\n\t    // loop thru all properties without tween ones\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      // is property is delta - parse it\n\t      if (this._isDelta(opts[key]) && !this._ignoreDeltasMap[key]) {\n\t        var delta = this._splitAndParseDelta(key, opts[key]);\n\t        // if parsed object has no tween values - it's delta of the main object\n\t        if (!delta.tweenOptions) {\n\t          this._mainDeltas.push(delta.delta);\n\t        }\n\t        // otherwise it is distinct delta object\n\t        else {\n\t            this._childDeltas.push(delta);\n\t          }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to split tween values and parse single delta record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @returns {Object} Split object.\n\t                @param {Object} tweenOptions Tween properties.\n\t                @param {Object} delta Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._splitAndParseDelta = function _splitAndParseDelta(name, object) {\n\t    var split = this._splitTweenOptions(object);\n\t    // parse delta in the object\n\t    split.delta = this._parseDelta(name, split.delta);\n\t    return split;\n\t  };\n\t  /*\n\t    Method to parse delta by delegating the variables to _parse*Delta methods.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDelta = function _parseDelta(name, object, index) {\n\t    // if name is in _o.customProps - parse it regarding the type\n\t    return this._o.customProps && this._o.customProps[name] != null ? this._parseDeltaByCustom(name, object, index) : this._parseDeltaByGuess(name, object, index);\n\t  };\n\t  /**\n\t    Method to parse delta by taking the type from the customProps object.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltaByCustom = function _parseDeltaByCustom(name, object, index) {\n\t    return this._parseNumberDelta(name, object, index);\n\t    // const customRecord = this._o.customProps[name];\n\t    // switch ( customRecord.type.toLowerCase() ) {\n\t    //   case 'color':  { return this._parseColorDelta( name, object ); }\n\t    //   case 'array':  { return this._parseArrayDelta( name, object ); }\n\t    //   case 'number': { return this._parseNumberDelta( name, object, index ); }\n\t    //   case 'unit':   { return this._parseUnitDelta( name, object, index ); }\n\t    // }\n\t  };\n\t  /**\n\t    Method to parse delta by reasoning about it's value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltaByGuess = function _parseDeltaByGuess(name, object, index) {\n\t    var _preparseDelta2 = this._preparseDelta(object);\n\n\t    var start = _preparseDelta2.start;\n\n\t    var o = this._o;\n\n\t    // color values\n\t    if (isNaN(parseFloat(start)) && !start.match(/rand\\(/) && !start.match(/stagger\\(/)) {\n\t      return this._parseColorDelta(name, object);\n\t      // array values\n\t    } else if (o.arrayPropertyMap && o.arrayPropertyMap[name]) {\n\t        return this._parseArrayDelta(name, object);\n\t        // unit or number values\n\t      } else {\n\t          return o.numberPropertyMap && o.numberPropertyMap[name] ?\n\t          // if the property is in the number property map - parse it like number\n\t          this._parseNumberDelta(name, object, index)\n\t          // otherwise - like number with units\n\t          : this._parseUnitDelta(name, object, index);\n\t        }\n\t  };\n\t  /*\n\t    Method to separate tween options from delta properties.\n\t    @param {Object} Object for separation.\n\t    @returns {Object} Object that contains 2 objects\n\t                        - one delta options\n\t                        - one tween options ( could be empty if no tween opts )\n\t  */\n\n\n\t  Deltas.prototype._splitTweenOptions = function _splitTweenOptions(delta) {\n\t    delta = (0, _extends3.default)({}, delta);\n\n\t    var keys = (0, _keys2.default)(delta),\n\t        tweenOptions = {};\n\t    var isTween = null;\n\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      if (TWEEN_PROPERTIES[key]) {\n\t        if (delta[key] != null) {\n\t          tweenOptions[key] = delta[key];\n\t          isTween = true;\n\t        }\n\t        delete delta[key];\n\t      }\n\t    }\n\t    return {\n\t      delta: delta,\n\t      tweenOptions: isTween ? tweenOptions : undefined\n\t    };\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Deltas.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = h.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || h.isArray(optionsValue) || h.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to parse color delta values.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseColorDelta = function _parseColorDelta(key, value) {\n\t    if (key === 'strokeLinecap') {\n\t      h.warn('Sorry, stroke-linecap property is not animatable yet, using the start(#{start}) value instead', value);\n\t      return {};\n\t    }\n\t    var preParse = this._preparseDelta(value);\n\n\t    var startColorObj = this._makeColorObj(preParse.start),\n\t        endColorObj = this._makeColorObj(preParse.end);\n\n\t    var delta = {\n\t      type: 'color',\n\t      name: key,\n\t      start: startColorObj,\n\t      end: endColorObj,\n\t      curve: preParse.curve,\n\t      delta: {\n\t        r: endColorObj.r - startColorObj.r,\n\t        g: endColorObj.g - startColorObj.g,\n\t        b: endColorObj.b - startColorObj.b,\n\t        a: endColorObj.a - startColorObj.a\n\t      }\n\t    };\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse array delta values.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseArrayDelta = function _parseArrayDelta(key, value) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var startArr = this._strToArr(preParse.start),\n\t        endArr = this._strToArr(preParse.end);\n\n\t    h.normDashArrays(startArr, endArr);\n\n\t    for (var i = 0; i < startArr.length; i++) {\n\t      var end = endArr[i];\n\t      h.mergeUnits(startArr[i], end, key);\n\t    }\n\n\t    var delta = {\n\t      type: 'array',\n\t      name: key,\n\t      start: startArr,\n\t      end: endArr,\n\t      delta: h.calcArrDelta(startArr, endArr),\n\t      curve: preParse.curve\n\t    };\n\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse numeric delta values with units.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @param {Number} Index of the module.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseUnitDelta = function _parseUnitDelta(key, value, index) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var end = h.parseUnit(h.parseStringOption(preParse.end, index)),\n\t        start = h.parseUnit(h.parseStringOption(preParse.start, index));\n\n\t    h.mergeUnits(start, end, key);\n\t    var delta = {\n\t      type: 'unit',\n\t      name: key,\n\t      start: start,\n\t      end: end,\n\t      delta: end.value - start.value,\n\t      curve: preParse.curve\n\t    };\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse numeric delta values without units.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @param {Number} Index of the module.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseNumberDelta = function _parseNumberDelta(key, value, index) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var end = parseFloat(h.parseStringOption(preParse.end, index)),\n\t        start = parseFloat(h.parseStringOption(preParse.start, index));\n\n\t    var delta = {\n\t      type: 'number',\n\t      name: key,\n\t      start: start,\n\t      end: end,\n\t      delta: end - start,\n\t      curve: preParse.curve\n\t    };\n\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to extract `curve` and `start`/`end` values.\n\t    @private\n\t    @param {Object} Delta object.\n\t    @returns {Object} Preparsed delta.\n\t              @property {String} Start value.\n\t              @property {String, Number} End value.\n\t  */\n\n\n\t  Deltas.prototype._preparseDelta = function _preparseDelta(value) {\n\t    // clone value object\n\t    value = (0, _extends3.default)({}, value);\n\t    // parse curve if exist\n\t    var curve = value.curve;\n\t    if (curve != null) {\n\t      curve = easing.parseEasing(curve);\n\t      curve._parent = this;\n\t    }\n\t    delete value.curve;\n\t    // parse start and end values\n\t    var start = (0, _keys2.default)(value)[0],\n\t        end = value[start];\n\n\t    return { start: start, end: end, curve: curve };\n\t  };\n\t  /*\n\t    Method to parse color into usable object.\n\t    @private\n\t    @param {String} Color string.\n\t    @returns {Object} Parsed color value.\n\t  */\n\n\n\t  Deltas.prototype._makeColorObj = function _makeColorObj(color) {\n\t    // HEX\n\t    var colorObj = {};\n\t    if (color[0] === '#') {\n\t      var result = /^#?([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i.exec(color);\n\t      if (result) {\n\t        var r = result[1].length === 2 ? result[1] : result[1] + result[1],\n\t            g = result[2].length === 2 ? result[2] : result[2] + result[2],\n\t            b = result[3].length === 2 ? result[3] : result[3] + result[3];\n\n\t        colorObj = {\n\t          r: parseInt(r, 16), g: parseInt(g, 16), b: parseInt(b, 16), a: 1\n\t        };\n\t      }\n\t    }\n\n\t    // not HEX\n\t    // shorthand color and rgb()\n\t    if (color[0] !== '#') {\n\t      var isRgb = color[0] === 'r' && color[1] === 'g' && color[2] === 'b';\n\t      var rgbColor = undefined;\n\t      // rgb color\n\t      if (isRgb) {\n\t        rgbColor = color;\n\t      };\n\t      // shorthand color name\n\t      if (!isRgb) {\n\t        if (!this._shortColors[color]) {\n\t          h.div.style.color = color;\n\t          rgbColor = h.computedStyle(h.div).color;\n\t        } else {\n\t          rgbColor = this._shortColors[color];\n\t        }\n\t      }\n\n\t      var regexString1 = '^rgba?\\\\((\\\\d{1,3}),\\\\s?(\\\\d{1,3}),',\n\t          regexString2 = '\\\\s?(\\\\d{1,3}),?\\\\s?(\\\\d{1}|0?\\\\.\\\\d{1,})?\\\\)$',\n\t          result = new RegExp(regexString1 + regexString2, 'gi').exec(rgbColor),\n\t          alpha = parseFloat(result[4] || 1);\n\n\t      if (result) {\n\t        colorObj = {\n\t          r: parseInt(result[1], 10),\n\t          g: parseInt(result[2], 10),\n\t          b: parseInt(result[3], 10),\n\t          a: alpha != null && !isNaN(alpha) ? alpha : 1\n\t        };\n\t      }\n\t    }\n\n\t    return colorObj;\n\t  };\n\t  /*\n\t    Method to parse string into array.\n\t    @private\n\t    @param {String, Number} String or number to parse.\n\t    @returns {Array} Parsed array.\n\t  */\n\n\n\t  Deltas.prototype._strToArr = function _strToArr(string) {\n\t    var arr = [];\n\t    // plain number\n\t    if (typeof string === 'number' && !isNaN(string)) {\n\t      arr.push(h.parseUnit(string));\n\t      return arr;\n\t    }\n\t    // string array\n\t    string.trim().split(/\\s+/gim).forEach(function (str) {\n\t      arr.push(h.parseUnit(h.parseIfRand(str)));\n\t    });\n\t    return arr;\n\t  };\n\n\t  return Deltas;\n\t}();\n\n\texports.default = Deltas;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Base class for module. Extends and parses defaults.\n\t*/\n\n\tvar Module = function () {\n\t  function Module() {\n\t    var o = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t    (0, _classCallCheck3.default)(this, Module);\n\n\t    // this._isIt = o.isIt;\n\t    // delete o.isIt;\n\t    this._o = o;\n\t    this._index = this._o.index || 0;\n\t    // map of props that should be\n\t    // parsed to arrays of values\n\t    this._arrayPropertyMap = {\n\t      strokeDashoffset: 1,\n\t      strokeDasharray: 1,\n\t      origin: 1\n\t    };\n\n\t    this._skipPropsDelta = {\n\t      timeline: 1,\n\t      prevChainModule: 1,\n\t      callbacksContext: 1\n\t    };\n\n\t    this._declareDefaults();\n\t    this._extendDefaults();\n\n\t    this._vars();\n\t    this._render();\n\t  }\n\t  /*\n\t    Method to declare defaults.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {};\n\t  };\n\t  /*\n\t    Method to declare module's variables.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._vars = function _vars() {\n\t    this._progress = 0;\n\t    this._strokeDasharrayBuffer = [];\n\t  };\n\t  /*\n\t    Method to render on initialization.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._render = function _render() {};\n\t  /*\n\t    Method to set property on the module.\n\t    @private\n\t    @param {String, Object} Name of the property to set\n\t                            or object with properties to set.\n\t    @param {Any} Value for the property to set. Could be\n\t                  undefined if the first param is object.\n\t  */\n\n\n\t  Module.prototype._setProp = function _setProp(attr, value) {\n\t    if ((typeof attr === 'undefined' ? 'undefined' : (0, _typeof3.default)(attr)) === 'object') {\n\t      for (var key in attr) {\n\t        this._assignProp(key, attr[key]);\n\t      }\n\t    } else {\n\t      this._assignProp(attr, value);\n\t    }\n\t  };\n\t  /*\n\t    Method to assign single property's value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t  */\n\n\n\t  Module.prototype._assignProp = function _assignProp(key, value) {\n\t    this._props[key] = value;\n\t  };\n\t  /*\n\t    Method to show element.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._show = function _show() {\n\t    var p = this._props;\n\t    if (!this.el) {\n\t      return;\n\t    }\n\n\t    if (p.isSoftHide) {\n\t      // this.el.style.opacity = p.opacity;\n\t      this._showByTransform();\n\t    } else {\n\t      this.el.style.display = 'block';\n\t    }\n\n\t    this._isShown = true;\n\t  };\n\t  /*\n\t    Method to hide element.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._hide = function _hide() {\n\t    if (!this.el) {\n\t      return;\n\t    }\n\n\t    if (this._props.isSoftHide) {\n\t      // this.el.style.opacity = 0;\n\t      _h2.default.setPrefixedStyle(this.el, 'transform', 'scale(0)');\n\t    } else {\n\t      this.el.style.display = 'none';\n\t    }\n\n\t    this._isShown = false;\n\t  };\n\t  /*\n\t    Method to show element by applying transform back to normal.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._showByTransform = function _showByTransform() {};\n\t  /*\n\t    Method to parse option string.\n\t    Searches for stagger and rand values and parses them.\n\t    Leaves the value unattended otherwise.\n\t    @param {Any} Option value to parse.\n\t    @returns {Number} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parseOptionString = function _parseOptionString(value) {\n\t    if (typeof value === 'string') {\n\t      if (value.match(/stagger/)) {\n\t        value = _h2.default.parseStagger(value, this._index);\n\t      }\n\t    }\n\t    if (typeof value === 'string') {\n\t      if (value.match(/rand/)) {\n\t        value = _h2.default.parseRand(value);\n\t      }\n\t    }\n\t    return value;\n\t  };\n\t  /*\n\t    Method to parse postion option.\n\t    @param {String} Property name.\n\t    @param {Any} Property Value.\n\t    @returns {String} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parsePositionOption = function _parsePositionOption(key, value) {\n\t    if (_h2.default.unitOptionMap[key]) {\n\t      value = _h2.default.parseUnit(value).string;\n\t    }\n\t    return value;\n\t  };\n\t  /*\n\t    Method to parse strokeDash.. option.\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {String} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parseStrokeDashOption = function _parseStrokeDashOption(key, value) {\n\t    var result = value;\n\t    // parse numeric/percent values for strokeDash.. properties\n\t    if (this._arrayPropertyMap[key]) {\n\t      var result = [];\n\t      switch (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) {\n\t        case 'number':\n\t          result.push(_h2.default.parseUnit(value));\n\t          break;\n\t        case 'string':\n\t          var array = value.split(' ');\n\t          for (var i = 0; i < array.length; i++) {\n\t            result.push(_h2.default.parseUnit(array[i]));\n\t          }\n\t          break;\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Module.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = _h2.default.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || _h2.default.isArray(optionsValue) || _h2.default.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to get delta from property and set\n\t    the property's start value to the props object.\n\t    @private\n\t    @param {String} Key name to get delta for.\n\t    @param {Object} Option value to get the delta for.\n\t  */\n\n\n\t  Module.prototype._getDelta = function _getDelta(key, optionsValue) {\n\t    var delta;\n\t    if ((key === 'left' || key === 'top') && !this._o.ctx) {\n\t      _h2.default.warn('Consider to animate x/y properties instead of left/top,\\n        as it would be much more performant', optionsValue);\n\t    }\n\t    // skip delta calculation for a property if it is listed\n\t    // in skipPropsDelta object\n\t    if (this._skipPropsDelta && this._skipPropsDelta[key]) {\n\t      return;\n\t    }\n\t    // get delta\n\t    delta = _h2.default.parseDelta(key, optionsValue, this._index);\n\t    // if successfully parsed - save it\n\t    if (delta.type != null) {\n\t      this._deltas[key] = delta;\n\t    }\n\n\t    var deltaEnd = (0, _typeof3.default)(delta.end) === 'object' ? delta.end.value === 0 ? 0 : delta.end.string : delta.end;\n\t    // set props to end value of the delta\n\t    // 0 should be 0 regardless units\n\t    this._props[key] = deltaEnd;\n\t  };\n\t  /*\n\t    Method to copy `_o` options to `_props` object\n\t    with fallback to `_defaults`.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._extendDefaults = function _extendDefaults() {\n\t    this._props = {};\n\t    this._deltas = {};\n\t    for (var key in this._defaults) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\t      // copy the properties to the _o object\n\t      var value = this._o[key] != null ? this._o[key] : this._defaults[key];\n\t      // parse option\n\t      this._parseOption(key, value);\n\t    }\n\t  };\n\t  /*\n\t    Method to tune new oprions to _o and _props object.\n\t    @private\n\t    @param {Object} Options object to tune to.\n\t  */\n\n\n\t  Module.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    // hide the module before tuning it's options\n\t    // cuz the user could see the change\n\t    this._hide();\n\t    for (var key in o) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\t      // copy the properties to the _o object\n\t      // delete the key from deltas\n\t      o && delete this._deltas[key];\n\t      // rewrite _o record\n\t      this._o[key] = o[key];\n\t      // save the options to _props\n\t      this._parseOption(key, o[key]);\n\t    }\n\t  };\n\t  /*\n\t    Method to parse option value.\n\t    @private\n\t    @param {String} Option name.\n\t    @param {Any} Option value.\n\t  */\n\n\n\t  Module.prototype._parseOption = function _parseOption(name, value) {\n\t    // if delta property\n\t    if (this._isDelta(value) && !this._skipPropsDelta[name]) {\n\t      this._getDelta(name, value);\n\t      var deltaEnd = _h2.default.getDeltaEnd(value);\n\t      return this._assignProp(name, this._parseProperty(name, deltaEnd));\n\t    }\n\n\t    this._assignProp(name, this._parseProperty(name, value));\n\t  };\n\t  /*\n\t    Method to parse postion and string props.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._parsePreArrayProperty = function _parsePreArrayProperty(name, value) {\n\t    // parse stagger and rand values\n\t    value = this._parseOptionString(value);\n\t    // parse units for position properties\n\t    return this._parsePositionOption(name, value);\n\t  };\n\t  /*\n\t    Method to parse property value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._parseProperty = function _parseProperty(name, value) {\n\t    // parse `HTML` element in `parent` option\n\t    if (name === 'parent') {\n\t      return _h2.default.parseEl(value);\n\t    }\n\t    // parse `stagger`, `rand` and `position`\n\t    value = this._parsePreArrayProperty(name, value);\n\t    // parse numeric/percent values for strokeDash.. properties\n\t    return this._parseStrokeDashOption(name, value);\n\t  };\n\t  /*\n\t    Method to parse values inside ∆.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {Object} Delta.\n\t    @returns {Object} Delta with parsed parameters.\n\t  */\n\n\n\t  Module.prototype._parseDeltaValues = function _parseDeltaValues(name, delta) {\n\t    // return h.parseDelta( name, delta, this._index );\n\n\t    var d = {};\n\t    for (var key in delta) {\n\t      var value = delta[key];\n\n\t      // delete delta[key];\n\t      // add parsed properties\n\t      var newEnd = this._parsePreArrayProperty(name, value);\n\t      d[this._parsePreArrayProperty(name, key)] = newEnd;\n\t    }\n\t    return d;\n\t  };\n\t  /*\n\t    Method to parse delta and nondelta properties.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._preparsePropValue = function _preparsePropValue(key, value) {\n\t    return this._isDelta(value) ? this._parseDeltaValues(key, value) : this._parsePreArrayProperty(key, value);\n\t  };\n\t  /*\n\t    Method to calculate current progress of the deltas.\n\t    @private\n\t    @param {Number} Eased progress to calculate - [0..1].\n\t    @param {Number} Progress to calculate - [0..1].\n\t  */\n\n\n\t  Module.prototype._calcCurrentProps = function _calcCurrentProps(easedProgress, p) {\n\n\t    for (var key in this._deltas) {\n\n\t      var value = this._deltas[key];\n\n\t      // get eased progress from delta easing if defined and not curve\n\t      var isCurve = !!value.curve;\n\t      var ep = value.easing != null && !isCurve ? value.easing(p) : easedProgress;\n\n\t      if (value.type === 'array') {\n\t        var arr;\n\t        // if prop property is array - reuse it else - create an array\n\t        if (_h2.default.isArray(this._props[key])) {\n\t          arr = this._props[key];\n\t          arr.length = 0;\n\t        } else {\n\t          arr = [];\n\t        }\n\n\t        // just optimization to prevent curve\n\t        // calculations on every array item\n\t        var proc = isCurve ? value.curve(p) : null;\n\n\t        for (var i = 0; i < value.delta.length; i++) {\n\t          var item = value.delta[i],\n\t              dash = !isCurve ? value.start[i].value + ep * item.value : proc * (value.start[i].value + p * item.value);\n\t          arr.push({\n\t            string: '' + dash + item.unit,\n\t            value: dash,\n\t            unit: item.unit\n\t          });\n\t        }\n\n\t        this._props[key] = arr;\n\t      } else if (value.type === 'number') {\n\t        this._props[key] = !isCurve ? value.start + ep * value.delta : value.curve(p) * (value.start + p * value.delta);\n\t      } else if (value.type === 'unit') {\n\t        var currentValue = !isCurve ? value.start.value + ep * value.delta : value.curve(p) * (value.start.value + p * value.delta);\n\n\t        this._props[key] = '' + currentValue + value.end.unit;\n\t      } else if (value.type === 'color') {\n\t        var r, g, b, a;\n\t        if (!isCurve) {\n\t          r = parseInt(value.start.r + ep * value.delta.r, 10);\n\t          g = parseInt(value.start.g + ep * value.delta.g, 10);\n\t          b = parseInt(value.start.b + ep * value.delta.b, 10);\n\t          a = parseFloat(value.start.a + ep * value.delta.a);\n\t        } else {\n\t          var cp = value.curve(p);\n\t          r = parseInt(cp * (value.start.r + p * value.delta.r), 10);\n\t          g = parseInt(cp * (value.start.g + p * value.delta.g), 10);\n\t          b = parseInt(cp * (value.start.b + p * value.delta.b), 10);\n\t          a = parseFloat(cp * (value.start.a + p * value.delta.a));\n\t        }\n\t        this._props[key] = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate current progress and probably draw it in children.\n\t    @private\n\t    @param {Number} Eased progress to set - [0..1].\n\t    @param {Number} Progress to set - [0..1].\n\t  */\n\n\n\t  Module.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    this._progress = easedProgress;\n\t    this._calcCurrentProps(easedProgress, progress);\n\t  };\n\n\t  return Module;\n\t}();\n\n\texports.default = Module;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar _typeof = typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol ? \"symbol\" : typeof obj; };\n\n\texports.__esModule = true;\n\n\tvar _iterator = __webpack_require__(32);\n\n\tvar _iterator2 = _interopRequireDefault(_iterator);\n\n\tvar _symbol = __webpack_require__(33);\n\n\tvar _symbol2 = _interopRequireDefault(_symbol);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n\t  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t} : function (obj) {\n\t  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Helpers, h;\n\n\tHelpers = (function() {\n\t  Helpers.prototype.NS = 'http://www.w3.org/2000/svg';\n\n\t  Helpers.prototype.logBadgeCss = 'background:#3A0839;color:#FF512F;border-radius:5px; padding: 1px 5px 2px; border: 1px solid #FF512F;';\n\n\t  Helpers.prototype.shortColors = {\n\t    transparent: 'rgba(0,0,0,0)',\n\t    none: 'rgba(0,0,0,0)',\n\t    aqua: 'rgb(0,255,255)',\n\t    black: 'rgb(0,0,0)',\n\t    blue: 'rgb(0,0,255)',\n\t    fuchsia: 'rgb(255,0,255)',\n\t    gray: 'rgb(128,128,128)',\n\t    green: 'rgb(0,128,0)',\n\t    lime: 'rgb(0,255,0)',\n\t    maroon: 'rgb(128,0,0)',\n\t    navy: 'rgb(0,0,128)',\n\t    olive: 'rgb(128,128,0)',\n\t    purple: 'rgb(128,0,128)',\n\t    red: 'rgb(255,0,0)',\n\t    silver: 'rgb(192,192,192)',\n\t    teal: 'rgb(0,128,128)',\n\t    white: 'rgb(255,255,255)',\n\t    yellow: 'rgb(255,255,0)',\n\t    orange: 'rgb(255,128,0)'\n\t  };\n\n\t  Helpers.prototype.chainOptionMap = {};\n\n\t  Helpers.prototype.callbacksMap = {\n\t    onRefresh: 1,\n\t    onStart: 1,\n\t    onComplete: 1,\n\t    onFirstUpdate: 1,\n\t    onUpdate: 1,\n\t    onProgress: 1,\n\t    onRepeatStart: 1,\n\t    onRepeatComplete: 1,\n\t    onPlaybackStart: 1,\n\t    onPlaybackPause: 1,\n\t    onPlaybackStop: 1,\n\t    onPlaybackComplete: 1\n\t  };\n\n\t  Helpers.prototype.tweenOptionMap = {\n\t    duration: 1,\n\t    delay: 1,\n\t    speed: 1,\n\t    repeat: 1,\n\t    easing: 1,\n\t    backwardEasing: 1,\n\t    isYoyo: 1,\n\t    shiftTime: 1,\n\t    isReversed: 1,\n\t    callbacksContext: 1\n\t  };\n\n\t  Helpers.prototype.unitOptionMap = {\n\t    left: 1,\n\t    top: 1,\n\t    x: 1,\n\t    y: 1,\n\t    rx: 1,\n\t    ry: 1\n\t  };\n\n\t  Helpers.prototype.RAD_TO_DEG = 180 / Math.PI;\n\n\t  function Helpers() {\n\t    this.vars();\n\t  }\n\n\t  Helpers.prototype.vars = function() {\n\t    var ua;\n\t    this.prefix = this.getPrefix();\n\t    this.getRemBase();\n\t    this.isFF = this.prefix.lowercase === 'moz';\n\t    this.isIE = this.prefix.lowercase === 'ms';\n\t    ua = navigator.userAgent;\n\t    this.isOldOpera = ua.match(/presto/gim);\n\t    this.isSafari = ua.indexOf('Safari') > -1;\n\t    this.isChrome = ua.indexOf('Chrome') > -1;\n\t    this.isOpera = ua.toLowerCase().indexOf(\"op\") > -1;\n\t    this.isChrome && this.isSafari && (this.isSafari = false);\n\t    (ua.match(/PhantomJS/gim)) && (this.isSafari = false);\n\t    this.isChrome && this.isOpera && (this.isChrome = false);\n\t    this.is3d = this.checkIf3d();\n\t    this.uniqIDs = -1;\n\t    this.div = document.createElement('div');\n\t    document.body.appendChild(this.div);\n\t    return this.defaultStyles = this.computedStyle(this.div);\n\t  };\n\n\t  Helpers.prototype.cloneObj = function(obj, exclude) {\n\t    var i, key, keys, newObj;\n\t    keys = Object.keys(obj);\n\t    newObj = {};\n\t    i = keys.length;\n\t    while (i--) {\n\t      key = keys[i];\n\t      if (exclude != null) {\n\t        if (!exclude[key]) {\n\t          newObj[key] = obj[key];\n\t        }\n\t      } else {\n\t        newObj[key] = obj[key];\n\t      }\n\t    }\n\t    return newObj;\n\t  };\n\n\t  Helpers.prototype.extend = function(objTo, objFrom) {\n\t    var key, value;\n\t    for (key in objFrom) {\n\t      value = objFrom[key];\n\t      if (objTo[key] == null) {\n\t        objTo[key] = objFrom[key];\n\t      }\n\t    }\n\t    return objTo;\n\t  };\n\n\t  Helpers.prototype.getRemBase = function() {\n\t    var html, style;\n\t    html = document.querySelector('html');\n\t    style = getComputedStyle(html);\n\t    return this.remBase = parseFloat(style.fontSize);\n\t  };\n\n\t  Helpers.prototype.clamp = function(value, min, max) {\n\t    if (value < min) {\n\t      return min;\n\t    } else if (value > max) {\n\t      return max;\n\t    } else {\n\t      return value;\n\t    }\n\t  };\n\n\t  Helpers.prototype.setPrefixedStyle = function(el, name, value) {\n\t    (name === 'transform') && (el.style[\"\" + this.prefix.css + name] = value);\n\t    return el.style[name] = value;\n\t  };\n\n\t  Helpers.prototype.style = function(el, name, value) {\n\t    var key, keys, len, results;\n\t    if (typeof name === 'object') {\n\t      keys = Object.keys(name);\n\t      len = keys.length;\n\t      results = [];\n\t      while (len--) {\n\t        key = keys[len];\n\t        value = name[key];\n\t        results.push(this.setPrefixedStyle(el, key, value));\n\t      }\n\t      return results;\n\t    } else {\n\t      return this.setPrefixedStyle(el, name, value);\n\t    }\n\t  };\n\n\t  Helpers.prototype.prepareForLog = function(args) {\n\t    args = Array.prototype.slice.apply(args);\n\t    args.unshift('::');\n\t    args.unshift(this.logBadgeCss);\n\t    args.unshift('%cmo·js%c');\n\t    return args;\n\t  };\n\n\t  Helpers.prototype.log = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.log.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.warn = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.warn.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.error = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.error.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.parseUnit = function(value) {\n\t    var amount, isStrict, ref, regex, returnVal, unit;\n\t    if (typeof value === 'number') {\n\t      return returnVal = {\n\t        unit: 'px',\n\t        isStrict: false,\n\t        value: value,\n\t        string: value === 0 ? \"\" + value : value + \"px\"\n\t      };\n\t    } else if (typeof value === 'string') {\n\t      regex = /px|%|rem|em|ex|cm|ch|mm|in|pt|pc|vh|vw|vmin|deg/gim;\n\t      unit = (ref = value.match(regex)) != null ? ref[0] : void 0;\n\t      isStrict = true;\n\t      if (!unit) {\n\t        unit = 'px';\n\t        isStrict = false;\n\t      }\n\t      amount = parseFloat(value);\n\t      return returnVal = {\n\t        unit: unit,\n\t        isStrict: isStrict,\n\t        value: amount,\n\t        string: amount === 0 ? \"\" + amount : \"\" + amount + unit\n\t      };\n\t    }\n\t    return value;\n\t  };\n\n\t  Helpers.prototype.bind = function(func, context) {\n\t    var bindArgs, wrapper;\n\t    wrapper = function() {\n\t      var args, unshiftArgs;\n\t      args = Array.prototype.slice.call(arguments);\n\t      unshiftArgs = bindArgs.concat(args);\n\t      return func.apply(context, unshiftArgs);\n\t    };\n\t    bindArgs = Array.prototype.slice.call(arguments, 2);\n\t    return wrapper;\n\t  };\n\n\t  Helpers.prototype.getRadialPoint = function(o) {\n\t    var point, radAngle, radiusX, radiusY;\n\t    if (o == null) {\n\t      o = {};\n\t    }\n\t    radAngle = (o.angle - 90) * 0.017453292519943295;\n\t    radiusX = o.radiusX != null ? o.radiusX : o.radius;\n\t    radiusY = o.radiusY != null ? o.radiusY : o.radius;\n\t    return point = {\n\t      x: o.center.x + (Math.cos(radAngle) * radiusX),\n\t      y: o.center.y + (Math.sin(radAngle) * radiusY)\n\t    };\n\t  };\n\n\t  Helpers.prototype.getPrefix = function() {\n\t    var dom, pre, styles, v;\n\t    styles = window.getComputedStyle(document.documentElement, \"\");\n\t    v = Array.prototype.slice.call(styles).join(\"\").match(/-(moz|webkit|ms)-/);\n\t    pre = (v || (styles.OLink === \"\" && [\"\", \"o\"]))[1];\n\t    dom = \"WebKit|Moz|MS|O\".match(new RegExp(\"(\" + pre + \")\", \"i\"))[1];\n\t    return {\n\t      dom: dom,\n\t      lowercase: pre,\n\t      css: \"-\" + pre + \"-\",\n\t      js: pre[0].toUpperCase() + pre.substr(1)\n\t    };\n\t  };\n\n\t  Helpers.prototype.strToArr = function(string) {\n\t    var arr;\n\t    arr = [];\n\t    if (typeof string === 'number' && !isNaN(string)) {\n\t      arr.push(this.parseUnit(string));\n\t      return arr;\n\t    }\n\t    string.trim().split(/\\s+/gim).forEach((function(_this) {\n\t      return function(str) {\n\t        return arr.push(_this.parseUnit(_this.parseIfRand(str)));\n\t      };\n\t    })(this));\n\t    return arr;\n\t  };\n\n\t  Helpers.prototype.calcArrDelta = function(arr1, arr2) {\n\t    var delta, i, j, len1, num;\n\t    delta = [];\n\t    for (i = j = 0, len1 = arr1.length; j < len1; i = ++j) {\n\t      num = arr1[i];\n\t      delta[i] = this.parseUnit(\"\" + (arr2[i].value - arr1[i].value) + arr2[i].unit);\n\t    }\n\t    return delta;\n\t  };\n\n\t  Helpers.prototype.isArray = function(variable) {\n\t    return variable instanceof Array;\n\t  };\n\n\t  Helpers.prototype.normDashArrays = function(arr1, arr2) {\n\t    var arr1Len, arr2Len, currItem, i, j, k, lenDiff, ref, ref1, startI;\n\t    arr1Len = arr1.length;\n\t    arr2Len = arr2.length;\n\t    if (arr1Len > arr2Len) {\n\t      lenDiff = arr1Len - arr2Len;\n\t      startI = arr2.length;\n\t      for (i = j = 0, ref = lenDiff; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t        currItem = i + startI;\n\t        arr2.push(this.parseUnit(\"0\" + arr1[currItem].unit));\n\t      }\n\t    } else if (arr2Len > arr1Len) {\n\t      lenDiff = arr2Len - arr1Len;\n\t      startI = arr1.length;\n\t      for (i = k = 0, ref1 = lenDiff; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n\t        currItem = i + startI;\n\t        arr1.push(this.parseUnit(\"0\" + arr2[currItem].unit));\n\t      }\n\t    }\n\t    return [arr1, arr2];\n\t  };\n\n\t  Helpers.prototype.makeColorObj = function(color) {\n\t    var alpha, b, colorObj, g, isRgb, r, regexString1, regexString2, result, rgbColor;\n\t    if (color[0] === '#') {\n\t      result = /^#?([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i.exec(color);\n\t      colorObj = {};\n\t      if (result) {\n\t        r = result[1].length === 2 ? result[1] : result[1] + result[1];\n\t        g = result[2].length === 2 ? result[2] : result[2] + result[2];\n\t        b = result[3].length === 2 ? result[3] : result[3] + result[3];\n\t        colorObj = {\n\t          r: parseInt(r, 16),\n\t          g: parseInt(g, 16),\n\t          b: parseInt(b, 16),\n\t          a: 1\n\t        };\n\t      }\n\t    }\n\t    if (color[0] !== '#') {\n\t      isRgb = color[0] === 'r' && color[1] === 'g' && color[2] === 'b';\n\t      if (isRgb) {\n\t        rgbColor = color;\n\t      }\n\t      if (!isRgb) {\n\t        rgbColor = !this.shortColors[color] ? (this.div.style.color = color, this.computedStyle(this.div).color) : this.shortColors[color];\n\t      }\n\t      regexString1 = '^rgba?\\\\((\\\\d{1,3}),\\\\s?(\\\\d{1,3}),';\n\t      regexString2 = '\\\\s?(\\\\d{1,3}),?\\\\s?(\\\\d{1}|0?\\\\.\\\\d{1,})?\\\\)$';\n\t      result = new RegExp(regexString1 + regexString2, 'gi').exec(rgbColor);\n\t      colorObj = {};\n\t      alpha = parseFloat(result[4] || 1);\n\t      if (result) {\n\t        colorObj = {\n\t          r: parseInt(result[1], 10),\n\t          g: parseInt(result[2], 10),\n\t          b: parseInt(result[3], 10),\n\t          a: (alpha != null) && !isNaN(alpha) ? alpha : 1\n\t        };\n\t      }\n\t    }\n\t    return colorObj;\n\t  };\n\n\t  Helpers.prototype.computedStyle = function(el) {\n\t    return getComputedStyle(el);\n\t  };\n\n\t  Helpers.prototype.capitalize = function(str) {\n\t    if (typeof str !== 'string') {\n\t      throw Error('String expected - nothing to capitalize');\n\t    }\n\t    return str.charAt(0).toUpperCase() + str.substring(1);\n\t  };\n\n\t  Helpers.prototype.parseRand = function(string) {\n\t    var rand, randArr, units;\n\t    randArr = string.split(/rand\\(|\\,|\\)/);\n\t    units = this.parseUnit(randArr[2]);\n\t    rand = this.rand(parseFloat(randArr[1]), parseFloat(randArr[2]));\n\t    if (units.unit && randArr[2].match(units.unit)) {\n\t      return rand + units.unit;\n\t    } else {\n\t      return rand;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseStagger = function(string, index) {\n\t    var base, number, splittedValue, unit, unitValue, value;\n\t    value = string.split(/stagger\\(|\\)$/)[1].toLowerCase();\n\t    splittedValue = value.split(/(rand\\(.*?\\)|[^\\(,\\s]+)(?=\\s*,|\\s*$)/gim);\n\t    value = splittedValue.length > 3 ? (base = this.parseUnit(this.parseIfRand(splittedValue[1])), splittedValue[3]) : (base = this.parseUnit(0), splittedValue[1]);\n\t    value = this.parseIfRand(value);\n\t    unitValue = this.parseUnit(value);\n\t    number = index * unitValue.value + base.value;\n\t    unit = base.isStrict ? base.unit : unitValue.isStrict ? unitValue.unit : '';\n\t    if (unit) {\n\t      return \"\" + number + unit;\n\t    } else {\n\t      return number;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseIfStagger = function(value, i) {\n\t    if (!(typeof value === 'string' && value.match(/stagger/g))) {\n\t      return value;\n\t    } else {\n\t      return this.parseStagger(value, i);\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseIfRand = function(str) {\n\t    if (typeof str === 'string' && str.match(/rand\\(/)) {\n\t      return this.parseRand(str);\n\t    } else {\n\t      return str;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseDelta = function(key, value, index) {\n\t    var curve, delta, easing, end, endArr, endColorObj, i, j, len1, start, startArr, startColorObj;\n\t    value = this.cloneObj(value);\n\t    easing = value.easing;\n\t    if (easing != null) {\n\t      easing = mojs.easing.parseEasing(easing);\n\t    }\n\t    delete value.easing;\n\t    curve = value.curve;\n\t    if (curve != null) {\n\t      curve = mojs.easing.parseEasing(curve);\n\t    }\n\t    delete value.curve;\n\t    start = Object.keys(value)[0];\n\t    end = value[start];\n\t    delta = {\n\t      start: start\n\t    };\n\t    if (isNaN(parseFloat(start)) && !start.match(/rand\\(/) && !start.match(/stagger\\(/)) {\n\t      if (key === 'strokeLinecap') {\n\t        this.warn(\"Sorry, stroke-linecap property is not animatable yet, using the start(\" + start + \") value instead\", value);\n\t        return delta;\n\t      }\n\t      startColorObj = this.makeColorObj(start);\n\t      endColorObj = this.makeColorObj(end);\n\t      delta = {\n\t        type: 'color',\n\t        name: key,\n\t        start: startColorObj,\n\t        end: endColorObj,\n\t        easing: easing,\n\t        curve: curve,\n\t        delta: {\n\t          r: endColorObj.r - startColorObj.r,\n\t          g: endColorObj.g - startColorObj.g,\n\t          b: endColorObj.b - startColorObj.b,\n\t          a: endColorObj.a - startColorObj.a\n\t        }\n\t      };\n\t    } else if (key === 'strokeDasharray' || key === 'strokeDashoffset' || key === 'origin') {\n\t      startArr = this.strToArr(start);\n\t      endArr = this.strToArr(end);\n\t      this.normDashArrays(startArr, endArr);\n\t      for (i = j = 0, len1 = startArr.length; j < len1; i = ++j) {\n\t        start = startArr[i];\n\t        end = endArr[i];\n\t        this.mergeUnits(start, end, key);\n\t      }\n\t      delta = {\n\t        type: 'array',\n\t        name: key,\n\t        start: startArr,\n\t        end: endArr,\n\t        delta: this.calcArrDelta(startArr, endArr),\n\t        easing: easing,\n\t        curve: curve\n\t      };\n\t    } else {\n\t      if (!this.callbacksMap[key] && !this.tweenOptionMap[key]) {\n\t        if (this.unitOptionMap[key]) {\n\t          end = this.parseUnit(this.parseStringOption(end, index));\n\t          start = this.parseUnit(this.parseStringOption(start, index));\n\t          this.mergeUnits(start, end, key);\n\t          delta = {\n\t            type: 'unit',\n\t            name: key,\n\t            start: start,\n\t            end: end,\n\t            delta: end.value - start.value,\n\t            easing: easing,\n\t            curve: curve\n\t          };\n\t        } else {\n\t          end = parseFloat(this.parseStringOption(end, index));\n\t          start = parseFloat(this.parseStringOption(start, index));\n\t          delta = {\n\t            type: 'number',\n\t            name: key,\n\t            start: start,\n\t            end: end,\n\t            delta: end - start,\n\t            easing: easing,\n\t            curve: curve\n\t          };\n\t        }\n\t      }\n\t    }\n\t    return delta;\n\t  };\n\n\t  Helpers.prototype.mergeUnits = function(start, end, key) {\n\t    if (!end.isStrict && start.isStrict) {\n\t      end.unit = start.unit;\n\t      return end.string = \"\" + end.value + end.unit;\n\t    } else if (end.isStrict && !start.isStrict) {\n\t      start.unit = end.unit;\n\t      return start.string = \"\" + start.value + start.unit;\n\t    } else if (end.isStrict && start.isStrict) {\n\t      if (end.unit !== start.unit) {\n\t        start.unit = end.unit;\n\t        start.string = \"\" + start.value + start.unit;\n\t        return this.warn(\"Two different units were specified on \\\"\" + key + \"\\\" delta property, mo · js will fallback to end \\\"\" + end.unit + \"\\\" unit \");\n\t      }\n\t    }\n\t  };\n\n\t  Helpers.prototype.rand = function(min, max) {\n\t    return (Math.random() * (max - min)) + min;\n\t  };\n\n\t  Helpers.prototype.isDOM = function(o) {\n\t    var isNode;\n\t    if (o == null) {\n\t      return false;\n\t    }\n\t    isNode = typeof o.nodeType === 'number' && typeof o.nodeName === 'string';\n\t    return typeof o === 'object' && isNode;\n\t  };\n\n\t  Helpers.prototype.getChildElements = function(element) {\n\t    var childNodes, children, i;\n\t    childNodes = element.childNodes;\n\t    children = [];\n\t    i = childNodes.length;\n\t    while (i--) {\n\t      if (childNodes[i].nodeType === 1) {\n\t        children.unshift(childNodes[i]);\n\t      }\n\t    }\n\t    return children;\n\t  };\n\n\t  Helpers.prototype.delta = function(start, end) {\n\t    var isType1, isType2, obj, type1, type2;\n\t    type1 = typeof start;\n\t    type2 = typeof end;\n\t    isType1 = type1 === 'string' || type1 === 'number' && !isNaN(start);\n\t    isType2 = type2 === 'string' || type2 === 'number' && !isNaN(end);\n\t    if (!isType1 || !isType2) {\n\t      this.error(\"delta method expects Strings or Numbers at input but got - \" + start + \", \" + end);\n\t      return;\n\t    }\n\t    obj = {};\n\t    obj[start] = end;\n\t    return obj;\n\t  };\n\n\t  Helpers.prototype.getUniqID = function() {\n\t    return ++this.uniqIDs;\n\t  };\n\n\t  Helpers.prototype.parsePath = function(path) {\n\t    var domPath;\n\t    if (typeof path === 'string') {\n\t      if (path.charAt(0).toLowerCase() === 'm') {\n\t        domPath = document.createElementNS(this.NS, 'path');\n\t        domPath.setAttributeNS(null, 'd', path);\n\t        return domPath;\n\t      } else {\n\t        return document.querySelector(path);\n\t      }\n\t    }\n\t    if (path.style) {\n\t      return path;\n\t    }\n\t  };\n\n\t  Helpers.prototype.closeEnough = function(num1, num2, eps) {\n\t    return Math.abs(num1 - num2) < eps;\n\t  };\n\n\t  Helpers.prototype.checkIf3d = function() {\n\t    var div, prefixed, style, tr;\n\t    div = document.createElement('div');\n\t    this.style(div, 'transform', 'translateZ(0)');\n\t    style = div.style;\n\t    prefixed = this.prefix.css + \"transform\";\n\t    tr = style[prefixed] != null ? style[prefixed] : style.transform;\n\t    return tr !== '';\n\t  };\n\n\n\t  /*\n\t    Method to check if variable holds pointer to an object.\n\t    @param {Any} Variable to test\n\t    @returns {Boolean} If variable is object.\n\t   */\n\n\t  Helpers.prototype.isObject = function(variable) {\n\t    return variable !== null && typeof variable === 'object';\n\t  };\n\n\n\t  /*\n\t    Method to get first value of the object.\n\t    Used to get end value on ∆s.\n\t    @param {Object} Object to get the value of.\n\t    @returns {Any} The value of the first object' property.\n\t   */\n\n\t  Helpers.prototype.getDeltaEnd = function(obj) {\n\t    var key;\n\t    key = Object.keys(obj)[0];\n\t    return obj[key];\n\t  };\n\n\n\t  /*\n\t    Method to get first key of the object.\n\t    Used to get start value on ∆s.\n\t    @param {Object} Object to get the value of.\n\t    @returns {String} The key of the first object' property.\n\t   */\n\n\t  Helpers.prototype.getDeltaStart = function(obj) {\n\t    var key;\n\t    key = Object.keys(obj)[0];\n\t    return key;\n\t  };\n\n\n\t  /*\n\t    Method to check if propery exists in callbacksMap or tweenOptionMap.\n\t    @param {String} Property name to check for\n\t    @returns {Boolean} If property is tween property.\n\t   */\n\n\t  Helpers.prototype.isTweenProp = function(keyName) {\n\t    return this.tweenOptionMap[keyName] || this.callbacksMap[keyName];\n\t  };\n\n\n\t  /*\n\t    Method to parse string property value\n\t    which can include both `rand` and `stagger `\n\t    value in various positions.\n\t    @param {String} Property name to check for.\n\t    @param {Number} Optional index for stagger.\n\t    @returns {Number} Parsed option value.\n\t   */\n\n\t  Helpers.prototype.parseStringOption = function(value, index) {\n\t    if (index == null) {\n\t      index = 0;\n\t    }\n\t    if (typeof value === 'string') {\n\t      value = this.parseIfStagger(value, index);\n\t      value = this.parseIfRand(value);\n\t    }\n\t    return value;\n\t  };\n\n\n\t  /*\n\t    Method to get the last item of array.\n\t    @private\n\t    @param {Array} Array to get the last item in.\n\t    @returns {Any} The last item of array.\n\t   */\n\n\t  Helpers.prototype.getLastItem = function(arr) {\n\t    return arr[arr.length - 1];\n\t  };\n\n\n\t  /*\n\t    Method parse HTMLElement.\n\t    @private\n\t    @param {String, Object} Selector string or HTMLElement.\n\t    @returns {Object} HTMLElement.\n\t   */\n\n\t  Helpers.prototype.parseEl = function(el) {\n\t    if (h.isDOM(el)) {\n\t      return el;\n\t    } else if (typeof el === 'string') {\n\t      el = document.querySelector(el);\n\t    }\n\t    if (el === null) {\n\t      h.error(\"Can't parse HTML element: \", el);\n\t    }\n\t    return el;\n\t  };\n\n\n\t  /*\n\t    Method force compositor layer on HTMLElement.\n\t    @private\n\t    @param {Object} HTMLElement.\n\t    @returns {Object} HTMLElement.\n\t   */\n\n\t  Helpers.prototype.force3d = function(el) {\n\t    this.setPrefixedStyle(el, 'backface-visibility', 'hidden');\n\t    return el;\n\t  };\n\n\n\t  /*\n\t    Method to check if value is delta.\n\t    @private\n\t    @param {Any} Property to check.\n\t    @returns {Boolean} If value is delta.\n\t   */\n\n\t  Helpers.prototype.isDelta = function(optionsValue) {\n\t    var isObject;\n\t    isObject = this.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || this.isArray(optionsValue) || this.isDOM(optionsValue));\n\t  };\n\n\t  return Helpers;\n\n\t})();\n\n\th = new Helpers;\n\n\tmodule.exports = h;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Bit, BitsMap, Circle, Cross, Curve, Custom, Equal, Line, Polygon, Rect, Zigzag, h;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tCustom = __webpack_require__(36)[\"default\"] || __webpack_require__(36);\n\n\tCircle = __webpack_require__(37);\n\n\tLine = __webpack_require__(38);\n\n\tZigzag = __webpack_require__(39);\n\n\tRect = __webpack_require__(35);\n\n\tPolygon = __webpack_require__(40);\n\n\tCross = __webpack_require__(41);\n\n\tCurve = __webpack_require__(42)[\"default\"] || __webpack_require__(42);\n\n\tEqual = __webpack_require__(43);\n\n\th = __webpack_require__(19);\n\n\tBitsMap = (function() {\n\t  function BitsMap() {\n\t    this.addShape = h.bind(this.addShape, this);\n\t  }\n\n\t  BitsMap.prototype.bit = Bit;\n\n\t  BitsMap.prototype.custom = Custom;\n\n\t  BitsMap.prototype.circle = Circle;\n\n\t  BitsMap.prototype.line = Line;\n\n\t  BitsMap.prototype.zigzag = Zigzag;\n\n\t  BitsMap.prototype.rect = Rect;\n\n\t  BitsMap.prototype.polygon = Polygon;\n\n\t  BitsMap.prototype.cross = Cross;\n\n\t  BitsMap.prototype.equal = Equal;\n\n\t  BitsMap.prototype.curve = Curve;\n\n\t  BitsMap.prototype.getShape = function(name) {\n\t    return this[name] || h.error(\"no \\\"\" + name + \"\\\" shape available yet, please choose from this list:\", ['circle', 'line', 'zigzag', 'rect', 'polygon', 'cross', 'equal', 'curve']);\n\t  };\n\n\n\t  /*\n\t    Method to add shape to the map.\n\t    @public\n\t    @param {String} Name of the shape module.\n\t    @param {Object} Shape module class.\n\t   */\n\n\t  BitsMap.prototype.addShape = function(name, Module) {\n\t    return this[name] = Module;\n\t  };\n\n\t  return BitsMap;\n\n\t})();\n\n\tmodule.exports = new BitsMap;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar MotionPath, Timeline, Tween, h, resize,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n\th = __webpack_require__(19);\n\n\tresize = __webpack_require__(34);\n\n\tTween = __webpack_require__(8)[\"default\"];\n\n\tTimeline = __webpack_require__(9)[\"default\"];\n\n\tMotionPath = (function() {\n\t  MotionPath.prototype.defaults = {\n\t    path: null,\n\t    curvature: {\n\t      x: '75%',\n\t      y: '50%'\n\t    },\n\t    isCompositeLayer: true,\n\t    delay: 0,\n\t    duration: 1000,\n\t    easing: null,\n\t    repeat: 0,\n\t    yoyo: false,\n\t    onStart: null,\n\t    onComplete: null,\n\t    onUpdate: null,\n\t    offsetX: 0,\n\t    offsetY: 0,\n\t    angleOffset: null,\n\t    pathStart: 0,\n\t    pathEnd: 1,\n\t    motionBlur: 0,\n\t    transformOrigin: null,\n\t    isAngle: false,\n\t    isReverse: false,\n\t    isRunLess: false,\n\t    isPresetPosition: true\n\t  };\n\n\t  function MotionPath(o1) {\n\t    this.o = o1 != null ? o1 : {};\n\t    this.calcHeight = bind(this.calcHeight, this);\n\t    if (this.vars()) {\n\t      return;\n\t    }\n\t    this.createTween();\n\t    this;\n\t  }\n\n\t  MotionPath.prototype.vars = function() {\n\t    this.getScaler = h.bind(this.getScaler, this);\n\t    this.resize = resize;\n\t    this.props = h.cloneObj(this.defaults);\n\t    this.extendOptions(this.o);\n\t    this.isMotionBlurReset = h.isSafari || h.isIE;\n\t    this.isMotionBlurReset && (this.props.motionBlur = 0);\n\t    this.history = [h.cloneObj(this.props)];\n\t    return this.postVars();\n\t  };\n\n\t  MotionPath.prototype.curveToPath = function(o) {\n\t    var angle, curvature, curvatureX, curvatureY, curvePoint, curveXPoint, dX, dY, endPoint, path, percent, radius, start;\n\t    path = document.createElementNS(h.NS, 'path');\n\t    start = o.start;\n\t    endPoint = {\n\t      x: start.x + o.shift.x,\n\t      y: start.x + o.shift.y\n\t    };\n\t    curvature = o.curvature;\n\t    dX = o.shift.x;\n\t    dY = o.shift.y;\n\t    radius = Math.sqrt(dX * dX + dY * dY);\n\t    percent = radius / 100;\n\t    angle = Math.atan(dY / dX) * (180 / Math.PI) + 90;\n\t    if (o.shift.x < 0) {\n\t      angle = angle + 180;\n\t    }\n\t    curvatureX = h.parseUnit(curvature.x);\n\t    curvatureX = curvatureX.unit === '%' ? curvatureX.value * percent : curvatureX.value;\n\t    curveXPoint = h.getRadialPoint({\n\t      center: {\n\t        x: start.x,\n\t        y: start.y\n\t      },\n\t      radius: curvatureX,\n\t      angle: angle\n\t    });\n\t    curvatureY = h.parseUnit(curvature.y);\n\t    curvatureY = curvatureY.unit === '%' ? curvatureY.value * percent : curvatureY.value;\n\t    curvePoint = h.getRadialPoint({\n\t      center: {\n\t        x: curveXPoint.x,\n\t        y: curveXPoint.y\n\t      },\n\t      radius: curvatureY,\n\t      angle: angle + 90\n\t    });\n\t    path.setAttribute('d', \"M\" + start.x + \",\" + start.y + \" Q\" + curvePoint.x + \",\" + curvePoint.y + \" \" + endPoint.x + \",\" + endPoint.y);\n\t    return path;\n\t  };\n\n\t  MotionPath.prototype.postVars = function() {\n\t    this.props.pathStart = h.clamp(this.props.pathStart, 0, 1);\n\t    this.props.pathEnd = h.clamp(this.props.pathEnd, this.props.pathStart, 1);\n\t    this.angle = 0;\n\t    this.speedX = 0;\n\t    this.speedY = 0;\n\t    this.blurX = 0;\n\t    this.blurY = 0;\n\t    this.prevCoords = {};\n\t    this.blurAmount = 20;\n\t    this.props.motionBlur = h.clamp(this.props.motionBlur, 0, 1);\n\t    this.onUpdate = this.props.onUpdate;\n\t    if (!this.o.el) {\n\t      h.error('Missed \"el\" option. It could be a selector, DOMNode or another module.');\n\t      return true;\n\t    }\n\t    this.el = this.parseEl(this.props.el);\n\t    this.props.motionBlur > 0 && this.createFilter();\n\t    this.path = this.getPath();\n\t    if (!this.path.getAttribute('d')) {\n\t      h.error('Path has no coordinates to work with, aborting');\n\t      return true;\n\t    }\n\t    this.len = this.path.getTotalLength();\n\t    this.slicedLen = this.len * (this.props.pathEnd - this.props.pathStart);\n\t    this.startLen = this.props.pathStart * this.len;\n\t    this.fill = this.props.fill;\n\t    if (this.fill != null) {\n\t      this.container = this.parseEl(this.props.fill.container);\n\t      this.fillRule = this.props.fill.fillRule || 'all';\n\t      this.getScaler();\n\t      if (this.container != null) {\n\t        this.removeEvent(this.container, 'onresize', this.getScaler);\n\t        return this.addEvent(this.container, 'onresize', this.getScaler);\n\t      }\n\t    }\n\t  };\n\n\t  MotionPath.prototype.addEvent = function(el, type, handler) {\n\t    return el.addEventListener(type, handler, false);\n\t  };\n\n\t  MotionPath.prototype.removeEvent = function(el, type, handler) {\n\t    return el.removeEventListener(type, handler, false);\n\t  };\n\n\t  MotionPath.prototype.createFilter = function() {\n\t    var div, svg;\n\t    div = document.createElement('div');\n\t    this.filterID = \"filter-\" + (h.getUniqID());\n\t    div.innerHTML = \"<svg id=\\\"svg-\" + this.filterID + \"\\\"\\n    style=\\\"visibility:hidden; width:0px; height:0px\\\">\\n  <filter id=\\\"\" + this.filterID + \"\\\" y=\\\"-20\\\" x=\\\"-20\\\" width=\\\"40\\\" height=\\\"40\\\">\\n    <feOffset\\n      id=\\\"blur-offset\\\" in=\\\"SourceGraphic\\\"\\n      dx=\\\"0\\\" dy=\\\"0\\\" result=\\\"offset2\\\"></feOffset>\\n    <feGaussianblur\\n      id=\\\"blur\\\" in=\\\"offset2\\\"\\n      stdDeviation=\\\"0,0\\\" result=\\\"blur2\\\"></feGaussianblur>\\n    <feMerge>\\n      <feMergeNode in=\\\"SourceGraphic\\\"></feMergeNode>\\n      <feMergeNode in=\\\"blur2\\\"></feMergeNode>\\n    </feMerge>\\n  </filter>\\n</svg>\";\n\t    svg = div.querySelector(\"#svg-\" + this.filterID);\n\t    this.filter = svg.querySelector('#blur');\n\t    this.filterOffset = svg.querySelector('#blur-offset');\n\t    document.body.insertBefore(svg, document.body.firstChild);\n\t    this.el.style['filter'] = \"url(#\" + this.filterID + \")\";\n\t    return this.el.style[h.prefix.css + \"filter\"] = \"url(#\" + this.filterID + \")\";\n\t  };\n\n\t  MotionPath.prototype.parseEl = function(el) {\n\t    if (typeof el === 'string') {\n\t      return document.querySelector(el);\n\t    }\n\t    if (el instanceof HTMLElement) {\n\t      return el;\n\t    }\n\t    if (el._setProp != null) {\n\t      this.isModule = true;\n\t      return el;\n\t    }\n\t  };\n\n\t  MotionPath.prototype.getPath = function() {\n\t    var path;\n\t    path = h.parsePath(this.props.path);\n\t    if (path) {\n\t      return path;\n\t    }\n\t    if (this.props.path.x || this.props.path.y) {\n\t      return this.curveToPath({\n\t        start: {\n\t          x: 0,\n\t          y: 0\n\t        },\n\t        shift: {\n\t          x: this.props.path.x || 0,\n\t          y: this.props.path.y || 0\n\t        },\n\t        curvature: {\n\t          x: this.props.curvature.x || this.defaults.curvature.x,\n\t          y: this.props.curvature.y || this.defaults.curvature.y\n\t        }\n\t      });\n\t    }\n\t  };\n\n\t  MotionPath.prototype.getScaler = function() {\n\t    var end, size, start;\n\t    this.cSize = {\n\t      width: this.container.offsetWidth || 0,\n\t      height: this.container.offsetHeight || 0\n\t    };\n\t    start = this.path.getPointAtLength(0);\n\t    end = this.path.getPointAtLength(this.len);\n\t    size = {};\n\t    this.scaler = {};\n\t    size.width = end.x >= start.x ? end.x - start.x : start.x - end.x;\n\t    size.height = end.y >= start.y ? end.y - start.y : start.y - end.y;\n\t    switch (this.fillRule) {\n\t      case 'all':\n\t        this.calcWidth(size);\n\t        return this.calcHeight(size);\n\t      case 'width':\n\t        this.calcWidth(size);\n\t        return this.scaler.y = this.scaler.x;\n\t      case 'height':\n\t        this.calcHeight(size);\n\t        return this.scaler.x = this.scaler.y;\n\t    }\n\t  };\n\n\t  MotionPath.prototype.calcWidth = function(size) {\n\t    this.scaler.x = this.cSize.width / size.width;\n\t    return !isFinite(this.scaler.x) && (this.scaler.x = 1);\n\t  };\n\n\t  MotionPath.prototype.calcHeight = function(size) {\n\t    this.scaler.y = this.cSize.height / size.height;\n\t    return !isFinite(this.scaler.y) && (this.scaler.y = 1);\n\t  };\n\n\t  MotionPath.prototype.run = function(o) {\n\t    var fistItem, key, value;\n\t    if (o) {\n\t      fistItem = this.history[0];\n\t      for (key in o) {\n\t        value = o[key];\n\t        if (h.callbacksMap[key] || h.tweenOptionMap[key]) {\n\t          h.warn(\"the property \\\"\" + key + \"\\\" property can not be overridden on run yet\");\n\t          delete o[key];\n\t        } else {\n\t          this.history[0][key] = value;\n\t        }\n\t      }\n\t      this.tuneOptions(o);\n\t    }\n\t    return this.startTween();\n\t  };\n\n\t  MotionPath.prototype.createTween = function() {\n\t    this.tween = new Tween({\n\t      duration: this.props.duration,\n\t      delay: this.props.delay,\n\t      yoyo: this.props.yoyo,\n\t      repeat: this.props.repeat,\n\t      easing: this.props.easing,\n\t      onStart: (function(_this) {\n\t        return function() {\n\t          var ref;\n\t          return (ref = _this.props.onStart) != null ? ref.apply(_this) : void 0;\n\t        };\n\t      })(this),\n\t      onComplete: (function(_this) {\n\t        return function() {\n\t          var ref;\n\t          _this.props.motionBlur && _this.setBlur({\n\t            blur: {\n\t              x: 0,\n\t              y: 0\n\t            },\n\t            offset: {\n\t              x: 0,\n\t              y: 0\n\t            }\n\t          });\n\t          return (ref = _this.props.onComplete) != null ? ref.apply(_this) : void 0;\n\t        };\n\t      })(this),\n\t      onUpdate: (function(_this) {\n\t        return function(p) {\n\t          return _this.setProgress(p);\n\t        };\n\t      })(this),\n\t      onFirstUpdate: (function(_this) {\n\t        return function(isForward, isYoyo) {\n\t          if (!isForward) {\n\t            return _this.history.length > 1 && _this.tuneOptions(_this.history[0]);\n\t          }\n\t        };\n\t      })(this)\n\t    });\n\t    this.timeline = new Timeline;\n\t    this.timeline.add(this.tween);\n\t    !this.props.isRunLess && this.startTween();\n\t    return this.props.isPresetPosition && this.setProgress(0, true);\n\t  };\n\n\t  MotionPath.prototype.startTween = function() {\n\t    return setTimeout(((function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.timeline) != null ? ref.play() : void 0;\n\t      };\n\t    })(this)), 1);\n\t  };\n\n\t  MotionPath.prototype.setProgress = function(p, isInit) {\n\t    var len, point, x, y;\n\t    len = this.startLen + (!this.props.isReverse ? p * this.slicedLen : (1 - p) * this.slicedLen);\n\t    point = this.path.getPointAtLength(len);\n\t    x = point.x + this.props.offsetX;\n\t    y = point.y + this.props.offsetY;\n\t    this._getCurrentAngle(point, len, p);\n\t    this._setTransformOrigin(p);\n\t    this._setTransform(x, y, p, isInit);\n\t    return this.props.motionBlur && this.makeMotionBlur(x, y);\n\t  };\n\n\t  MotionPath.prototype.setElPosition = function(x, y, p) {\n\t    var composite, isComposite, rotate, transform;\n\t    rotate = this.angle !== 0 ? \"rotate(\" + this.angle + \"deg)\" : '';\n\t    isComposite = this.props.isCompositeLayer && h.is3d;\n\t    composite = isComposite ? 'translateZ(0)' : '';\n\t    transform = \"translate(\" + x + \"px,\" + y + \"px) \" + rotate + \" \" + composite;\n\t    return h.setPrefixedStyle(this.el, 'transform', transform);\n\t  };\n\n\t  MotionPath.prototype.setModulePosition = function(x, y) {\n\t    this.el._setProp({\n\t      shiftX: x + \"px\",\n\t      shiftY: y + \"px\",\n\t      angle: this.angle\n\t    });\n\t    return this.el._draw();\n\t  };\n\n\t  MotionPath.prototype._getCurrentAngle = function(point, len, p) {\n\t    var atan, isTransformFunOrigin, prevPoint, x1, x2;\n\t    isTransformFunOrigin = typeof this.props.transformOrigin === 'function';\n\t    if (this.props.isAngle || (this.props.angleOffset != null) || isTransformFunOrigin) {\n\t      prevPoint = this.path.getPointAtLength(len - 1);\n\t      x1 = point.y - prevPoint.y;\n\t      x2 = point.x - prevPoint.x;\n\t      atan = Math.atan(x1 / x2);\n\t      !isFinite(atan) && (atan = 0);\n\t      this.angle = atan * h.RAD_TO_DEG;\n\t      if ((typeof this.props.angleOffset) !== 'function') {\n\t        return this.angle += this.props.angleOffset || 0;\n\t      } else {\n\t        return this.angle = this.props.angleOffset.call(this, this.angle, p);\n\t      }\n\t    } else {\n\t      return this.angle = 0;\n\t    }\n\t  };\n\n\t  MotionPath.prototype._setTransform = function(x, y, p, isInit) {\n\t    var transform;\n\t    if (this.scaler) {\n\t      x *= this.scaler.x;\n\t      y *= this.scaler.y;\n\t    }\n\t    transform = null;\n\t    if (!isInit) {\n\t      transform = typeof this.onUpdate === \"function\" ? this.onUpdate(p, {\n\t        x: x,\n\t        y: y,\n\t        angle: this.angle\n\t      }) : void 0;\n\t    }\n\t    if (this.isModule) {\n\t      return this.setModulePosition(x, y);\n\t    } else {\n\t      if (typeof transform !== 'string') {\n\t        return this.setElPosition(x, y, p);\n\t      } else {\n\t        return h.setPrefixedStyle(this.el, 'transform', transform);\n\t      }\n\t    }\n\t  };\n\n\t  MotionPath.prototype._setTransformOrigin = function(p) {\n\t    var isTransformFunOrigin, tOrigin;\n\t    if (this.props.transformOrigin) {\n\t      isTransformFunOrigin = typeof this.props.transformOrigin === 'function';\n\t      tOrigin = !isTransformFunOrigin ? this.props.transformOrigin : this.props.transformOrigin(this.angle, p);\n\t      return h.setPrefixedStyle(this.el, 'transform-origin', tOrigin);\n\t    }\n\t  };\n\n\t  MotionPath.prototype.makeMotionBlur = function(x, y) {\n\t    var absoluteAngle, coords, dX, dY, signX, signY, tailAngle;\n\t    tailAngle = 0;\n\t    signX = 1;\n\t    signY = 1;\n\t    if ((this.prevCoords.x == null) || (this.prevCoords.y == null)) {\n\t      this.speedX = 0;\n\t      this.speedY = 0;\n\t    } else {\n\t      dX = x - this.prevCoords.x;\n\t      dY = y - this.prevCoords.y;\n\t      if (dX > 0) {\n\t        signX = -1;\n\t      }\n\t      if (signX < 0) {\n\t        signY = -1;\n\t      }\n\t      this.speedX = Math.abs(dX);\n\t      this.speedY = Math.abs(dY);\n\t      tailAngle = Math.atan(dY / dX) * (180 / Math.PI) + 90;\n\t    }\n\t    absoluteAngle = tailAngle - this.angle;\n\t    coords = this.angToCoords(absoluteAngle);\n\t    this.blurX = h.clamp((this.speedX / 16) * this.props.motionBlur, 0, 1);\n\t    this.blurY = h.clamp((this.speedY / 16) * this.props.motionBlur, 0, 1);\n\t    this.setBlur({\n\t      blur: {\n\t        x: 3 * this.blurX * this.blurAmount * Math.abs(coords.x),\n\t        y: 3 * this.blurY * this.blurAmount * Math.abs(coords.y)\n\t      },\n\t      offset: {\n\t        x: 3 * signX * this.blurX * coords.x * this.blurAmount,\n\t        y: 3 * signY * this.blurY * coords.y * this.blurAmount\n\t      }\n\t    });\n\t    this.prevCoords.x = x;\n\t    return this.prevCoords.y = y;\n\t  };\n\n\t  MotionPath.prototype.setBlur = function(o) {\n\t    if (!this.isMotionBlurReset) {\n\t      this.filter.setAttribute('stdDeviation', o.blur.x + \",\" + o.blur.y);\n\t      this.filterOffset.setAttribute('dx', o.offset.x);\n\t      return this.filterOffset.setAttribute('dy', o.offset.y);\n\t    }\n\t  };\n\n\t  MotionPath.prototype.extendDefaults = function(o) {\n\t    var key, results, value;\n\t    results = [];\n\t    for (key in o) {\n\t      value = o[key];\n\t      results.push(this[key] = value);\n\t    }\n\t    return results;\n\t  };\n\n\t  MotionPath.prototype.extendOptions = function(o) {\n\t    var key, results, value;\n\t    results = [];\n\t    for (key in o) {\n\t      value = o[key];\n\t      results.push(this.props[key] = value);\n\t    }\n\t    return results;\n\t  };\n\n\t  MotionPath.prototype.then = function(o) {\n\t    var it, key, opts, prevOptions, value;\n\t    prevOptions = this.history[this.history.length - 1];\n\t    opts = {};\n\t    for (key in prevOptions) {\n\t      value = prevOptions[key];\n\t      if (!h.callbacksMap[key] && !h.tweenOptionMap[key] || key === 'duration') {\n\t        if (o[key] == null) {\n\t          o[key] = value;\n\t        }\n\t      } else {\n\t        if (o[key] == null) {\n\t          o[key] = void 0;\n\t        }\n\t      }\n\t      if (h.tweenOptionMap[key]) {\n\t        opts[key] = key !== 'duration' ? o[key] : o[key] != null ? o[key] : prevOptions[key];\n\t      }\n\t    }\n\t    this.history.push(o);\n\t    it = this;\n\t    opts.onUpdate = (function(_this) {\n\t      return function(p) {\n\t        return _this.setProgress(p);\n\t      };\n\t    })(this);\n\t    opts.onStart = (function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.props.onStart) != null ? ref.apply(_this) : void 0;\n\t      };\n\t    })(this);\n\t    opts.onComplete = (function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.props.onComplete) != null ? ref.apply(_this) : void 0;\n\t      };\n\t    })(this);\n\t    opts.onFirstUpdate = function() {\n\t      return it.tuneOptions(it.history[this.index]);\n\t    };\n\t    opts.isChained = !o.delay;\n\t    this.timeline.append(new Tween(opts));\n\t    return this;\n\t  };\n\n\t  MotionPath.prototype.tuneOptions = function(o) {\n\t    this.extendOptions(o);\n\t    return this.postVars();\n\t  };\n\n\t  MotionPath.prototype.angToCoords = function(angle) {\n\t    var radAngle, x, y;\n\t    angle = angle % 360;\n\t    radAngle = ((angle - 90) * Math.PI) / 180;\n\t    x = Math.cos(radAngle);\n\t    y = Math.sin(radAngle);\n\t    x = x < 0 ? Math.max(x, -0.7) : Math.min(x, .7);\n\t    y = y < 0 ? Math.max(y, -0.7) : Math.min(y, .7);\n\t    return {\n\t      x: x * 1.428571429,\n\t      y: y * 1.428571429\n\t    };\n\t  };\n\n\t  return MotionPath;\n\n\t})();\n\n\tmodule.exports = MotionPath;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Easing, PI, PathEasing, approximate, bezier, easing, h, mix, sin;\n\n\tbezier = __webpack_require__(44);\n\n\tPathEasing = __webpack_require__(45);\n\n\tmix = __webpack_require__(46);\n\n\th = __webpack_require__(19);\n\n\tapproximate = __webpack_require__(47)[\"default\"] || __webpack_require__(47);\n\n\tsin = Math.sin;\n\n\tPI = Math.PI;\n\n\tEasing = (function() {\n\t  function Easing() {}\n\n\t  Easing.prototype.bezier = bezier;\n\n\t  Easing.prototype.PathEasing = PathEasing;\n\n\t  Easing.prototype.path = (new PathEasing('creator')).create;\n\n\t  Easing.prototype.approximate = approximate;\n\n\t  Easing.prototype.inverse = function(p) {\n\t    return 1 - p;\n\t  };\n\n\t  Easing.prototype.linear = {\n\t    none: function(k) {\n\t      return k;\n\t    }\n\t  };\n\n\t  Easing.prototype.ease = {\n\t    \"in\": bezier.apply(Easing, [0.42, 0, 1, 1]),\n\t    out: bezier.apply(Easing, [0, 0, 0.58, 1]),\n\t    inout: bezier.apply(Easing, [0.42, 0, 0.58, 1])\n\t  };\n\n\t  Easing.prototype.sin = {\n\t    \"in\": function(k) {\n\t      return 1 - Math.cos(k * PI / 2);\n\t    },\n\t    out: function(k) {\n\t      return sin(k * PI / 2);\n\t    },\n\t    inout: function(k) {\n\t      return 0.5 * (1 - Math.cos(PI * k));\n\t    }\n\t  };\n\n\t  Easing.prototype.quad = {\n\t    \"in\": function(k) {\n\t      return k * k;\n\t    },\n\t    out: function(k) {\n\t      return k * (2 - k);\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k;\n\t      }\n\t      return -0.5 * (--k * (k - 2) - 1);\n\t    }\n\t  };\n\n\t  Easing.prototype.cubic = {\n\t    \"in\": function(k) {\n\t      return k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return --k * k * k + 1;\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k;\n\t      }\n\t      return 0.5 * ((k -= 2) * k * k + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.quart = {\n\t    \"in\": function(k) {\n\t      return k * k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return 1 - (--k * k * k * k);\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k * k;\n\t      }\n\t      return -0.5 * ((k -= 2) * k * k * k - 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.quint = {\n\t    \"in\": function(k) {\n\t      return k * k * k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return --k * k * k * k * k + 1;\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k * k * k;\n\t      }\n\t      return 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.expo = {\n\t    \"in\": function(k) {\n\t      if (k === 0) {\n\t        return 0;\n\t      } else {\n\t        return Math.pow(1024, k - 1);\n\t      }\n\t    },\n\t    out: function(k) {\n\t      if (k === 1) {\n\t        return 1;\n\t      } else {\n\t        return 1 - Math.pow(2, -10 * k);\n\t      }\n\t    },\n\t    inout: function(k) {\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * Math.pow(1024, k - 1);\n\t      }\n\t      return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.circ = {\n\t    \"in\": function(k) {\n\t      return 1 - Math.sqrt(1 - k * k);\n\t    },\n\t    out: function(k) {\n\t      return Math.sqrt(1 - (--k * k));\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t      }\n\t      return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t    }\n\t  };\n\n\t  Easing.prototype.back = {\n\t    \"in\": function(k) {\n\t      var s;\n\t      s = 1.70158;\n\t      return k * k * ((s + 1) * k - s);\n\t    },\n\t    out: function(k) {\n\t      var s;\n\t      s = 1.70158;\n\t      return --k * k * ((s + 1) * k + s) + 1;\n\t    },\n\t    inout: function(k) {\n\t      var s;\n\t      s = 1.70158 * 1.525;\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * (k * k * ((s + 1) * k - s));\n\t      }\n\t      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.elastic = {\n\t    \"in\": function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t    },\n\t    out: function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;\n\t    },\n\t    inout: function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      if ((k *= 2) < 1) {\n\t        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t      }\n\t      return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t    }\n\t  };\n\n\t  Easing.prototype.bounce = {\n\t    \"in\": function(k) {\n\t      return 1 - easing.bounce.out(1 - k);\n\t    },\n\t    out: function(k) {\n\t      if (k < (1 / 2.75)) {\n\t        return 7.5625 * k * k;\n\t      } else if (k < (2 / 2.75)) {\n\t        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t      } else if (k < (2.5 / 2.75)) {\n\t        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t      } else {\n\t        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t      }\n\t    },\n\t    inout: function(k) {\n\t      if (k < 0.5) {\n\t        return easing.bounce[\"in\"](k * 2) * 0.5;\n\t      }\n\t      return easing.bounce.out(k * 2 - 1) * 0.5 + 0.5;\n\t    }\n\t  };\n\n\t  Easing.prototype.parseEasing = function(easing) {\n\t    var easingParent, type;\n\t    if (easing == null) {\n\t      easing = 'linear.none';\n\t    }\n\t    type = typeof easing;\n\t    if (type === 'string') {\n\t      if (easing.charAt(0).toLowerCase() === 'm') {\n\t        return this.path(easing);\n\t      } else {\n\t        easing = this._splitEasing(easing);\n\t        easingParent = this[easing[0]];\n\t        if (!easingParent) {\n\t          h.error(\"Easing with name \\\"\" + easing[0] + \"\\\" was not found, fallback to \\\"linear.none\\\" instead\");\n\t          return this['linear']['none'];\n\t        }\n\t        return easingParent[easing[1]];\n\t      }\n\t    }\n\t    if (h.isArray(easing)) {\n\t      return this.bezier.apply(this, easing);\n\t    }\n\t    if ('function') {\n\t      return easing;\n\t    }\n\t  };\n\n\t  Easing.prototype._splitEasing = function(string) {\n\t    var firstPart, secondPart, split;\n\t    if (typeof string === 'function') {\n\t      return string;\n\t    }\n\t    if (typeof string === 'string' && string.length) {\n\t      split = string.split('.');\n\t      firstPart = split[0].toLowerCase() || 'linear';\n\t      secondPart = split[1].toLowerCase() || 'none';\n\t      return [firstPart, secondPart];\n\t    } else {\n\t      return ['linear', 'none'];\n\t    }\n\t  };\n\n\t  return Easing;\n\n\t})();\n\n\teasing = new Easing;\n\n\teasing.mix = mix(easing);\n\n\tmodule.exports = easing;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\texports.default = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = function (self, call) {\n\t  if (!self) {\n\t    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t  }\n\n\t  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t};\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _setPrototypeOf = __webpack_require__(48);\n\n\tvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\n\tvar _create = __webpack_require__(49);\n\n\tvar _create2 = _interopRequireDefault(_create);\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = function (subClass, superClass) {\n\t  if (typeof superClass !== \"function\" && superClass !== null) {\n\t    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n\t  }\n\n\t  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n\t    constructor: {\n\t      value: subClass,\n\t      enumerable: false,\n\t      writable: true,\n\t      configurable: true\n\t    }\n\t  });\n\t  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n\t};\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _module = __webpack_require__(16);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Bit = function (_Module) {\n\t  (0, _inherits3.default)(Bit, _Module);\n\n\t  function Bit() {\n\t    (0, _classCallCheck3.default)(this, Bit);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Module.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t  */\n\n\t  Bit.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      'ns': 'http://www.w3.org/2000/svg',\n\t      'tag': 'ellipse',\n\t      'parent': document.body,\n\t      'ratio': 1,\n\t      'radius': 50,\n\t      'radiusX': null,\n\t      'radiusY': null,\n\t      'stroke': 'hotpink',\n\t      'stroke-dasharray': '',\n\t      'stroke-dashoffset': '',\n\t      'stroke-linecap': '',\n\t      'stroke-width': 2,\n\t      'stroke-opacity': 1,\n\t      'fill': 'transparent',\n\t      'fill-opacity': 1,\n\t      'width': 0,\n\t      'height': 0\n\t    };\n\t    this._drawMap = ['stroke', 'stroke-width', 'stroke-opacity', 'stroke-dasharray', 'fill', 'stroke-dashoffset', 'stroke-linecap', 'fill-opacity', 'transform'];\n\t  };\n\n\t  Bit.prototype._vars = function _vars() {\n\t    this._state = {};\n\t    this._drawMapLength = this._drawMap.length;\n\t  };\n\t  /*\n\t    Method for initial render of the shape.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._render = function _render() {\n\t    if (this._isRendered) {\n\t      return;\n\t    }\n\t    // set `_isRendered` hatch\n\t    this._isRendered = true;\n\t    // create `SVG` canvas to draw in\n\t    this._createSVGCanvas();\n\t    // set canvas size\n\t    this._setCanvasSize();\n\t    // draw the initial state\n\t    // this._draw();\n\t    // append the canvas to the parent from props\n\t    this._props.parent.appendChild(this._canvas);\n\t  };\n\t  /*\n\t    Method to create `SVG` canvas to draw in.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._createSVGCanvas = function _createSVGCanvas() {\n\t    var p = this._props;\n\t    // create canvas - `svg` element to draw in\n\t    this._canvas = document.createElementNS(p.ns, 'svg');\n\t    // create the element shape element and add it to the canvas\n\t    this.el = document.createElementNS(p.ns, p.tag);\n\t    this._canvas.appendChild(this.el);\n\t  };\n\t  /*\n\t    Method to set size of the _canvas.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._setCanvasSize = function _setCanvasSize() {\n\t    var p = this._props,\n\t        style = this._canvas.style;\n\n\t    style.display = 'block';\n\t    style.width = '100%';\n\t    style.height = '100%';\n\t    style.left = '0px';\n\t    style.top = '0px';\n\t  };\n\t  /*\n\t    Method to draw the shape.\n\t    Called on every frame.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._draw = function _draw() {\n\t    this._props.length = this._getLength();\n\n\t    var state = this._state,\n\t        props = this._props;\n\n\t    var len = this._drawMapLength;\n\t    while (len--) {\n\t      var name = this._drawMap[len];\n\t      switch (name) {\n\t        case 'stroke-dasharray':\n\t        case 'stroke-dashoffset':\n\t          this.castStrokeDash(name);\n\t      }\n\t      this._setAttrIfChanged(name, this._props[name]);\n\t    }\n\t    this._state.radius = this._props.radius;\n\t  };\n\n\t  Bit.prototype.castStrokeDash = function castStrokeDash(name) {\n\t    // # if array of values\n\t    var p = this._props;\n\t    if (_h2.default.isArray(p[name])) {\n\t      var stroke = '';\n\t      for (var i = 0; i < p[name].length; i++) {\n\t        var dash = p[name][i],\n\t            cast = dash.unit === '%' ? this.castPercent(dash.value) : dash.value;\n\t        stroke += cast + ' ';\n\t      }\n\t      p[name] = stroke === '0 ' ? stroke = '' : stroke;\n\t      return p[name] = stroke;\n\t    }\n\t    // # if single value\n\t    if ((0, _typeof3.default)(p[name]) === 'object') {\n\t      stroke = p[name].unit === '%' ? this.castPercent(p[name].value) : p[name].value;\n\t      p[name] = stroke === 0 ? stroke = '' : stroke;\n\t    }\n\t  };\n\n\t  Bit.prototype.castPercent = function castPercent(percent) {\n\t    return percent * (this._props.length / 100);\n\t  };\n\n\t  /*\n\t    Method to set props to attributes and cache the values.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._setAttrIfChanged = function _setAttrIfChanged(name, value) {\n\t    if (this._state[name] !== value) {\n\t      // this.el.style[name] = value;\n\t      this.el.setAttribute(name, value);\n\t      this._state[name] = value;\n\t    }\n\t  };\n\t  /*\n\t    Method to length of the shape.\n\t    @private\n\t    @returns {Number} Length of the shape.\n\t  */\n\n\n\t  Bit.prototype._getLength = function _getLength() {\n\t    var p = this._props,\n\t        len = 0,\n\t        isGetLength = !!(this.el && this.el.getTotalLength);\n\n\t    if (isGetLength && this.el.getAttribute('d')) {\n\t      len = this.el.getTotalLength();\n\t    } else {\n\t      len = 2 * (p.radiusX != null ? p.radiusX : p.radius);\n\t    }\n\t    return len;\n\t  };\n\t  /*\n\t    Method to calculate total sum between points.\n\t    @private\n\t    @param {Array} Array of points.\n\t    @returns {Number} Distance bewtween all points.\n\t  */\n\n\n\t  Bit.prototype._getPointsPerimiter = function _getPointsPerimiter(points) {\n\t    var sum = 0;\n\n\t    for (var i = 1; i < points.length; i++) {\n\t      sum += this._pointsDelta(points[i - 1], points[i]);\n\t    }\n\n\t    sum += this._pointsDelta(points[0], _h2.default.getLastItem(points));\n\t    return sum;\n\t  };\n\t  /*\n\t    Method to get delta from two points.\n\t    @private\n\t    @param {Object} Point 1.\n\t    @param {Object} Point 2.\n\t    @returns {Number} Distance between the pooints.\n\t  */\n\n\n\t  Bit.prototype._pointsDelta = function _pointsDelta(point1, point2) {\n\t    var dx = Math.abs(point1.x - point2.x),\n\t        dy = Math.abs(point1.y - point2.y);\n\t    return Math.sqrt(dx * dx + dy * dy);\n\t  };\n\t  /*\n\t    Method to set module's size.\n\t    @private\n\t    @param {Number} Module width.\n\t    @param {Number} Module height.\n\t  */\n\n\n\t  Bit.prototype._setSize = function _setSize(width, height) {\n\t    var p = this._props;\n\t    p.width = width;\n\t    p.height = height;\n\t    this._draw();\n\t  };\n\n\t  return Bit;\n\t}(_module2.default);\n\n\texports.default = Bit;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _assign = __webpack_require__(50);\n\n\tvar _assign2 = _interopRequireDefault(_assign);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _assign2.default || function (target) {\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var source = arguments[i];\n\n\t    for (var key in source) {\n\t      if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t        target[key] = source[key];\n\t      }\n\t    }\n\t  }\n\n\t  return target;\n\t};\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(52), __esModule: true };\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(51), __esModule: true };\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\t(function() {\n\t  'use strict';\n\t  var cancel, i, isOldBrowser, lastTime, vendors, vp, w;\n\t  vendors = ['webkit', 'moz'];\n\t  i = 0;\n\t  w = window;\n\t  while (i < vendors.length && !w.requestAnimationFrame) {\n\t    vp = vendors[i];\n\t    w.requestAnimationFrame = w[vp + 'RequestAnimationFrame'];\n\t    cancel = w[vp + 'CancelAnimationFrame'];\n\t    w.cancelAnimationFrame = cancel || w[vp + 'CancelRequestAnimationFrame'];\n\t    ++i;\n\t  }\n\t  isOldBrowser = !w.requestAnimationFrame || !w.cancelAnimationFrame;\n\t  if (/iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent) || isOldBrowser) {\n\t    lastTime = 0;\n\t    w.requestAnimationFrame = function(callback) {\n\t      var nextTime, now;\n\t      now = Date.now();\n\t      nextTime = Math.max(lastTime + 16, now);\n\t      return setTimeout((function() {\n\t        callback(lastTime = nextTime);\n\t      }), nextTime - now);\n\t    };\n\t    w.cancelAnimationFrame = clearTimeout;\n\t  }\n\t})();\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\t(function(root) {\n\t  var offset, ref, ref1;\n\t  if (root.performance == null) {\n\t    root.performance = {};\n\t  }\n\t  Date.now = Date.now || function() {\n\t    return (new Date).getTime();\n\t  };\n\t  if (root.performance.now == null) {\n\t    offset = ((ref = root.performance) != null ? (ref1 = ref.timing) != null ? ref1.navigationStart : void 0 : void 0) ? performance.timing.navigationStart : Date.now();\n\t    return root.performance.now = function() {\n\t      return Date.now() - offset;\n\t    };\n\t  }\n\t})(window);\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(1), __esModule: true };\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(54), __esModule: true };\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\t/*!\n\t  LegoMushroom @legomushroom http://legomushroom.com\n\t  MIT License 2014\n\t */\n\n\t/* istanbul ignore next */\n\t(function() {\n\t  var Main;\n\t  Main = (function() {\n\t    function Main(o) {\n\t      this.o = o != null ? o : {};\n\t      if (window.isAnyResizeEventInited) {\n\t        return;\n\t      }\n\t      this.vars();\n\t      this.redefineProto();\n\t    }\n\n\t    Main.prototype.vars = function() {\n\t      window.isAnyResizeEventInited = true;\n\t      this.allowedProtos = [HTMLDivElement, HTMLFormElement, HTMLLinkElement, HTMLBodyElement, HTMLParagraphElement, HTMLFieldSetElement, HTMLLegendElement, HTMLLabelElement, HTMLButtonElement, HTMLUListElement, HTMLOListElement, HTMLLIElement, HTMLHeadingElement, HTMLQuoteElement, HTMLPreElement, HTMLBRElement, HTMLFontElement, HTMLHRElement, HTMLModElement, HTMLParamElement, HTMLMapElement, HTMLTableElement, HTMLTableCaptionElement, HTMLImageElement, HTMLTableCellElement, HTMLSelectElement, HTMLInputElement, HTMLTextAreaElement, HTMLAnchorElement, HTMLObjectElement, HTMLTableColElement, HTMLTableSectionElement, HTMLTableRowElement];\n\t      return this.timerElements = {\n\t        img: 1,\n\t        textarea: 1,\n\t        input: 1,\n\t        embed: 1,\n\t        object: 1,\n\t        svg: 1,\n\t        canvas: 1,\n\t        tr: 1,\n\t        tbody: 1,\n\t        thead: 1,\n\t        tfoot: 1,\n\t        a: 1,\n\t        select: 1,\n\t        option: 1,\n\t        optgroup: 1,\n\t        dl: 1,\n\t        dt: 1,\n\t        br: 1,\n\t        basefont: 1,\n\t        font: 1,\n\t        col: 1,\n\t        iframe: 1\n\t      };\n\t    };\n\n\t    Main.prototype.redefineProto = function() {\n\t      var i, it, proto, t;\n\t      it = this;\n\t      return t = (function() {\n\t        var j, len, ref, results;\n\t        ref = this.allowedProtos;\n\t        results = [];\n\t        for (i = j = 0, len = ref.length; j < len; i = ++j) {\n\t          proto = ref[i];\n\t          if (proto.prototype == null) {\n\t            continue;\n\t          }\n\t          results.push((function(proto) {\n\t            var listener, remover;\n\t            listener = proto.prototype.addEventListener || proto.prototype.attachEvent;\n\t            (function(listener) {\n\t              var wrappedListener;\n\t              wrappedListener = function() {\n\t                var option;\n\t                if (this !== window || this !== document) {\n\t                  option = arguments[0] === 'onresize' && !this.isAnyResizeEventInited;\n\t                  option && it.handleResize({\n\t                    args: arguments,\n\t                    that: this\n\t                  });\n\t                }\n\t                return listener.apply(this, arguments);\n\t              };\n\t              if (proto.prototype.addEventListener) {\n\t                return proto.prototype.addEventListener = wrappedListener;\n\t              } else if (proto.prototype.attachEvent) {\n\t                return proto.prototype.attachEvent = wrappedListener;\n\t              }\n\t            })(listener);\n\t            remover = proto.prototype.removeEventListener || proto.prototype.detachEvent;\n\t            return (function(remover) {\n\t              var wrappedRemover;\n\t              wrappedRemover = function() {\n\t                this.isAnyResizeEventInited = false;\n\t                this.iframe && this.removeChild(this.iframe);\n\t                return remover.apply(this, arguments);\n\t              };\n\t              if (proto.prototype.removeEventListener) {\n\t                return proto.prototype.removeEventListener = wrappedRemover;\n\t              } else if (proto.prototype.detachEvent) {\n\t                return proto.prototype.detachEvent = wrappedListener;\n\t              }\n\t            })(remover);\n\t          })(proto));\n\t        }\n\t        return results;\n\t      }).call(this);\n\t    };\n\n\t    Main.prototype.handleResize = function(args) {\n\t      var computedStyle, el, iframe, isEmpty, isNoPos, isStatic, ref;\n\t      el = args.that;\n\t      if (!this.timerElements[el.tagName.toLowerCase()]) {\n\t        iframe = document.createElement('iframe');\n\t        el.appendChild(iframe);\n\t        iframe.style.width = '100%';\n\t        iframe.style.height = '100%';\n\t        iframe.style.position = 'absolute';\n\t        iframe.style.zIndex = -999;\n\t        iframe.style.opacity = 0;\n\t        iframe.style.top = 0;\n\t        iframe.style.left = 0;\n\t        computedStyle = window.getComputedStyle ? getComputedStyle(el) : el.currentStyle;\n\t        isNoPos = el.style.position === '';\n\t        isStatic = computedStyle.position === 'static' && isNoPos;\n\t        isEmpty = computedStyle.position === '' && el.style.position === '';\n\t        if (isStatic || isEmpty) {\n\t          el.style.position = 'relative';\n\t        }\n\t        if ((ref = iframe.contentWindow) != null) {\n\t          ref.onresize = (function(_this) {\n\t            return function(e) {\n\t              return _this.dispatchEvent(el);\n\t            };\n\t          })(this);\n\t        }\n\t        el.iframe = iframe;\n\t      } else {\n\t        this.initTimer(el);\n\t      }\n\t      return el.isAnyResizeEventInited = true;\n\t    };\n\n\t    Main.prototype.initTimer = function(el) {\n\t      var height, width;\n\t      width = 0;\n\t      height = 0;\n\t      return this.interval = setInterval((function(_this) {\n\t        return function() {\n\t          var newHeight, newWidth;\n\t          newWidth = el.offsetWidth;\n\t          newHeight = el.offsetHeight;\n\t          if (newWidth !== width || newHeight !== height) {\n\t            _this.dispatchEvent(el);\n\t            width = newWidth;\n\t            return height = newHeight;\n\t          }\n\t        };\n\t      })(this), this.o.interval || 62.5);\n\t    };\n\n\t    Main.prototype.dispatchEvent = function(el) {\n\t      var e;\n\t      if (document.createEvent) {\n\t        e = document.createEvent('HTMLEvents');\n\t        e.initEvent('onresize', false, false);\n\t        return el.dispatchEvent(e);\n\t      } else if (document.createEventObject) {\n\t        e = document.createEventObject();\n\t        return el.fireEvent('onresize', e);\n\t      } else {\n\t        return false;\n\t      }\n\t    };\n\n\t    Main.prototype.destroy = function() {\n\t      var i, it, j, len, proto, ref, results;\n\t      clearInterval(this.interval);\n\t      this.interval = null;\n\t      window.isAnyResizeEventInited = false;\n\t      it = this;\n\t      ref = this.allowedProtos;\n\t      results = [];\n\t      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n\t        proto = ref[i];\n\t        if (proto.prototype == null) {\n\t          continue;\n\t        }\n\t        results.push((function(proto) {\n\t          var listener;\n\t          listener = proto.prototype.addEventListener || proto.prototype.attachEvent;\n\t          if (proto.prototype.addEventListener) {\n\t            proto.prototype.addEventListener = Element.prototype.addEventListener;\n\t          } else if (proto.prototype.attachEvent) {\n\t            proto.prototype.attachEvent = Element.prototype.attachEvent;\n\t          }\n\t          if (proto.prototype.removeEventListener) {\n\t            return proto.prototype.removeEventListener = Element.prototype.removeEventListener;\n\t          } else if (proto.prototype.detachEvent) {\n\t            return proto.prototype.detachEvent = Element.prototype.detachEvent;\n\t          }\n\t        })(proto));\n\t      }\n\t      return results;\n\t    };\n\n\t    return Main;\n\n\t  })();\n\t  if (true) {\n\t    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return new Main;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if ((typeof module === \"object\") && (typeof module.exports === \"object\")) {\n\t    return module.exports = new Main;\n\t  } else {\n\t    if (typeof window !== \"undefined\" && window !== null) {\n\t      window.AnyResizeEvent = Main;\n\t    }\n\t    return typeof window !== \"undefined\" && window !== null ? window.anyResizeEvent = new Main : void 0;\n\t  }\n\t})();\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Rect,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tRect = (function(superClass) {\n\t  extend(Rect, superClass);\n\n\t  function Rect() {\n\t    return Rect.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Rect.prototype._declareDefaults = function() {\n\t    Rect.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'rect';\n\t    this._defaults.rx = 0;\n\t    return this._defaults.ry = 0;\n\t  };\n\n\t  Rect.prototype._draw = function() {\n\t    var p, radiusX, radiusY;\n\t    Rect.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\t    this._setAttrIfChanged('width', 2 * radiusX);\n\t    this._setAttrIfChanged('height', 2 * radiusY);\n\t    this._setAttrIfChanged('x', (p.width / 2) - radiusX);\n\t    this._setAttrIfChanged('y', (p.height / 2) - radiusY);\n\t    this._setAttrIfChanged('rx', p.rx);\n\t    return this._setAttrIfChanged('ry', p.ry);\n\t  };\n\n\t  Rect.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * (2 * radiusX + 2 * radiusY);\n\t  };\n\n\t  return Rect;\n\n\t})(Bit);\n\n\tmodule.exports = Rect;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _bit = __webpack_require__(26);\n\n\tvar _bit2 = _interopRequireDefault(_bit);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Custom = function (_Bit) {\n\t  (0, _inherits3.default)(Custom, _Bit);\n\n\t  function Custom() {\n\t    (0, _classCallCheck3.default)(this, Custom);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Bit.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\t  Custom.prototype._declareDefaults = function _declareDefaults() {\n\t    _Bit.prototype._declareDefaults.call(this);\n\n\t    this._defaults.tag = 'path';\n\t    this._defaults.parent = null;\n\n\t    // remove `stroke-width` from `_drawMap`\n\t    // because we need to recal strokeWidth size regarding scale\n\t    for (var i = 0; i < this._drawMap.length; i++) {\n\t      if (this._drawMap[i] === 'stroke-width') {\n\t        this._drawMap.splice(i, 1);\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to get shape to set on module's path.\n\t    @public\n\t    @returns {String} Empty string.\n\t  */\n\n\n\t  Custom.prototype.getShape = function getShape() {\n\t    return '';\n\t  };\n\t  /*\n\t    Method to get shape perimeter length.\n\t    @public\n\t    @returns {Number} Default length string.\n\t  */\n\n\n\t  Custom.prototype.getLength = function getLength() {\n\t    return 100;\n\t  };\n\t  /*\n\t    Method to draw the shape.\n\t    Called on every frame.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Custom.prototype._draw = function _draw() {\n\t    var p = this._props,\n\t        state = this._state,\n\t        radiusXChange = state['radiusX'] !== p.radiusX,\n\t        radiusYChange = state['radiusY'] !== p.radiusY,\n\t        radiusChange = state['radius'] !== p.radius;\n\n\t    // update transform only if one of radiuses changed\n\t    if (radiusXChange || radiusYChange || radiusChange) {\n\t      this.el.setAttribute('transform', this._getScale());\n\t      state['radiusX'] = p.radiusX;\n\t      state['radiusY'] = p.radiusY;\n\t      state['radius'] = p.radius;\n\t    }\n\n\t    this._setAttrIfChanged('stroke-width', p['stroke-width'] / p.maxScale);\n\n\t    _Bit.prototype._draw.call(this);\n\t  };\n\t  /*\n\t    Method for initial render of the shape.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Custom.prototype._render = function _render() {\n\t    if (this._isRendered) {\n\t      return;\n\t    }\n\t    this._isRendered = true;\n\n\t    this._length = this.getLength();\n\n\t    var p = this._props;\n\t    p.parent.innerHTML = '<svg id=\"js-mojs-shape-canvas\" xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\"><g id=\"js-mojs-shape-el\">' + this.getShape() + '</g></svg>';\n\n\t    this._canvas = p.parent.querySelector('#js-mojs-shape-canvas');\n\t    this.el = p.parent.querySelector('#js-mojs-shape-el');\n\t    this._setCanvasSize();\n\t  };\n\t  /*\n\t    Method to get scales for the shape.\n\t    @private\n\t    @mutates @props\n\t  */\n\n\n\t  Custom.prototype._getScale = function _getScale() {\n\t    var p = this._props,\n\t        radiusX = p.radiusX ? p.radiusX : p.radius,\n\t        radiusY = p.radiusY ? p.radiusY : p.radius;\n\n\t    p.scaleX = 2 * radiusX / 100;\n\t    p.scaleY = 2 * radiusY / 100;\n\t    p.maxScale = Math.max(p.scaleX, p.scaleY);\n\n\t    p.shiftX = p.width / 2 - 50 * p.scaleX;\n\t    p.shiftY = p.height / 2 - 50 * p.scaleY;\n\n\t    var translate = 'translate(' + p.shiftX + ', ' + p.shiftY + ')';\n\t    return translate + ' scale(' + p.scaleX + ', ' + p.scaleY + ')';\n\t  };\n\t  /*\n\t    Method to length of the shape.\n\t    @private\n\t    @returns {Number} Length of the shape.\n\t  */\n\n\n\t  Custom.prototype._getLength = function _getLength() {\n\t    return this._length;\n\t  };\n\n\t  return Custom;\n\t}(_bit2.default);\n\n\texports.default = Custom;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Circle,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tCircle = (function(superClass) {\n\t  extend(Circle, superClass);\n\n\t  function Circle() {\n\t    return Circle.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Circle.prototype._declareDefaults = function() {\n\t    Circle.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.shape = 'ellipse';\n\t  };\n\n\t  Circle.prototype._draw = function() {\n\t    var rx, ry;\n\t    rx = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    ry = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    this._setAttrIfChanged('rx', rx);\n\t    this._setAttrIfChanged('ry', ry);\n\t    this._setAttrIfChanged('cx', this._props.width / 2);\n\t    this._setAttrIfChanged('cy', this._props.height / 2);\n\t    return Circle.__super__._draw.apply(this, arguments);\n\t  };\n\n\t  Circle.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * Math.PI * Math.sqrt((radiusX * radiusX + radiusY * radiusY) / 2);\n\t  };\n\n\t  return Circle;\n\n\t})(Bit);\n\n\tmodule.exports = Circle;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Line,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tLine = (function(superClass) {\n\t  extend(Line, superClass);\n\n\t  function Line() {\n\t    return Line.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Line.prototype._declareDefaults = function() {\n\t    Line.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.tag = 'line';\n\t  };\n\n\t  Line.prototype._draw = function() {\n\t    var radiusX, x, y;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    this._setAttrIfChanged('x1', x - radiusX);\n\t    this._setAttrIfChanged('x2', x + radiusX);\n\t    this._setAttrIfChanged('y1', y);\n\t    this._setAttrIfChanged('y2', y);\n\t    return Line.__super__._draw.apply(this, arguments);\n\t  };\n\n\t  return Line;\n\n\t})(Bit);\n\n\tmodule.exports = Line;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Zigzag,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tZigzag = (function(superClass) {\n\t  extend(Zigzag, superClass);\n\n\t  function Zigzag() {\n\t    return Zigzag.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Zigzag.prototype._declareDefaults = function() {\n\t    Zigzag.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 3;\n\t  };\n\n\t  Zigzag.prototype._draw = function() {\n\t    var currentX, currentY, delta, i, isPoints, isRadiusX, isRadiusY, j, length, p, points, radiusX, radiusY, ref, stepX, x, y, yFlip;\n\t    Zigzag.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    if (!this._props.points) {\n\t      return;\n\t    }\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\t    x = p.width / 2;\n\t    y = p.height / 2;\n\t    currentX = x - radiusX;\n\t    currentY = y;\n\t    stepX = (2 * radiusX) / (p.points - 1);\n\t    yFlip = -1;\n\t    delta = Math.sqrt(stepX * stepX + radiusY * radiusY);\n\t    length = -delta;\n\t    points = \"M\" + currentX + \", \" + y + \" \";\n\t    for (i = j = 0, ref = p.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t      points += \"L\" + currentX + \", \" + currentY + \" \";\n\t      currentX += stepX;\n\t      length += delta;\n\t      currentY = yFlip === -1 ? y - radiusY : y;\n\t      yFlip = -yFlip;\n\t    }\n\t    this._length = length;\n\t    this.el.setAttribute('d', points);\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Zigzag.prototype._getLength = function() {\n\t    return this._length;\n\t  };\n\n\t  return Zigzag;\n\n\t})(Bit);\n\n\tmodule.exports = Zigzag;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Polygon, h,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\th = __webpack_require__(19);\n\n\tPolygon = (function(superClass) {\n\t  extend(Polygon, superClass);\n\n\t  function Polygon() {\n\t    return Polygon.__super__.constructor.apply(this, arguments);\n\t  }\n\n\n\t  /*\n\t    Method to declare defaults.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._declareDefaults = function() {\n\t    Polygon.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 3;\n\t  };\n\n\n\t  /*\n\t    Method to draw the shape.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._draw = function() {\n\t    var char, d, i, isPoints, isRadiusX, isRadiusY, j, k, len, p, point, radiusX, radiusY, ref, ref1, step;\n\t    p = this._props;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (!(isRadiusX && isRadiusY && isPoints)) {\n\t      step = 360 / this._props.points;\n\t      if (this._radialPoints == null) {\n\t        this._radialPoints = [];\n\t      } else {\n\t        this._radialPoints.length = 0;\n\t      }\n\t      for (i = j = 0, ref = this._props.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t        this._radialPoints.push(h.getRadialPoint({\n\t          radius: this._props.radius,\n\t          radiusX: this._props.radiusX,\n\t          radiusY: this._props.radiusY,\n\t          angle: i * step,\n\t          center: {\n\t            x: p.width / 2,\n\t            y: p.height / 2\n\t          }\n\t        }));\n\t      }\n\t      d = '';\n\t      ref1 = this._radialPoints;\n\t      for (i = k = 0, len = ref1.length; k < len; i = ++k) {\n\t        point = ref1[i];\n\t        char = i === 0 ? 'M' : 'L';\n\t        d += \"\" + char + (point.x.toFixed(4)) + \",\" + (point.y.toFixed(4)) + \" \";\n\t      }\n\t      this._prevPoints = p.points;\n\t      this._prevRadiusX = radiusX;\n\t      this._prevRadiusY = radiusY;\n\t      this.el.setAttribute('d', (d += 'z'));\n\t    }\n\t    return Polygon.__super__._draw.apply(this, arguments);\n\t  };\n\n\n\t  /*\n\t    Method to get length of the shape.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._getLength = function() {\n\t    return this._getPointsPerimiter(this._radialPoints);\n\t  };\n\n\t  return Polygon;\n\n\t})(Bit);\n\n\tmodule.exports = Polygon;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Cross,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tCross = (function(superClass) {\n\t  extend(Cross, superClass);\n\n\t  function Cross() {\n\t    return Cross.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Cross.prototype._declareDefaults = function() {\n\t    Cross.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.tag = 'path';\n\t  };\n\n\t  Cross.prototype._draw = function() {\n\t    var d, isRadiusX, isRadiusY, line1, line2, p, radiusX, radiusY, x, x1, x2, y, y1, y2;\n\t    Cross.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    if (isRadiusX && isRadiusY) {\n\t      return;\n\t    }\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    x1 = x - radiusX;\n\t    x2 = x + radiusX;\n\t    line1 = \"M\" + x1 + \",\" + y + \" L\" + x2 + \",\" + y;\n\t    y1 = y - radiusY;\n\t    y2 = y + radiusY;\n\t    line2 = \"M\" + x + \",\" + y1 + \" L\" + x + \",\" + y2;\n\t    d = line1 + \" \" + line2;\n\t    this.el.setAttribute('d', d);\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Cross.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * (radiusX + radiusY);\n\t  };\n\n\t  return Cross;\n\n\t})(Bit);\n\n\tmodule.exports = Cross;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(23);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(24);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(25);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _bit = __webpack_require__(26);\n\n\tvar _bit2 = _interopRequireDefault(_bit);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Curve = function (_Bit) {\n\t  (0, _inherits3.default)(Curve, _Bit);\n\n\t  function Curve() {\n\t    (0, _classCallCheck3.default)(this, Curve);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Bit.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\t  Curve.prototype._declareDefaults = function _declareDefaults() {\n\t    _Bit.prototype._declareDefaults.call(this);\n\t    this._defaults.tag = 'path';\n\t  };\n\t  /*\n\t    Method to draw the module.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Curve.prototype._draw = function _draw() {\n\t    _Bit.prototype._draw.call(this);\n\t    var p = this._props;\n\n\t    var radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    var radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\n\t    var isRadiusX = radiusX === this._prevRadiusX;\n\t    var isRadiusY = radiusY === this._prevRadiusY;\n\t    var isPoints = p.points === this._prevPoints;\n\t    // skip if nothing changed\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\n\t    var x = p.width / 2;\n\t    var y = p.height / 2;\n\t    var x1 = x - radiusX;\n\t    var x2 = x + radiusX;\n\n\t    var d = 'M' + x1 + ' ' + y + ' Q ' + x + ' ' + (y - 2 * radiusY) + ' ' + x2 + ' ' + y;\n\n\t    // set the `d` attribute and save it to `_prevD`\n\t    this.el.setAttribute('d', d);\n\t    // save the properties\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    this._prevRadiusY = radiusY;\n\t  };\n\n\t  Curve.prototype._getLength = function _getLength() {\n\t    var p = this._props;\n\n\t    var radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    var radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\n\t    var dRadius = radiusX + radiusY;\n\t    var sqrt = Math.sqrt((3 * radiusX + radiusY) * (radiusX + 3 * radiusY));\n\n\t    return .5 * Math.PI * (3 * dRadius - sqrt);\n\t  };\n\n\t  return Curve;\n\t}(_bit2.default); // istanbul ignore next\n\n\n\texports.default = Curve;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Equal,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(26)[\"default\"] || __webpack_require__(26);\n\n\tEqual = (function(superClass) {\n\t  extend(Equal, superClass);\n\n\t  function Equal() {\n\t    return Equal.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Equal.prototype._declareDefaults = function() {\n\t    Equal.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 2;\n\t  };\n\n\t  Equal.prototype._draw = function() {\n\t    var d, i, isPoints, isRadiusX, isRadiusY, j, p, radiusX, radiusY, ref, x, x1, x2, y, yStart, yStep;\n\t    Equal.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    if (!this._props.points) {\n\t      return;\n\t    }\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    x1 = x - radiusX;\n\t    x2 = x + radiusX;\n\t    d = '';\n\t    yStep = 2 * radiusY / (this._props.points - 1);\n\t    yStart = y - radiusY;\n\t    for (i = j = 0, ref = this._props.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t      y = \"\" + (i * yStep + yStart);\n\t      d += \"M\" + x1 + \", \" + y + \" L\" + x2 + \", \" + y + \" \";\n\t    }\n\t    this.el.setAttribute('d', d);\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Equal.prototype._getLength = function() {\n\t    return 2 * (this._props.radiusX != null ? this._props.radiusX : this._props.radius);\n\t  };\n\n\t  return Equal;\n\n\t})(Bit);\n\n\tmodule.exports = Equal;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var BezierEasing, bezierEasing, h,\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n\th = __webpack_require__(19);\n\n\n\t/**\n\t * Copyright (c) 2014 Gaëtan Renaudeau http://goo.gl/El3k7u\n\t * Adopted from https://github.com/gre/bezier-easing\n\t */\n\n\tBezierEasing = (function() {\n\t  function BezierEasing(o) {\n\t    this.vars();\n\t    return this.generate;\n\t  }\n\n\t  BezierEasing.prototype.vars = function() {\n\t    return this.generate = h.bind(this.generate, this);\n\t  };\n\n\t  BezierEasing.prototype.generate = function(mX1, mY1, mX2, mY2) {\n\t    var A, B, C, NEWTON_ITERATIONS, NEWTON_MIN_SLOPE, SUBDIVISION_MAX_ITERATIONS, SUBDIVISION_PRECISION, _precomputed, arg, binarySubdivide, calcBezier, calcSampleValues, f, float32ArraySupported, getSlope, getTForX, i, j, kSampleStepSize, kSplineTableSize, mSampleValues, newtonRaphsonIterate, precompute, str;\n\t    if (arguments.length < 4) {\n\t      return this.error('Bezier function expects 4 arguments');\n\t    }\n\t    for (i = j = 0; j < 4; i = ++j) {\n\t      arg = arguments[i];\n\t      if (typeof arg !== \"number\" || isNaN(arg) || !isFinite(arg)) {\n\t        return this.error('Bezier function expects 4 arguments');\n\t      }\n\t    }\n\t    if (mX1 < 0 || mX1 > 1 || mX2 < 0 || mX2 > 1) {\n\t      return this.error('Bezier x values should be > 0 and < 1');\n\t    }\n\t    NEWTON_ITERATIONS = 4;\n\t    NEWTON_MIN_SLOPE = 0.001;\n\t    SUBDIVISION_PRECISION = 0.0000001;\n\t    SUBDIVISION_MAX_ITERATIONS = 10;\n\t    kSplineTableSize = 11;\n\t    kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\t    float32ArraySupported = indexOf.call(global, 'Float32Array') >= 0;\n\t    A = function(aA1, aA2) {\n\t      return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n\t    };\n\t    B = function(aA1, aA2) {\n\t      return 3.0 * aA2 - 6.0 * aA1;\n\t    };\n\t    C = function(aA1) {\n\t      return 3.0 * aA1;\n\t    };\n\t    calcBezier = function(aT, aA1, aA2) {\n\t      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n\t    };\n\t    getSlope = function(aT, aA1, aA2) {\n\t      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n\t    };\n\t    newtonRaphsonIterate = function(aX, aGuessT) {\n\t      var currentSlope, currentX;\n\t      i = 0;\n\t      while (i < NEWTON_ITERATIONS) {\n\t        currentSlope = getSlope(aGuessT, mX1, mX2);\n\n\t        /* istanbul ignore if */\n\t        if (currentSlope === 0.0) {\n\t          return aGuessT;\n\t        }\n\t        currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n\t        aGuessT -= currentX / currentSlope;\n\t        ++i;\n\t      }\n\t      return aGuessT;\n\t    };\n\t    calcSampleValues = function() {\n\t      i = 0;\n\t      while (i < kSplineTableSize) {\n\t        mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n\t        ++i;\n\t      }\n\t    };\n\n\t    /* istanbul ignore next */\n\t    binarySubdivide = function(aX, aA, aB) {\n\t      var currentT, currentX, isBig;\n\t      currentX = void 0;\n\t      currentT = void 0;\n\t      i = 0;\n\t      while (true) {\n\t        currentT = aA + (aB - aA) / 2.0;\n\t        currentX = calcBezier(currentT, mX1, mX2) - aX;\n\t        if (currentX > 0.0) {\n\t          aB = currentT;\n\t        } else {\n\t          aA = currentT;\n\t        }\n\t        isBig = Math.abs(currentX) > SUBDIVISION_PRECISION;\n\t        if (!(isBig && ++i < SUBDIVISION_MAX_ITERATIONS)) {\n\t          break;\n\t        }\n\t      }\n\t      return currentT;\n\t    };\n\t    getTForX = function(aX) {\n\t      var currentSample, delta, dist, guessForT, initialSlope, intervalStart, lastSample;\n\t      intervalStart = 0.0;\n\t      currentSample = 1;\n\t      lastSample = kSplineTableSize - 1;\n\t      while (currentSample !== lastSample && mSampleValues[currentSample] <= aX) {\n\t        intervalStart += kSampleStepSize;\n\t        ++currentSample;\n\t      }\n\t      --currentSample;\n\t      delta = mSampleValues[currentSample + 1] - mSampleValues[currentSample];\n\t      dist = (aX - mSampleValues[currentSample]) / delta;\n\t      guessForT = intervalStart + dist * kSampleStepSize;\n\t      initialSlope = getSlope(guessForT, mX1, mX2);\n\t      if (initialSlope >= NEWTON_MIN_SLOPE) {\n\t        return newtonRaphsonIterate(aX, guessForT);\n\t      } else {\n\n\t        /* istanbul ignore next */\n\t        if (initialSlope === 0.0) {\n\t          return guessForT;\n\t        } else {\n\t          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n\t        }\n\t      }\n\t    };\n\t    precompute = function() {\n\t      var _precomputed;\n\t      _precomputed = true;\n\t      if (mX1 !== mY1 || mX2 !== mY2) {\n\t        return calcSampleValues();\n\t      }\n\t    };\n\t    mSampleValues = !float32ArraySupported ? new Array(kSplineTableSize) : new Float32Array(kSplineTableSize);\n\t    _precomputed = false;\n\t    f = function(aX) {\n\t      if (!_precomputed) {\n\t        precompute();\n\t      }\n\t      if (mX1 === mY1 && mX2 === mY2) {\n\t        return aX;\n\t      }\n\t      if (aX === 0) {\n\t        return 0;\n\t      }\n\t      if (aX === 1) {\n\t        return 1;\n\t      }\n\t      return calcBezier(getTForX(aX), mY1, mY2);\n\t    };\n\t    str = \"bezier(\" + [mX1, mY1, mX2, mY2] + \")\";\n\t    f.toStr = function() {\n\t      return str;\n\t    };\n\t    return f;\n\t  };\n\n\t  BezierEasing.prototype.error = function(msg) {\n\t    return h.error(msg);\n\t  };\n\n\t  return BezierEasing;\n\n\t})();\n\n\tbezierEasing = new BezierEasing;\n\n\tmodule.exports = bezierEasing;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar PathEasing, h;\n\n\th = __webpack_require__(19);\n\n\tPathEasing = (function() {\n\t  PathEasing.prototype._vars = function() {\n\t    this._precompute = h.clamp(this.o.precompute || 1450, 100, 10000);\n\t    this._step = 1 / this._precompute;\n\t    this._rect = this.o.rect || 100;\n\t    this._approximateMax = this.o.approximateMax || 5;\n\t    this._eps = this.o.eps || 0.001;\n\t    return this._boundsPrevProgress = -1;\n\t  };\n\n\t  function PathEasing(path, o1) {\n\t    this.o = o1 != null ? o1 : {};\n\t    if (path === 'creator') {\n\t      return;\n\t    }\n\t    this.path = h.parsePath(path);\n\t    if (this.path == null) {\n\t      return h.error('Error while parsing the path');\n\t    }\n\t    this._vars();\n\t    this.path.setAttribute('d', this._normalizePath(this.path.getAttribute('d')));\n\t    this.pathLength = this.path.getTotalLength();\n\t    this.sample = h.bind(this.sample, this);\n\t    this._hardSample = h.bind(this._hardSample, this);\n\t    this._preSample();\n\t    this;\n\t  }\n\n\t  PathEasing.prototype._preSample = function() {\n\t    var i, j, length, point, progress, ref, results;\n\t    this._samples = [];\n\t    results = [];\n\t    for (i = j = 0, ref = this._precompute; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n\t      progress = i * this._step;\n\t      length = this.pathLength * progress;\n\t      point = this.path.getPointAtLength(length);\n\t      results.push(this._samples[i] = {\n\t        point: point,\n\t        length: length,\n\t        progress: progress\n\t      });\n\t    }\n\t    return results;\n\t  };\n\n\t  PathEasing.prototype._findBounds = function(array, p) {\n\t    var buffer, direction, end, i, j, len, loopEnd, pointP, pointX, ref, ref1, start, value;\n\t    if (p === this._boundsPrevProgress) {\n\t      return this._prevBounds;\n\t    }\n\t    if (this._boundsStartIndex == null) {\n\t      this._boundsStartIndex = 0;\n\t    }\n\t    len = array.length;\n\t    if (this._boundsPrevProgress > p) {\n\t      loopEnd = 0;\n\t      direction = 'reverse';\n\t    } else {\n\t      loopEnd = len;\n\t      direction = 'forward';\n\t    }\n\t    if (direction === 'forward') {\n\t      start = array[0];\n\t      end = array[array.length - 1];\n\t    } else {\n\t      start = array[array.length - 1];\n\t      end = array[0];\n\t    }\n\t    for (i = j = ref = this._boundsStartIndex, ref1 = loopEnd; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n\t      value = array[i];\n\t      pointX = value.point.x / this._rect;\n\t      pointP = p;\n\t      if (direction === 'reverse') {\n\t        buffer = pointX;\n\t        pointX = pointP;\n\t        pointP = buffer;\n\t      }\n\t      if (pointX < pointP) {\n\t        start = value;\n\t        this._boundsStartIndex = i;\n\t      } else {\n\t        end = value;\n\t        break;\n\t      }\n\t    }\n\t    this._boundsPrevProgress = p;\n\t    return this._prevBounds = {\n\t      start: start,\n\t      end: end\n\t    };\n\t  };\n\n\t  PathEasing.prototype.sample = function(p) {\n\t    var bounds, res;\n\t    p = h.clamp(p, 0, 1);\n\t    bounds = this._findBounds(this._samples, p);\n\t    res = this._checkIfBoundsCloseEnough(p, bounds);\n\t    if (res != null) {\n\t      return res;\n\t    }\n\t    return this._findApproximate(p, bounds.start, bounds.end);\n\t  };\n\n\t  PathEasing.prototype._checkIfBoundsCloseEnough = function(p, bounds) {\n\t    var point, y;\n\t    point = void 0;\n\t    y = this._checkIfPointCloseEnough(p, bounds.start.point);\n\t    if (y != null) {\n\t      return y;\n\t    }\n\t    return this._checkIfPointCloseEnough(p, bounds.end.point);\n\t  };\n\n\t  PathEasing.prototype._checkIfPointCloseEnough = function(p, point) {\n\t    if (h.closeEnough(p, point.x / this._rect, this._eps)) {\n\t      return this._resolveY(point);\n\t    }\n\t  };\n\n\t  PathEasing.prototype._approximate = function(start, end, p) {\n\t    var deltaP, percentP;\n\t    deltaP = end.point.x - start.point.x;\n\t    percentP = (p - (start.point.x / this._rect)) / (deltaP / this._rect);\n\t    return start.length + percentP * (end.length - start.length);\n\t  };\n\n\t  PathEasing.prototype._findApproximate = function(p, start, end, approximateMax) {\n\t    var approximation, args, newPoint, point, x;\n\t    if (approximateMax == null) {\n\t      approximateMax = this._approximateMax;\n\t    }\n\t    approximation = this._approximate(start, end, p);\n\t    point = this.path.getPointAtLength(approximation);\n\t    x = point.x / this._rect;\n\t    if (h.closeEnough(p, x, this._eps)) {\n\t      return this._resolveY(point);\n\t    } else {\n\t      if (--approximateMax < 1) {\n\t        return this._resolveY(point);\n\t      }\n\t      newPoint = {\n\t        point: point,\n\t        length: approximation\n\t      };\n\t      args = p < x ? [p, start, newPoint, approximateMax] : [p, newPoint, end, approximateMax];\n\t      return this._findApproximate.apply(this, args);\n\t    }\n\t  };\n\n\t  PathEasing.prototype._resolveY = function(point) {\n\t    return 1 - (point.y / this._rect);\n\t  };\n\n\t  PathEasing.prototype._normalizePath = function(path) {\n\t    var commands, endIndex, normalizedPath, points, startIndex, svgCommandsRegexp;\n\t    svgCommandsRegexp = /[M|L|H|V|C|S|Q|T|A]/gim;\n\t    points = path.split(svgCommandsRegexp);\n\t    points.shift();\n\t    commands = path.match(svgCommandsRegexp);\n\t    startIndex = 0;\n\t    points[startIndex] = this._normalizeSegment(points[startIndex]);\n\t    endIndex = points.length - 1;\n\t    points[endIndex] = this._normalizeSegment(points[endIndex], this._rect || 100);\n\t    return normalizedPath = this._joinNormalizedPath(commands, points);\n\t  };\n\n\t  PathEasing.prototype._joinNormalizedPath = function(commands, points) {\n\t    var command, i, j, len1, normalizedPath, space;\n\t    normalizedPath = '';\n\t    for (i = j = 0, len1 = commands.length; j < len1; i = ++j) {\n\t      command = commands[i];\n\t      space = i === 0 ? '' : ' ';\n\t      normalizedPath += \"\" + space + command + (points[i].trim());\n\t    }\n\t    return normalizedPath;\n\t  };\n\n\t  PathEasing.prototype._normalizeSegment = function(segment, value) {\n\t    var i, j, lastPoint, len1, nRgx, pairs, parsedX, point, space, x;\n\t    if (value == null) {\n\t      value = 0;\n\t    }\n\t    segment = segment.trim();\n\t    nRgx = /(-|\\+)?((\\d+(\\.(\\d|\\e(-|\\+)?)+)?)|(\\.?(\\d|\\e|(\\-|\\+))+))/gim;\n\t    pairs = this._getSegmentPairs(segment.match(nRgx));\n\t    lastPoint = pairs[pairs.length - 1];\n\t    x = lastPoint[0];\n\t    parsedX = Number(x);\n\t    if (parsedX !== value) {\n\t      segment = '';\n\t      lastPoint[0] = value;\n\t      for (i = j = 0, len1 = pairs.length; j < len1; i = ++j) {\n\t        point = pairs[i];\n\t        space = i === 0 ? '' : ' ';\n\t        segment += \"\" + space + point[0] + \",\" + point[1];\n\t      }\n\t    }\n\t    return segment;\n\t  };\n\n\t  PathEasing.prototype._getSegmentPairs = function(array) {\n\t    var i, j, len1, newArray, pair, value;\n\t    if (array.length % 2 !== 0) {\n\t      h.error('Failed to parse the path - segment pairs are not even.', array);\n\t    }\n\t    newArray = [];\n\t    for (i = j = 0, len1 = array.length; j < len1; i = j += 2) {\n\t      value = array[i];\n\t      pair = [array[i], array[i + 1]];\n\t      newArray.push(pair);\n\t    }\n\t    return newArray;\n\t  };\n\n\t  PathEasing.prototype.create = function(path, o) {\n\t    var handler;\n\t    handler = new PathEasing(path, o);\n\t    handler.sample.path = handler.path;\n\t    return handler.sample;\n\t  };\n\n\t  return PathEasing;\n\n\t})();\n\n\tmodule.exports = PathEasing;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar create, easing, getNearest, mix, parseIfEasing, sort,\n\t  slice = [].slice;\n\n\teasing = null;\n\n\tparseIfEasing = function(item) {\n\t  if (typeof item.value === 'number') {\n\t    return item.value;\n\t  } else {\n\t    return easing.parseEasing(item.value);\n\t  }\n\t};\n\n\tsort = function(a, b) {\n\t  var returnValue;\n\t  a.value = parseIfEasing(a);\n\t  b.value = parseIfEasing(b);\n\t  returnValue = 0;\n\t  a.to < b.to && (returnValue = -1);\n\t  a.to > b.to && (returnValue = 1);\n\t  return returnValue;\n\t};\n\n\tgetNearest = function(array, progress) {\n\t  var i, index, j, len, value;\n\t  index = 0;\n\t  for (i = j = 0, len = array.length; j < len; i = ++j) {\n\t    value = array[i];\n\t    index = i;\n\t    if (value.to > progress) {\n\t      break;\n\t    }\n\t  }\n\t  return index;\n\t};\n\n\tmix = function() {\n\t  var args;\n\t  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n\t  if (args.length > 1) {\n\t    args = args.sort(sort);\n\t  } else {\n\t    args[0].value = parseIfEasing(args[0]);\n\t  }\n\t  return function(progress) {\n\t    var index, value;\n\t    index = getNearest(args, progress);\n\t    if (index !== -1) {\n\t      value = args[index].value;\n\t      if (index === args.length - 1 && progress > args[index].to) {\n\t        return 1;\n\t      }\n\t      if (typeof value === 'function') {\n\t        return value(progress);\n\t      } else {\n\t        return value;\n\t      }\n\t    }\n\t  };\n\t};\n\n\tcreate = function(e) {\n\t  easing = e;\n\t  return mix;\n\t};\n\n\tmodule.exports = create;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Method to bootstrap approximation function.\n\t  @private\n\t  @param   {Object} Samples Object.\n\t  @returns {Function} Approximate function.\n\t*/\n\tvar _proximate = function _proximate(samples) {\n\t  var n = samples.base,\n\t      samplesAmount = Math.pow(10, n),\n\t      samplesStep = 1 / samplesAmount;\n\n\t  function RoundNumber(input, numberDecimals) {\n\t    numberDecimals = +numberDecimals || 0; // +var magic!\n\n\t    var multiplyer = Math.pow(10.0, numberDecimals);\n\n\t    return Math.round(input * multiplyer) / multiplyer;\n\t  }\n\n\t  var cached = function cached(p) {\n\t    var newKey = RoundNumber(p, n),\n\t        sample = samples[newKey.toString()];\n\n\t    if (Math.abs(p - newKey) < samplesStep) {\n\t      return sample;\n\t    }\n\n\t    if (p > newKey) {\n\t      var nextIndex = newKey + samplesStep;\n\t      var nextValue = samples[nextIndex];\n\t    } else {\n\t      var nextIndex = newKey - samplesStep;\n\t      var nextValue = samples[nextIndex];\n\t    }\n\n\t    var dLength = nextIndex - newKey;\n\t    var dValue = nextValue - sample;\n\t    if (dValue < samplesStep) {\n\t      return sample;\n\t    }\n\n\t    var progressScale = (p - newKey) / dLength;\n\t    var coef = nextValue > sample ? -1 : 1;\n\t    var scaledDifference = coef * progressScale * dValue;\n\n\t    return sample + scaledDifference;\n\t  };\n\n\t  cached.getSamples = function () {\n\t    return samples;\n\t  };\n\n\t  return cached;\n\t};\n\t/*\n\t    Method to take samples of the function and call the _proximate\n\t    method with the dunction and samples. Or if samples passed - pipe\n\t    them to the _proximate method without sampling.\n\t    @private\n\t    @param {Function} Function to sample.\n\t    @param {Number, Object, String} Precision or precomputed samples.\n\t  */\n\tvar _sample = function _sample(fn) {\n\t  var n = arguments.length <= 1 || arguments[1] === undefined ? 4 : arguments[1];\n\n\n\t  var nType = typeof n === 'undefined' ? 'undefined' : (0, _typeof3.default)(n);\n\n\t  var samples = {};\n\t  if (nType === 'number') {\n\t    var p = 0,\n\t        samplesCount = Math.pow(10, n),\n\t        step = 1 / samplesCount;\n\n\t    samples[0] = fn(0);\n\t    for (var i = 0; i < samplesCount - 1; i++) {\n\t      p += step;\n\n\t      var index = parseFloat(p.toFixed(n));\n\t      samples[index] = fn(p);\n\t    }\n\t    samples[1] = fn(1);\n\n\t    samples.base = n;\n\t  } else if (nType === 'object') {\n\t    samples = n;\n\t  } else if (nType === 'string') {\n\t    samples = JSON.parse(n);\n\t  }\n\n\t  return Approximate._sample._proximate(samples);\n\t};\n\n\tvar Approximate = { _sample: _sample, _proximate: _proximate };\n\tApproximate._sample._proximate = Approximate._proximate;\n\n\texports.default = Approximate._sample;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(55), __esModule: true };\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(56), __esModule: true };\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(57), __esModule: true };\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(58);\n\t__webpack_require__(59);\n\tmodule.exports = __webpack_require__(60);\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(67);\n\tmodule.exports = __webpack_require__(64).Object.keys;\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(18);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _h = __webpack_require__(19);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _shapesMap = __webpack_require__(20);\n\n\tvar _shapesMap2 = _interopRequireDefault(_shapesMap);\n\n\tvar _shape = __webpack_require__(2);\n\n\tvar _shape2 = _interopRequireDefault(_shape);\n\n\tvar _shapeSwirl = __webpack_require__(3);\n\n\tvar _shapeSwirl2 = _interopRequireDefault(_shapeSwirl);\n\n\tvar _burst = __webpack_require__(4);\n\n\tvar _burst2 = _interopRequireDefault(_burst);\n\n\tvar _html = __webpack_require__(5);\n\n\tvar _html2 = _interopRequireDefault(_html);\n\n\tvar _stagger = __webpack_require__(6);\n\n\tvar _stagger2 = _interopRequireDefault(_stagger);\n\n\tvar _spriter = __webpack_require__(7);\n\n\tvar _spriter2 = _interopRequireDefault(_spriter);\n\n\tvar _motionPath = __webpack_require__(21);\n\n\tvar _motionPath2 = _interopRequireDefault(_motionPath);\n\n\tvar _tween = __webpack_require__(8);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(9);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tweener = __webpack_require__(10);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _tweenable = __webpack_require__(11);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _thenable = __webpack_require__(12);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tunable = __webpack_require__(13);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _delta = __webpack_require__(14);\n\n\tvar _delta2 = _interopRequireDefault(_delta);\n\n\tvar _deltas = __webpack_require__(15);\n\n\tvar _deltas2 = _interopRequireDefault(_deltas);\n\n\tvar _module = __webpack_require__(16);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _easing = __webpack_require__(22);\n\n\tvar _easing2 = _interopRequireDefault(_easing);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar mojs = {\n\t  revision: '0.288.1', isDebug: true, helpers: _h2.default,\n\t  Shape: _shape2.default, ShapeSwirl: _shapeSwirl2.default, Burst: _burst2.default, Html: _html2.default, stagger: _stagger2.default, Spriter: _spriter2.default, MotionPath: _motionPath2.default,\n\t  Tween: _tween2.default, Timeline: _timeline2.default, Tweenable: _tweenable2.default, Thenable: _thenable2.default, Tunable: _tunable2.default, Module: _module2.default,\n\t  tweener: _tweener2.default, easing: _easing2.default, shapesMap: _shapesMap2.default, _pool: { Delta: _delta2.default, Deltas: _deltas2.default }\n\t};\n\n\t// functions alias\n\tmojs.h = mojs.helpers;\n\tmojs.delta = mojs.h.delta;\n\t// custom shape add function and class\n\tmojs.addShape = mojs.shapesMap.addShape;\n\tmojs.CustomShape = mojs.shapesMap.custom;\n\t// module alias\n\tmojs.Transit = mojs.Shape;\n\tmojs.Swirl = mojs.ShapeSwirl;\n\n\t// TODO:\n\t/*\n\t  H/V in paths\n\n\t  rand for direction\n\t  burst children angle after tune\n\t  burst pathScale after tune\n\t  swirl then issue\n\t  'rand' angle flick with `then`\n\t  not able to `play()` in `onComplete` callback\n\t  ---\n\t  module names\n\t  swirls in then chains for x/y\n\t  parse rand(stagger(20, 10), 20) values\n\t  percentage for radius\n\n\t  issue:\n\t    const shape = new mojs.Shape({\n\t      scale: { 0: 1 },\n\t      duration: 1000\n\t    })\n\t    .then({ scale: 0 })\n\t    .then({ scale: 1, onComplete () { this.pause(); } })\n\t    .then({ scale: 0 })\n\t    .then({ scale: 1 })\n\t    ;\n\n\t    document.addEventListener('click', () => {\n\t      shape\n\t        .tune({ fill: 'cyan' })\n\t        .play();\n\t    });\n\t*/\n\n\t// istanbul ignore next\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return mojs;\n\t  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// istanbul ignore next\n\tif ((false ? 'undefined' : (0, _typeof3.default)(module)) === \"object\" && (0, _typeof3.default)(module.exports) === \"object\") {\n\t  module.exports = mojs;\n\t}\n\n\texports.default = mojs;\n\n\n\ttypeof window !== 'undefined' && (window.mojs = mojs);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)(module)))\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(62);\n\t__webpack_require__(63);\n\tmodule.exports = __webpack_require__(64).Symbol;\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(65);\n\tmodule.exports = __webpack_require__(64).Object.setPrototypeOf;\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $ = __webpack_require__(66);\n\tmodule.exports = function create(P, D){\n\t  return $.create(P, D);\n\t};\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(68);\n\tmodule.exports = __webpack_require__(64).Object.assign;\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(69);\n\tvar Iterators = __webpack_require__(70);\n\tIterators.NodeList = Iterators.HTMLCollection = Iterators.Array;\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar $at  = __webpack_require__(71)(true);\n\n\t// 21.1.3.27 String.prototype[@@iterator]()\n\t__webpack_require__(72)(String, 'String', function(iterated){\n\t  this._t = String(iterated); // target\n\t  this._i = 0;                // next index\n\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , index = this._i\n\t    , point;\n\t  if(index >= O.length)return {value: undefined, done: true};\n\t  point = $at(O, index);\n\t  this._i += point.length;\n\t  return {value: point, done: false};\n\t});\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar anObject = __webpack_require__(73)\n\t  , get      = __webpack_require__(74);\n\tmodule.exports = __webpack_require__(64).getIterator = function(it){\n\t  var iterFn = get(it);\n\t  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n\t  return anObject(iterFn.call(it));\n\t};\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar store  = __webpack_require__(75)('wks')\n\t  , uid    = __webpack_require__(76)\n\t  , Symbol = __webpack_require__(77).Symbol;\n\tmodule.exports = function(name){\n\t  return store[name] || (store[name] =\n\t    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));\n\t};\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// ECMAScript 6 symbols shim\n\tvar $              = __webpack_require__(66)\n\t  , global         = __webpack_require__(77)\n\t  , has            = __webpack_require__(78)\n\t  , DESCRIPTORS    = __webpack_require__(79)\n\t  , $export        = __webpack_require__(80)\n\t  , redefine       = __webpack_require__(81)\n\t  , $fails         = __webpack_require__(82)\n\t  , shared         = __webpack_require__(75)\n\t  , setToStringTag = __webpack_require__(83)\n\t  , uid            = __webpack_require__(76)\n\t  , wks            = __webpack_require__(61)\n\t  , keyOf          = __webpack_require__(84)\n\t  , $names         = __webpack_require__(85)\n\t  , enumKeys       = __webpack_require__(86)\n\t  , isArray        = __webpack_require__(87)\n\t  , anObject       = __webpack_require__(73)\n\t  , toIObject      = __webpack_require__(88)\n\t  , createDesc     = __webpack_require__(89)\n\t  , getDesc        = $.getDesc\n\t  , setDesc        = $.setDesc\n\t  , _create        = $.create\n\t  , getNames       = $names.get\n\t  , $Symbol        = global.Symbol\n\t  , $JSON          = global.JSON\n\t  , _stringify     = $JSON && $JSON.stringify\n\t  , setter         = false\n\t  , HIDDEN         = wks('_hidden')\n\t  , isEnum         = $.isEnum\n\t  , SymbolRegistry = shared('symbol-registry')\n\t  , AllSymbols     = shared('symbols')\n\t  , useNative      = typeof $Symbol == 'function'\n\t  , ObjectProto    = Object.prototype;\n\n\t// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n\tvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n\t  return _create(setDesc({}, 'a', {\n\t    get: function(){ return setDesc(this, 'a', {value: 7}).a; }\n\t  })).a != 7;\n\t}) ? function(it, key, D){\n\t  var protoDesc = getDesc(ObjectProto, key);\n\t  if(protoDesc)delete ObjectProto[key];\n\t  setDesc(it, key, D);\n\t  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);\n\t} : setDesc;\n\n\tvar wrap = function(tag){\n\t  var sym = AllSymbols[tag] = _create($Symbol.prototype);\n\t  sym._k = tag;\n\t  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {\n\t    configurable: true,\n\t    set: function(value){\n\t      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n\t      setSymbolDesc(this, tag, createDesc(1, value));\n\t    }\n\t  });\n\t  return sym;\n\t};\n\n\tvar isSymbol = function(it){\n\t  return typeof it == 'symbol';\n\t};\n\n\tvar $defineProperty = function defineProperty(it, key, D){\n\t  if(D && has(AllSymbols, key)){\n\t    if(!D.enumerable){\n\t      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));\n\t      it[HIDDEN][key] = true;\n\t    } else {\n\t      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n\t      D = _create(D, {enumerable: createDesc(0, false)});\n\t    } return setSymbolDesc(it, key, D);\n\t  } return setDesc(it, key, D);\n\t};\n\tvar $defineProperties = function defineProperties(it, P){\n\t  anObject(it);\n\t  var keys = enumKeys(P = toIObject(P))\n\t    , i    = 0\n\t    , l = keys.length\n\t    , key;\n\t  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n\t  return it;\n\t};\n\tvar $create = function create(it, P){\n\t  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n\t};\n\tvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n\t  var E = isEnum.call(this, key);\n\t  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]\n\t    ? E : true;\n\t};\n\tvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n\t  var D = getDesc(it = toIObject(it), key);\n\t  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n\t  return D;\n\t};\n\tvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n\t  var names  = getNames(toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);\n\t  return result;\n\t};\n\tvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n\t  var names  = getNames(toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);\n\t  return result;\n\t};\n\tvar $stringify = function stringify(it){\n\t  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n\t  var args = [it]\n\t    , i    = 1\n\t    , $$   = arguments\n\t    , replacer, $replacer;\n\t  while($$.length > i)args.push($$[i++]);\n\t  replacer = args[1];\n\t  if(typeof replacer == 'function')$replacer = replacer;\n\t  if($replacer || !isArray(replacer))replacer = function(key, value){\n\t    if($replacer)value = $replacer.call(this, key, value);\n\t    if(!isSymbol(value))return value;\n\t  };\n\t  args[1] = replacer;\n\t  return _stringify.apply($JSON, args);\n\t};\n\tvar buggyJSON = $fails(function(){\n\t  var S = $Symbol();\n\t  // MS Edge converts symbol values to JSON as {}\n\t  // WebKit converts symbol values to JSON as null\n\t  // V8 throws on boxed symbols\n\t  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n\t});\n\n\t// 19.4.1.1 Symbol([description])\n\tif(!useNative){\n\t  $Symbol = function Symbol(){\n\t    if(isSymbol(this))throw TypeError('Symbol is not a constructor');\n\t    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));\n\t  };\n\t  redefine($Symbol.prototype, 'toString', function toString(){\n\t    return this._k;\n\t  });\n\n\t  isSymbol = function(it){\n\t    return it instanceof $Symbol;\n\t  };\n\n\t  $.create     = $create;\n\t  $.isEnum     = $propertyIsEnumerable;\n\t  $.getDesc    = $getOwnPropertyDescriptor;\n\t  $.setDesc    = $defineProperty;\n\t  $.setDescs   = $defineProperties;\n\t  $.getNames   = $names.get = $getOwnPropertyNames;\n\t  $.getSymbols = $getOwnPropertySymbols;\n\n\t  if(DESCRIPTORS && !__webpack_require__(90)){\n\t    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n\t  }\n\t}\n\n\tvar symbolStatics = {\n\t  // 19.4.2.1 Symbol.for(key)\n\t  'for': function(key){\n\t    return has(SymbolRegistry, key += '')\n\t      ? SymbolRegistry[key]\n\t      : SymbolRegistry[key] = $Symbol(key);\n\t  },\n\t  // 19.4.2.5 Symbol.keyFor(sym)\n\t  keyFor: function keyFor(key){\n\t    return keyOf(SymbolRegistry, key);\n\t  },\n\t  useSetter: function(){ setter = true; },\n\t  useSimple: function(){ setter = false; }\n\t};\n\t// 19.4.2.2 Symbol.hasInstance\n\t// 19.4.2.3 Symbol.isConcatSpreadable\n\t// 19.4.2.4 Symbol.iterator\n\t// 19.4.2.6 Symbol.match\n\t// 19.4.2.8 Symbol.replace\n\t// 19.4.2.9 Symbol.search\n\t// 19.4.2.10 Symbol.species\n\t// 19.4.2.11 Symbol.split\n\t// 19.4.2.12 Symbol.toPrimitive\n\t// 19.4.2.13 Symbol.toStringTag\n\t// 19.4.2.14 Symbol.unscopables\n\t$.each.call((\n\t  'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +\n\t  'species,split,toPrimitive,toStringTag,unscopables'\n\t).split(','), function(it){\n\t  var sym = wks(it);\n\t  symbolStatics[it] = useNative ? sym : wrap(sym);\n\t});\n\n\tsetter = true;\n\n\t$export($export.G + $export.W, {Symbol: $Symbol});\n\n\t$export($export.S, 'Symbol', symbolStatics);\n\n\t$export($export.S + $export.F * !useNative, 'Object', {\n\t  // 19.1.2.2 Object.create(O [, Properties])\n\t  create: $create,\n\t  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n\t  defineProperty: $defineProperty,\n\t  // 19.1.2.3 Object.defineProperties(O, Properties)\n\t  defineProperties: $defineProperties,\n\t  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n\t  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n\t  // 19.1.2.7 Object.getOwnPropertyNames(O)\n\t  getOwnPropertyNames: $getOwnPropertyNames,\n\t  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n\t  getOwnPropertySymbols: $getOwnPropertySymbols\n\t});\n\n\t// 24.3.2 JSON.stringify(value [, replacer [, space]])\n\t$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});\n\n\t// 19.4.3.5 Symbol.prototype[@@toStringTag]\n\tsetToStringTag($Symbol, 'Symbol');\n\t// 20.2.1.9 Math[@@toStringTag]\n\tsetToStringTag(Math, 'Math', true);\n\t// 24.3.3 JSON[@@toStringTag]\n\tsetToStringTag(global.JSON, 'JSON', true);\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar core = module.exports = {version: '1.2.6'};\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.3.19 Object.setPrototypeOf(O, proto)\n\tvar $export = __webpack_require__(80);\n\t$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(91).set});\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $Object = Object;\n\tmodule.exports = {\n\t  create:     $Object.create,\n\t  getProto:   $Object.getPrototypeOf,\n\t  isEnum:     {}.propertyIsEnumerable,\n\t  getDesc:    $Object.getOwnPropertyDescriptor,\n\t  setDesc:    $Object.defineProperty,\n\t  setDescs:   $Object.defineProperties,\n\t  getKeys:    $Object.keys,\n\t  getNames:   $Object.getOwnPropertyNames,\n\t  getSymbols: $Object.getOwnPropertySymbols,\n\t  each:       [].forEach\n\t};\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 Object.keys(O)\n\tvar toObject = __webpack_require__(92);\n\n\t__webpack_require__(93)('keys', function($keys){\n\t  return function keys(it){\n\t    return $keys(toObject(it));\n\t  };\n\t});\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.3.1 Object.assign(target, source)\n\tvar $export = __webpack_require__(80);\n\n\t$export($export.S + $export.F, 'Object', {assign: __webpack_require__(94)});\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar addToUnscopables = __webpack_require__(95)\n\t  , step             = __webpack_require__(96)\n\t  , Iterators        = __webpack_require__(70)\n\t  , toIObject        = __webpack_require__(88);\n\n\t// 22.1.3.4 Array.prototype.entries()\n\t// 22.1.3.13 Array.prototype.keys()\n\t// 22.1.3.29 Array.prototype.values()\n\t// 22.1.3.30 Array.prototype[@@iterator]()\n\tmodule.exports = __webpack_require__(72)(Array, 'Array', function(iterated, kind){\n\t  this._t = toIObject(iterated); // target\n\t  this._i = 0;                   // next index\n\t  this._k = kind;                // kind\n\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , kind  = this._k\n\t    , index = this._i++;\n\t  if(!O || index >= O.length){\n\t    this._t = undefined;\n\t    return step(1);\n\t  }\n\t  if(kind == 'keys'  )return step(0, index);\n\t  if(kind == 'values')return step(0, O[index]);\n\t  return step(0, [index, O[index]]);\n\t}, 'values');\n\n\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n\tIterators.Arguments = Iterators.Array;\n\n\taddToUnscopables('keys');\n\taddToUnscopables('values');\n\taddToUnscopables('entries');\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {};\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(97)\n\t  , defined   = __webpack_require__(98);\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tmodule.exports = function(TO_STRING){\n\t  return function(that, pos){\n\t    var s = String(defined(that))\n\t      , i = toInteger(pos)\n\t      , l = s.length\n\t      , a, b;\n\t    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar LIBRARY        = __webpack_require__(90)\n\t  , $export        = __webpack_require__(80)\n\t  , redefine       = __webpack_require__(81)\n\t  , hide           = __webpack_require__(99)\n\t  , has            = __webpack_require__(78)\n\t  , Iterators      = __webpack_require__(70)\n\t  , $iterCreate    = __webpack_require__(100)\n\t  , setToStringTag = __webpack_require__(83)\n\t  , getProto       = __webpack_require__(66).getProto\n\t  , ITERATOR       = __webpack_require__(61)('iterator')\n\t  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n\t  , FF_ITERATOR    = '@@iterator'\n\t  , KEYS           = 'keys'\n\t  , VALUES         = 'values';\n\n\tvar returnThis = function(){ return this; };\n\n\tmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n\t  $iterCreate(Constructor, NAME, next);\n\t  var getMethod = function(kind){\n\t    if(!BUGGY && kind in proto)return proto[kind];\n\t    switch(kind){\n\t      case KEYS: return function keys(){ return new Constructor(this, kind); };\n\t      case VALUES: return function values(){ return new Constructor(this, kind); };\n\t    } return function entries(){ return new Constructor(this, kind); };\n\t  };\n\t  var TAG        = NAME + ' Iterator'\n\t    , DEF_VALUES = DEFAULT == VALUES\n\t    , VALUES_BUG = false\n\t    , proto      = Base.prototype\n\t    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n\t    , $default   = $native || getMethod(DEFAULT)\n\t    , methods, key;\n\t  // Fix native\n\t  if($native){\n\t    var IteratorPrototype = getProto($default.call(new Base));\n\t    // Set @@toStringTag to native iterators\n\t    setToStringTag(IteratorPrototype, TAG, true);\n\t    // FF fix\n\t    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n\t    // fix Array#{values, @@iterator}.name in V8 / FF\n\t    if(DEF_VALUES && $native.name !== VALUES){\n\t      VALUES_BUG = true;\n\t      $default = function values(){ return $native.call(this); };\n\t    }\n\t  }\n\t  // Define iterator\n\t  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n\t    hide(proto, ITERATOR, $default);\n\t  }\n\t  // Plug for library\n\t  Iterators[NAME] = $default;\n\t  Iterators[TAG]  = returnThis;\n\t  if(DEFAULT){\n\t    methods = {\n\t      values:  DEF_VALUES  ? $default : getMethod(VALUES),\n\t      keys:    IS_SET      ? $default : getMethod(KEYS),\n\t      entries: !DEF_VALUES ? $default : getMethod('entries')\n\t    };\n\t    if(FORCED)for(key in methods){\n\t      if(!(key in proto))redefine(proto, key, methods[key]);\n\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n\t  }\n\t  return methods;\n\t};\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(101);\n\tmodule.exports = function(it){\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');\n\t  return it;\n\t};\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar classof   = __webpack_require__(102)\n\t  , ITERATOR  = __webpack_require__(61)('iterator')\n\t  , Iterators = __webpack_require__(70);\n\tmodule.exports = __webpack_require__(64).getIteratorMethod = function(it){\n\t  if(it != undefined)return it[ITERATOR]\n\t    || it['@@iterator']\n\t    || Iterators[classof(it)];\n\t};\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global = __webpack_require__(77)\n\t  , SHARED = '__core-js_shared__'\n\t  , store  = global[SHARED] || (global[SHARED] = {});\n\tmodule.exports = function(key){\n\t  return store[key] || (store[key] = {});\n\t};\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar id = 0\n\t  , px = Math.random();\n\tmodule.exports = function(key){\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tmodule.exports = function(it, key){\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Thank's IE8 for his funny defineProperty\n\tmodule.exports = !__webpack_require__(82)(function(){\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global    = __webpack_require__(77)\n\t  , core      = __webpack_require__(64)\n\t  , ctx       = __webpack_require__(103)\n\t  , PROTOTYPE = 'prototype';\n\n\tvar $export = function(type, name, source){\n\t  var IS_FORCED = type & $export.F\n\t    , IS_GLOBAL = type & $export.G\n\t    , IS_STATIC = type & $export.S\n\t    , IS_PROTO  = type & $export.P\n\t    , IS_BIND   = type & $export.B\n\t    , IS_WRAP   = type & $export.W\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n\t    , key, own, out;\n\t  if(IS_GLOBAL)source = name;\n\t  for(key in source){\n\t    // contains in native\n\t    own = !IS_FORCED && target && key in target;\n\t    if(own && key in exports)continue;\n\t    // export native or passed\n\t    out = own ? target[key] : source[key];\n\t    // prevent global pollution for namespaces\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n\t    // bind timers to global for call from export context\n\t    : IS_BIND && own ? ctx(out, global)\n\t    // wrap global constructors for prevent change them in library\n\t    : IS_WRAP && target[key] == out ? (function(C){\n\t      var F = function(param){\n\t        return this instanceof C ? new C(param) : C(param);\n\t      };\n\t      F[PROTOTYPE] = C[PROTOTYPE];\n\t      return F;\n\t    // make static versions for prototype methods\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n\t    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\n\t  }\n\t};\n\t// type bitmap\n\t$export.F = 1;  // forced\n\t$export.G = 2;  // global\n\t$export.S = 4;  // static\n\t$export.P = 8;  // proto\n\t$export.B = 16; // bind\n\t$export.W = 32; // wrap\n\tmodule.exports = $export;\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(99);\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(exec){\n\t  try {\n\t    return !!exec();\n\t  } catch(e){\n\t    return true;\n\t  }\n\t};\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar def = __webpack_require__(66).setDesc\n\t  , has = __webpack_require__(78)\n\t  , TAG = __webpack_require__(61)('toStringTag');\n\n\tmodule.exports = function(it, tag, stat){\n\t  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n\t};\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $         = __webpack_require__(66)\n\t  , toIObject = __webpack_require__(88);\n\tmodule.exports = function(object, el){\n\t  var O      = toIObject(object)\n\t    , keys   = $.getKeys(O)\n\t    , length = keys.length\n\t    , index  = 0\n\t    , key;\n\t  while(length > index)if(O[key = keys[index++]] === el)return key;\n\t};\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\tvar toIObject = __webpack_require__(88)\n\t  , getNames  = __webpack_require__(66).getNames\n\t  , toString  = {}.toString;\n\n\tvar windowNames = typeof window == 'object' && Object.getOwnPropertyNames\n\t  ? Object.getOwnPropertyNames(window) : [];\n\n\tvar getWindowNames = function(it){\n\t  try {\n\t    return getNames(it);\n\t  } catch(e){\n\t    return windowNames.slice();\n\t  }\n\t};\n\n\tmodule.exports.get = function getOwnPropertyNames(it){\n\t  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);\n\t  return getNames(toIObject(it));\n\t};\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// all enumerable object keys, includes symbols\n\tvar $ = __webpack_require__(66);\n\tmodule.exports = function(it){\n\t  var keys       = $.getKeys(it)\n\t    , getSymbols = $.getSymbols;\n\t  if(getSymbols){\n\t    var symbols = getSymbols(it)\n\t      , isEnum  = $.isEnum\n\t      , i       = 0\n\t      , key;\n\t    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);\n\t  }\n\t  return keys;\n\t};\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.2.2 IsArray(argument)\n\tvar cof = __webpack_require__(104);\n\tmodule.exports = Array.isArray || function(arg){\n\t  return cof(arg) == 'Array';\n\t};\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n\tvar IObject = __webpack_require__(105)\n\t  , defined = __webpack_require__(98);\n\tmodule.exports = function(it){\n\t  return IObject(defined(it));\n\t};\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t};\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = true;\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Works with __proto__ only. Old v8 can't work with null proto objects.\n\t/* eslint-disable no-proto */\n\tvar getDesc  = __webpack_require__(66).getDesc\n\t  , isObject = __webpack_require__(101)\n\t  , anObject = __webpack_require__(73);\n\tvar check = function(O, proto){\n\t  anObject(O);\n\t  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n\t};\n\tmodule.exports = {\n\t  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n\t    function(test, buggy, set){\n\t      try {\n\t        set = __webpack_require__(103)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);\n\t        set(test, []);\n\t        buggy = !(test instanceof Array);\n\t      } catch(e){ buggy = true; }\n\t      return function setPrototypeOf(O, proto){\n\t        check(O, proto);\n\t        if(buggy)O.__proto__ = proto;\n\t        else set(O, proto);\n\t        return O;\n\t      };\n\t    }({}, false) : undefined),\n\t  check: check\n\t};\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.13 ToObject(argument)\n\tvar defined = __webpack_require__(98);\n\tmodule.exports = function(it){\n\t  return Object(defined(it));\n\t};\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// most Object methods by ES6 should accept primitives\n\tvar $export = __webpack_require__(80)\n\t  , core    = __webpack_require__(64)\n\t  , fails   = __webpack_require__(82);\n\tmodule.exports = function(KEY, exec){\n\t  var fn  = (core.Object || {})[KEY] || Object[KEY]\n\t    , exp = {};\n\t  exp[KEY] = exec(fn);\n\t  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n\t};\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.1 Object.assign(target, source, ...)\n\tvar $        = __webpack_require__(66)\n\t  , toObject = __webpack_require__(92)\n\t  , IObject  = __webpack_require__(105);\n\n\t// should work with symbols and should have deterministic property order (V8 bug)\n\tmodule.exports = __webpack_require__(82)(function(){\n\t  var a = Object.assign\n\t    , A = {}\n\t    , B = {}\n\t    , S = Symbol()\n\t    , K = 'abcdefghijklmnopqrst';\n\t  A[S] = 7;\n\t  K.split('').forEach(function(k){ B[k] = k; });\n\t  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;\n\t}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n\t  var T     = toObject(target)\n\t    , $$    = arguments\n\t    , $$len = $$.length\n\t    , index = 1\n\t    , getKeys    = $.getKeys\n\t    , getSymbols = $.getSymbols\n\t    , isEnum     = $.isEnum;\n\t  while($$len > index){\n\t    var S      = IObject($$[index++])\n\t      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n\t      , length = keys.length\n\t      , j      = 0\n\t      , key;\n\t    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n\t  }\n\t  return T;\n\t} : Object.assign;\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(){ /* empty */ };\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(done, value){\n\t  return {value: value, done: !!done};\n\t};\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.4 ToInteger\n\tvar ceil  = Math.ceil\n\t  , floor = Math.floor;\n\tmodule.exports = function(it){\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tmodule.exports = function(it){\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n\t  return it;\n\t};\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $          = __webpack_require__(66)\n\t  , createDesc = __webpack_require__(89);\n\tmodule.exports = __webpack_require__(79) ? function(object, key, value){\n\t  return $.setDesc(object, key, createDesc(1, value));\n\t} : function(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t};\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar $              = __webpack_require__(66)\n\t  , descriptor     = __webpack_require__(89)\n\t  , setToStringTag = __webpack_require__(83)\n\t  , IteratorPrototype = {};\n\n\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\t__webpack_require__(99)(IteratorPrototype, __webpack_require__(61)('iterator'), function(){ return this; });\n\n\tmodule.exports = function(Constructor, NAME, next){\n\t  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});\n\t  setToStringTag(Constructor, NAME + ' Iterator');\n\t};\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(it){\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// getting tag from 19.1.3.6 Object.prototype.toString()\n\tvar cof = __webpack_require__(104)\n\t  , TAG = __webpack_require__(61)('toStringTag')\n\t  // ES3 wrong here\n\t  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n\tmodule.exports = function(it){\n\t  var O, T, B;\n\t  return it === undefined ? 'Undefined' : it === null ? 'Null'\n\t    // @@toStringTag case\n\t    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T\n\t    // builtinTag case\n\t    : ARG ? cof(O)\n\t    // ES3 arguments fallback\n\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n\t};\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// optional / simple context binding\n\tvar aFunction = __webpack_require__(106);\n\tmodule.exports = function(fn, that, length){\n\t  aFunction(fn);\n\t  if(that === undefined)return fn;\n\t  switch(length){\n\t    case 1: return function(a){\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function(a, b){\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function(a, b, c){\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function(/* ...args */){\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toString = {}.toString;\n\n\tmodule.exports = function(it){\n\t  return toString.call(it).slice(8, -1);\n\t};\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\tvar cof = __webpack_require__(104);\n\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n\t  return cof(it) == 'String' ? it.split('') : Object(it);\n\t};\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(it){\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n\t  return it;\n\t};\n\n/***/ }\n/******/ ])\n});\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},/*!*********************************!*\
  !*** ./components/download.vue ***!
  \*********************************/
function(module,exports,__webpack_require__){eval('\n/* styles */\n__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter?id=data-v-0daf62e7!./../../~/vue-loader/lib/selector?type=styles&index=0!./../../~/eslint-loader!./download.vue */ 23)\n\nvar Component = __webpack_require__(/*! ./../../~/vue-loader/lib/component-normalizer */ 0)(\n  /* script */\n  __webpack_require__(/*! !babel-loader!eslint-loader!./../../~/vue-loader/lib/selector?type=script&index=0!./../../~/eslint-loader!./download.vue */ 6),\n  /* template */\n  __webpack_require__(/*! !./../../~/vue-loader/lib/template-compiler?id=data-v-0daf62e7!./../../~/vue-loader/lib/selector?type=template&index=0!./../../~/eslint-loader!./download.vue */ 18),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = "/media/ext_disk/CODEARMADA/http/experiments/vue/app/src/components/download.vue"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}\nif (Component.options.functional) {console.error("[vue-loader] download.vue: functional components are not supported with templates, they should use render functions.")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-0daf62e7", Component.options)\n  } else {\n    hotAPI.reload("data-v-0daf62e7", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZT9iOGRkIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP2lkPWRhdGEtdi0wZGFmNjJlNyEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9kb3dubG9hZC52dWVcIilcblxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhZXNsaW50LWxvYWRlciEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9kb3dubG9hZC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi0wZGFmNjJlNyEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL2Rvd25sb2FkLnZ1ZVwiKSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBjc3NNb2R1bGVzICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL21lZGlhL2V4dF9kaXNrL0NPREVBUk1BREEvaHR0cC9leHBlcmltZW50cy92dWUvYXBwL3NyYy9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIGRvd25sb2FkLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0wZGFmNjJlN1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTBkYWY2MmU3XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbXBvbmVudHMvZG93bmxvYWQudnVlXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9')},/*!*****************************!*\
  !*** ./components/main.vue ***!
  \*****************************/
function(module,exports,__webpack_require__){eval('\n/* styles */\n__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter?id=data-v-7fb69b18!./../../~/vue-loader/lib/selector?type=styles&index=0!./../../~/eslint-loader!./main.vue */ 24)\n\nvar Component = __webpack_require__(/*! ./../../~/vue-loader/lib/component-normalizer */ 0)(\n  /* script */\n  __webpack_require__(/*! !babel-loader!eslint-loader!./../../~/vue-loader/lib/selector?type=script&index=0!./../../~/eslint-loader!./main.vue */ 7),\n  /* template */\n  __webpack_require__(/*! !./../../~/vue-loader/lib/template-compiler?id=data-v-7fb69b18!./../../~/vue-loader/lib/selector?type=template&index=0!./../../~/eslint-loader!./main.vue */ 22),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = "/media/ext_disk/CODEARMADA/http/experiments/vue/app/src/components/main.vue"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}\nif (Component.options.functional) {console.error("[vue-loader] main.vue: functional components are not supported with templates, they should use render functions.")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-7fb69b18", Component.options)\n  } else {\n    hotAPI.reload("data-v-7fb69b18", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4udnVlP2UwZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBzdHlsZXMgKi9cbnJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXI/aWQ9ZGF0YS12LTdmYjY5YjE4IS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL21haW4udnVlXCIpXG5cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIWVzbGludC1sb2FkZXIhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuLy4uLy4uL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi03ZmI2OWIxOCEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL21haW4udnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvbWVkaWEvZXh0X2Rpc2svQ09ERUFSTUFEQS9odHRwL2V4cGVyaW1lbnRzL3Z1ZS9hcHAvc3JjL2NvbXBvbmVudHMvbWFpbi52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleSAhPT0gXCJfX2VzTW9kdWxlXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBtYWluLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi03ZmI2OWIxOFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTdmYjY5YjE4XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbXBvbmVudHMvbWFpbi52dWVcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},/*!*****************************!*\
  !*** ./components/menu.vue ***!
  \*****************************/
function(module,exports,__webpack_require__){eval('var Component = __webpack_require__(/*! ./../../~/vue-loader/lib/component-normalizer */ 0)(\n  /* script */\n  __webpack_require__(/*! !babel-loader!eslint-loader!./../../~/vue-loader/lib/selector?type=script&index=0!./../../~/eslint-loader!./menu.vue */ 8),\n  /* template */\n  __webpack_require__(/*! !./../../~/vue-loader/lib/template-compiler?id=data-v-5c3a67be!./../../~/vue-loader/lib/selector?type=template&index=0!./../../~/eslint-loader!./menu.vue */ 20),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = "/media/ext_disk/CODEARMADA/http/experiments/vue/app/src/components/menu.vue"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}\nif (Component.options.functional) {console.error("[vue-loader] menu.vue: functional components are not supported with templates, they should use render functions.")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-5c3a67be", Component.options)\n  } else {\n    hotAPI.reload("data-v-5c3a67be", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21lbnUudnVlP2U4NzMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhZXNsaW50LWxvYWRlciEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9tZW51LnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/aWQ9ZGF0YS12LTVjM2E2N2JlIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuLy4uLy4uL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS4vbWVudS52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9tZWRpYS9leHRfZGlzay9DT0RFQVJNQURBL2h0dHAvZXhwZXJpbWVudHMvdnVlL2FwcC9zcmMvY29tcG9uZW50cy9tZW51LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIG1lbnUudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTVjM2E2N2JlXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNWMzYTY3YmVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29tcG9uZW50cy9tZW51LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},/*!*******************************!*\
  !*** ./components/topbar.vue ***!
  \*******************************/
function(module,exports,__webpack_require__){eval('var Component = __webpack_require__(/*! ./../../~/vue-loader/lib/component-normalizer */ 0)(\n  /* script */\n  __webpack_require__(/*! !babel-loader!eslint-loader!./../../~/vue-loader/lib/selector?type=script&index=0!./../../~/eslint-loader!./topbar.vue */ 10),\n  /* template */\n  __webpack_require__(/*! !./../../~/vue-loader/lib/template-compiler?id=data-v-2d6eb886!./../../~/vue-loader/lib/selector?type=template&index=0!./../../~/eslint-loader!./topbar.vue */ 19),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = "/media/ext_disk/CODEARMADA/http/experiments/vue/app/src/components/topbar.vue"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}\nif (Component.options.functional) {console.error("[vue-loader] topbar.vue: functional components are not supported with templates, they should use render functions.")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-2d6eb886", Component.options)\n  } else {\n    hotAPI.reload("data-v-2d6eb886", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3RvcGJhci52dWU/N2FhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciFlc2xpbnQtbG9hZGVyIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL3RvcGJhci52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi0yZDZlYjg4NiEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL3RvcGJhci52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9tZWRpYS9leHRfZGlzay9DT0RFQVJNQURBL2h0dHAvZXhwZXJpbWVudHMvdnVlL2FwcC9zcmMvY29tcG9uZW50cy90b3BiYXIudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gdG9wYmFyLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0yZDZlYjg4NlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTJkNmViODg2XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbXBvbmVudHMvdG9wYmFyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},/*!**********************************************************************************************************************************************************************!*\
  !*** ../~/vue-loader/lib/template-compiler.js?id=data-v-0daf62e7!../~/vue-loader/lib/selector.js?type=template&index=0!../~/eslint-loader!./components/download.vue ***!
  \**********************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'section\', {\n    staticClass: "Download",\n    style: ({\n      backgroundImage: ("url(" + _vm.backGround + ")"),\n    })\n  })\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require("vue-hot-reload-api").rerender("data-v-0daf62e7", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZT8zZDE5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnc2VjdGlvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJEb3dubG9hZFwiLFxuICAgIHN0eWxlOiAoe1xuICAgICAgYmFja2dyb3VuZEltYWdlOiAoXCJ1cmwoXCIgKyBfdm0uYmFja0dyb3VuZCArIFwiKVwiKSxcbiAgICB9KVxuICB9KVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0wZGFmNjJlN1wiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTBkYWY2MmU3IS4uL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4uL34vZXNsaW50LWxvYWRlciEuL2NvbXBvbmVudHMvZG93bmxvYWQudnVlXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==')},/*!********************************************************************************************************************************************************************!*\
  !*** ../~/vue-loader/lib/template-compiler.js?id=data-v-2d6eb886!../~/vue-loader/lib/selector.js?type=template&index=0!../~/eslint-loader!./components/topbar.vue ***!
  \********************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    staticClass: "Topbar"\n  }, [_c(\'div\', {\n    staticClass: "wrapper"\n  }, [_c(\'div\', {\n    staticClass: "logo"\n  }, [_c(\'svg\', {\n    attrs: {\n      "xmlns": "http://www.w3.org/2000/svg",\n      "viewBox": "0 0 168.24046 166.66701"\n    }\n  }, [_c(\'path\', {\n    attrs: {\n      "fill": "#211c1d",\n      "d": "M140.8508 80.52542c-.212-1.02267-.61066-1.83333-.42666-2.75067 1.28266.24534 2.50533.50534 3.84933.73467-.73333.672-1.64933 1.60267-3.42267 2.016zm-1.36933-22.528c-.83867-.29467-1.62-.99733-1.99067-1.78933 3.45067-.876 6.948-1.556 10.40667-2.3467.40267-.092.81867-.0774.204.2413-2.336 1.216-8.008 4.108-8.62 3.8946zm-4.19067 37.62c-1.09866-2.26134-.18266-5.43867-1.28266-7.76.79466-1.956.73333-4.27733 1.772-6.17067 1.46666 4.276 3.66533 10.204-.48934 13.93067zm-6.598 19.67333c-.1984-1.64933-.48906-3.05467-.2448-4.52133 1.34427-3.176 3.636-6.216 4.94947-9.104l1.46667 6.72133c-1.89467 2.38267-2.62707 6.23333-6.17134 6.904zm-5.1328-6.72133c-4.88746-.36534-9.65306-1.09867-14.48013-1.64934-.13387-1.11333-.16987-2.292-.34533-3.43866-.06507-.428-.3704-.548-.39227-.14934-.06093 1.09467-.16347 2.31467-.16347 3.43467-2.44426-.05867-4.71986-.51733-7.1636-.152 2.19894 1.16267 4.7656 1.40533 7.148 2.07867v2.932c-2.9324-.83067-5.9152-2.06134-8.85786-2.64934-.3068-.06133-.36614.23467-.08174.41734 2.72654 1.76133 6.00827 2.74266 8.9396 4.12533 0 2.99467 0 7.45467-.42706 10.99867-1.26094.26666-2.83134 1.17866-4.21987 1.288-.83333.06666-2.99067-1.96-3.54013-2.02134-.102 1.17067 1.83133 2.808.92666 4.028-.18186.24534-1.736.87467-2.69906.676-4.6176-3.37466-9.2348-6.92-14.01974-9.86133-.1532-.09333-.23693.28933-.0328.48133 4.12134 3.836 8.66667 7.10534 12.1588 11.70267-.6568.85467-1.34426 1.588-2.0776 2.38267-2.07653-1.03867-4.5364-1.29867-6.84266-1.64934-2.97814-4.35733-4.66254-9.312-7.1188-13.92-.26507-.49733-.60147-.45333-.47494.05734 1.1812 4.77333 3.17027 9.42133 4.6604 14.168-2.3828.61066-4.45986 2.13866-6.1708 3.84933-2.01613-1.528-3.6052-3.3-5.31613-5.13333.1124-5.98667.788-11.92134.99467-17.75867.0188-.53733-.23174-.632-.38067-.08133-1.6172 5.99466-3.974 16.496-3.974 16.496-3.23853.24533-7.1484.91733-10.264 1.58933-.55053-1.58933-1.4516-2.85733-3.10107-4.26267 3.77294-4.47066 7.89067-10.08 10.95054-15.02666.28493-.46134.1276-.652-.21827-.28534-3.93227 4.17067-7.59427 9.29334-12.0312 13.28134-3.17707-.54934-5.6208-3.116-9.3484-2.32134l.2448-4.4c4.36347-4.952 9.0676-8.596 13.3452-13.12933.1548-.164.14693-.55867-.19787-.34933-2.75 1.68-12.75 7.796-15.19946 9.08533-1.82867-2.21467-3.98654-4.1-5.96987-6.16 2.70053-.232 9.91307-.45467 13.7652-.56133 2.3896-.06667 2-.728.84013-.90667-2.0808-.32133-11.98493-1.64-16.4204-1.908.85054-3.028.98027-7.00133-.1224-9.96 5.49587-2.308 11.93227-2.34267 18.15107-2.904.69373-.064.63173-.356-.09427-.41867-6.37706-.556-13.01933-.71066-19.21773-1.26-1.5276-2.50533-2.87187-5.07066-5.0104-7.332.85627-2.628 1.58853-5.988 4.7052-7.02666 6.68027-2.22667 14.05467-2.8 20.7756-4.96.47133-.15067.3624-.39067-.1636-.35067-7.21307.53734-15.03693.484-22.3844.484-1.28227-.79466-2.07653-2.32133-2.62653-3.66533 1.28226-2.56667 3.1156-4.828 5.13173-7.028 1.43133-1.32533 3.5516-1.96 5.44427-1.50667.24853.06 10.29426 3.42667 17.15106 5.53734 1.1276.348 1.24374.056.33027-.3894-6.01933-2.9267-12.1048-6.2-18.09853-9.384 2.02666-2.1827 2.08906-5.732 3.45426-8.2547.68014-1.256 4.64-3.0174 5.2156-3.148 5.66147-1.296 8.85254-1.328 11.43227-6.1947 5.3156.9173 4.2792 15.6053 4.45253 17.8093.05.6426.46467.5786.50267-.0787.29693-5.1374.33547-10.812 1.09373-15.9574 6.69014.3814 13.99174-4.1546 16.37454-5.0106-.3584 7.0106-1.44534 13.8493-2.2912 20.588-.164 1.308.26253 1.3213.5896.012 1.55106-6.1934 2.67186-12.5747 4.0844-18.828 1.35773-.64 2.4016.2346 3.52493.968 1.45947.9533 4.96773 1.3533 4.96773 1.3533 1.3208 7.1813 2.75054 14.3627 4.39014 21.3907.2484 1.0693.63906.7706.5536-.4587-.26974-3.8734-1.264-18.5014-1.07654-21.052 1.7308-.5054 3.67814-1.1774 5.05307-1.9427 1.57773 2.2653 4.286 4.7946 4.3996 7.684-.862 6.3026-2.62667 12.4146-3.91053 18.504-.1724.8173.12453.9266.41626.1573 2.09467-5.5387 3.71454-11.28 6.1828-16.6454.51094-.6574 1.26347-.6374 2.0208-.476.50827.108 5.1276 2.6146 7.3276 2.8586.36667 3.6667 2.19894 7.516 5.74267 9.0427 0 0-6.67653 9.4546-10.2916 14.8293-.7276 1.0826-.5104 1.144.43013.2666 4.55894-4.2507 7.66667-9.0667 12.79427-12.7134-.79427 1.5293-.67187 3.6667-.91667 5.256-4.48386 3.2813-9.06613 6.6093-13.52653 9.7707-.52347.3706-.35773.592.2448.3226 4.5312-2.0227 9.08027-4.4867 13.77133-6.4267.36614 1.48.85467 2.1373 1.588 3.1146-1.588.6106-3.42133.5493-5.0104 1.1613 1.89427.8547 4.15467.672 6.17187 1.1613-.30627 1.8933 1.28227 3.2213 2.19893 4.2773-.8556 2.6866-2.5052 5.0093-2.5052 8.06392-5.51453-.772-11.2296-2.04266-16.60413-3.4053-.5792-.148-.63747.1093-.08533.372 4.94786 2.34663 10.3504 3.9573 15.40666 6.212 2.19947 2.3213.79427 6.108 2.01614 8.7973-5.0604-2.9413-9.44-7.75467-13.9588-12.09067-.174-.1667-.414.0506-.26507.2613 3.8276 5.41065 9.15 10.096 12.20773 15.8zm.30574 16.98533c-3.4672 2.98-7.88174 3.54533-7.88174 3.54533l1.89427-4.156 3.6656-3.17733c.55.06267 1.65-.18267 2.5052-.304.1224 1.648-.06093 2.64267-.18333 4.092zm-14.48014-16.556l13.19734 3.23733c1.03906.91734 1.03906 2.81067.54946 3.91067h-2.0156l-11.48693-3.91067zm2.4432 16.252c-.73226-.36533-1.58746-.91733-1.58746-1.89467l-.61147-9.22666 7.20933 2.628c.90787 1.17866.45267 1.896-.35 2.51733-.81773.63467-3.88066 4.14267-4.6604 5.976zm-3.28173 10.18267c-.32347.08266-3.9272.32666-5.0276 1.12133l-3.97147-1.04c.91667-2.444 4.33814-2.26 5.56054-4.704l3.66506-.97867c1.162.30667 2.2312.688 3.5448.97867-1.46466 1.464-1.72133 4.09067-3.77133 4.62267zm-17.06413 3.32c-3.05414.856-6.35467 1.956-9.71454 1.344.85574-1.588 2.688-2.81067 4.39894-3.23734l5.43853.85467zm-17.1312 1.90666c-.438-.21733-7.24747-2.02933-10.42454-2.212l-2.38333-2.62666c2.6276-.55067 5.3776-.672 8.0656-1.04 1.64947 2.2 3.91 3.60666 5.86573 5.44-.32613.68-.71.64266-1.12346.43866zm-23.07134-6.428c-2.38293-1.64933-4.0948-4.15466-5.43853-6.476 2.5052-1.16133 5.59053.32 6.5984 1.89467l2.2 3.54267zm-19.9188-18.08533c.97654-2.31467.52494-5.14667.24894-7.76933-.05254-.496.12186-.572.34173-.116 1.79053 3.72266 7.42333 7.92266 7.6348 8.13733 2.03493 2.08133-.14947 5.24133.99947 7.81333-4.15414-.73333-8.24787-3.788-9.22494-8.06533zm-6.7828-20.04133c.55054-2.872.85574-6.16934.30574-9.10267l.91667-1.344c1.3407 1.932 3.2407 3.812 4.2719 5.97067 1.8692 3.91066 1.575 6.58133.5552 11.80933-1.039-2.99467-3.3-5.744-6.0494-7.33333zm-1.58853-24.19467l2.0776-3.66666c.79427 1.6493 1.46613 3.4213 2.9328 4.828-1.038 1.648-2.19946 3.2986-2.5052 5.2546-1.22186-1.8334-2.13853-4.0947-2.5052-6.416zm5.43853-21.56933c3.5432-.73333 6.29267-3.36 9.34787-5.31467-.2448 2.872-2.87187 5.376-3.17707 8.55334-3.17706 1.6493-6.10986 5.0106-7.9432 8.0653-1.09946-4.1534 1.28334-7.5147 1.7724-11.304zM52.34707 33.0001c.2296.044 2.0484.784 2.90467.60132-1.15574 2.27333-3.28907 2.68267-5.4844 3.00133-2.6136.38267-6.04067 2.08134-8.18747 3.64267l-.13707-.59467c3.6068-2.38533 6.3276-7.48533 10.90427-6.65066zm10.0072-3.90535c3.97613-6.49466 12.04173-6.484 17.1844-.84-6.5692 5.34667-14.45 4.184-14.45 4.184-1.46667-1.03733-3.1776-1.588-5.0104-1.76933.42707-.49067 1.54213-1.208 2.276-1.57467zm34.60427-1.53733c.47546.33867 3.0176 2.37867 3.0176 2.37867-3.17707 3.6653-12.52814 1.5373-15.0916-2.2014 6.93066-2.8747 10.64786-1.196 12.074-.1774zm20.3088 10.32133l.73333 3.23734c-2.07813-1.1-4.15467-2.1987-6.59893-2.3827-1.46614-2.872-4.09374-5.5614-6.17094-8.3707 2.87147-.8547 7.072-.1974 12.03654 7.516zm7.02653 9.22667l2.9328.12c1.40467 1.77333 1.8792 3.788 2.19893 6.04933-1.34373-.85466-5.43746-1.95466-5.13173-6.16933zm8.5536 11.852c1.28333 1.344 2.56733 3.36133 4.39933 3.84933.18267 3.29867-.244 7.08667-1.344 10.26534-1.34533-.2454-2.74426-5.5694-3.33133-6.8-1.59733-3.356.276-7.3147.276-7.3147zm34.78466 25.272c-4.612-1.83733-19.14266-6.45467-19.14266-6.45467 2.152-1.95333 4.59467-3.65866 6.64933-5.69066.45067-.448.276-.7027-.232-.3547-2.716 1.864-5.40933 3.736-8.18933 5.436-2.016-.7334-3.48267-1.4827-5.988-2.628 2.13867-4.216.916-9.4094 2.50533-13.624l12.036-8.9814s4.66-1.208 6.52533-1.5947c1.904-.3934 2.04534-.732.06534-.584-1.45734.108-3.43067.3733-4.2.412 1.032-.8187 2.30533-1.744 3.23466-2.644.252-.244.34267-.544-.17733-.26-2.04 1.1133-7.06533 3.8546-7.16666 3.8706-6.27867.9493-18.05067 3.1266-18.94267 1.1333-1.04533-2.3307-1.414-4.9907-2.3724-7.3614 5.68307-6.9787 13.18307-12.4014 19.4884-17.9427.54-.4733.43467-.8413-.7-.0813-5.65733 3.7893-22.13 15-22.52747 15.0266-1.20306.0866-3.3484.236-3.51866.2293-1.37654-.0547-2.01614-.8707-2.0656-1.9827-.07147-1.588-.13187-3.1494-.81987-4.3534 3.76253-6.7374 8.14427-13.476 11.81693-20.0747.324-.58.168-.7413-.22533-.2427-4.64467 5.8787-9.44107 11.8654-14.34107 17.3854-.7792-.52-1.37546-1.24-1.9484-1.9974-.90986-1.2054-5.0932-4.6774-6.3912-5.06.076-1.68 3.8-13.8494 5.05934-18.248.29226-1.0214-.01707-.7334-.25614-.276-2.93333 5.6-5.50626 11.56-7.93493 17.3786-1.5276-.2293-3.55893-.3507-5.08653.8707-1.03907-.3067-2.01614-1.2827-2.5052-2.2.9844-5.6974 2.61986-13.8294 3.6204-19.4454.1796-1.0067.16346-1.8573-.3928-.132-1.6348 5.068-5.464 17.4613-6.514 19.0093-3.41614-1.288-7.52867-.76-11.07134-.2867-.65413-.5453-4.51253-13.18-7.074-20.6787-.31093-.9134-.676-1.4894-.37973.088 1.1532 6.1187 3.87973 21.0947 3.05427 21.62932-1.46667-1.528-7.25574-4.20137-9.28707-4.584-2.96187-5.8673-4.7916-12.278-7.21147-18.4327-.276-.70266-.53426-.656-.36613.06 1.41827 6.024 3.20107 11.91867 3.91147 18.252-1.25254 1.17867-2.7484 1.69067-4.22134 2.288-1.18493.47867-3.82866 2.03467-5.4328 4.12667-3.37493-4.888-6.42973-10.2853-9.54693-15.304-.37333-.604-.64573-.4813-.36507.2227 2.46934 6.2 6.24694 18.19864 6.24694 18.19864-6.75987-3.116-11.59694 2.5894-16.30627 6.672-1.0604.92-1.5828.684-2.27507.3-4.4984-2.5026-8.2452-6.8213-12.32653-10.3653-.3464-.3-.58533-.1746-.31306.212 3.2683 4.6427 10.1595 12.0307 10.4204 12.2787.8479.7973 1.523 1.7933 1.6146 2.756-4.0322 1.772-7.1489 6.1707-12.0364 5.316-4.0469-2.5227-7.4609-6.8533-10.8255-10.1947-.5468-.5426-1.1619-.8866-.3994.156 2.7328 3.7414 9.1428 12.544 10.4917 14.6827-1.5276 4.0933-2.9937 9.0413-1.3437 13.5026-1.3448 1.2813-2.139 2.704-2.9333 4.276-6.0167-.764-12.2313-1.188-18.3776-1.708-.7182-.06-.8619.168-.2213.3386 5.7135 1.532 11.2296 2.8347 17.4385 4.7307-.1224 4.1546 1.8015 7.8973 3.6656 11.4253-.1724.3106-.7177 1.0533-1.3286 1.2066-3.3598.2853-13.5755.68-18.8646.9933-1.8052.1067-1.5885.4787-.4515.528 7.4625.324 18.3235 1.244 18.3235 1.244 1.527 3.2387.9161 7.7587-.6115 10.8747-5.5319 2.2027-11.4173 3.7787-17.0897 5.5134-1.4073.4293-1.6391.9413.9744.3987 6.7901-1.4106 18.536-3.736 20.6787-2.0586.8219.6413 6.6058 10.5413 1.7298 14.9053-5.3693 1.872-14.2719 4.412-19.5391 6.384-1.2651.472-1.1922.8813.262.5506 7.5589-1.7173 21.049-4.736 21.049-4.736 1.7109 5.0107 6.2317 8.92 11.12027 10.5707-4.0629 6.004-7.6292 13.2827-11.1661 19.7494-.6005 1.0987-.4197 1.6253.59178.064 4.2952-6.6333 8.84378-13.1267 13.69058-19.5693 1.34426 3.29864 4.0937 6.232 6.7213 8.676-3.526 5.74264-8.4629 10.944-12.92903 16.324-.95264 1.148-1.50944 2.2613.45576.44264 5.8672-5.4307 17.9749-16.2787 21.2713-16.46.64267.84265 1.84787 2.844 2.50467 3.5733.2292 1.14663-3.03022 15.964-4.9609 23.90663-.2667 1.1.0136 1.164.4036.08268 2.699-7.4626 5.1958-15.0493 8.3463-22.3093 0 0 9.04217.97736 10.7527 2.628-2.2111 5.80936-5.5032 11.1427-8.4939 16.584-.5629 1.02536-.2462 1.3067.4339.408 4.6547-6.148 8.7152-12.51864 13.1928-18.70264 0 0 1.16097.38 1.32857.6867.3147.57333-2.3604 10.87066-3.8946 16.80266-.5595 2.1627-.11 2.1134.3394.9014 2.21-5.956 3.8563-12.104 7.35893-17.536 3.66612.7947 6.53745-1.284 9.95932-1.588 3.8636 3.968 6.2136 8.808 8.75893 13.48537.3932.724.68372.544.3916-.2493-2.04428-5.56137-5.0645-10.8067-6.40108-16.4747 2.74948.184 5.43748.4267 7.33175 2.628 2.3532 4.552 5.0053 9.01735 7.7073 13.4347.52503.8587.8693.8587.43703-.128-2.4579-5.608-6.2772-13.4346-6.3235-13.6266-.3797-1.536.6162-1.9507 1.9178-2.1614 3.2244-.5173 6.3124-2.53866 7.5651-5.4613 1.0995-.3067 2.4443-1.2227 3.5437-.24535 4.5678 4.0653 8.6807 8.832 12.8156 13.0133.8984.908 1.7699 1.41865.3776-.3707-3.4781-4.47466-9.815-12.5733-11.5666-14.4613 3.338-.46 5.80105-4.044 9.4885-3.6307.1823.02137 11.4175 3.688 16.8815 5.47337 1.75866.5733 1.0493.0186.112-.4387-6.0027-2.9427-12.068-5.748-17.72214-9.6067.1839-1.45068.26-2.672-.0452-4.352 4.582-.42668 7.49937-5.484 10.0047-8.6613 7.5973-.536 14.7253 1.412 22 2.6027 1.0333.1693 1.128-.1227.1013-.4334-6.872-2.08-14.7133-4.784-21.49064-6.64536-.152-2.5213-.1827-4.56667-1.16-7.43867 4.276-4.216 5.74267-10.8747 3.4813-16.5587 1.72668-1.74 3.3-3.0547 5.01068-4.3987 0 0 15.51336 4.552 20.556 5.6627.972.2147 1.052-.14264.176-.492"\n    }\n  })])]), _vm._v(" "), _c(\'div\', {\n    staticClass: "info"\n  }), _vm._v(" "), _c(\'div\', {\n    staticClass: "actions"\n  }, [_c(\'span\', {\n    ref: "settings",\n    staticClass: "settings",\n    on: {\n      "click": _vm.toggleMenu\n    }\n  }, [_c(\'svg\', {\n    ref: "dots",\n    attrs: {\n      "width": "24",\n      "height": "24"\n    }\n  }, [_c(\'path\', {\n    attrs: {\n      "fill": "none",\n      "d": "M0 0h24v24H0z"\n    }\n  }), _c(\'path\', {\n    attrs: {\n      "d": "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"\n    }\n  })])]), _vm._v(" "), _c(\'menu-items\')], 1)])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require("vue-hot-reload-api").rerender("data-v-2d6eb886", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},/*!******************************************************************************************************************************************************************!*\
  !*** ../~/vue-loader/lib/template-compiler.js?id=data-v-5c3a67be!../~/vue-loader/lib/selector.js?type=template&index=0!../~/eslint-loader!./components/menu.vue ***!
  \******************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    staticClass: "Menu",\n    class: {\n      \'show\': _vm.menuActivity\n    }\n  }, [_c(\'ul\', _vm._l((_vm.menu_items), function(item, index) {\n    return _c(\'li\', {\n      staticClass: "menu_item",\n      class: {\n        \'active\': _vm.itemActivity === index\n      },\n      on: {\n        "click": function($event) {\n          _vm.setActivity(index)\n        }\n      }\n    }, [_vm._v("\\n\\t\\t\\t" + _vm._s(item.title) + "\\n\\t\\t")])\n  }))])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require("vue-hot-reload-api").rerender("data-v-5c3a67be", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21lbnUudnVlP2Q1OTUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiTWVudVwiLFxuICAgIGNsYXNzOiB7XG4gICAgICAnc2hvdyc6IF92bS5tZW51QWN0aXZpdHlcbiAgICB9XG4gIH0sIFtfYygndWwnLCBfdm0uX2woKF92bS5tZW51X2l0ZW1zKSwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICByZXR1cm4gX2MoJ2xpJywge1xuICAgICAgc3RhdGljQ2xhc3M6IFwibWVudV9pdGVtXCIsXG4gICAgICBjbGFzczoge1xuICAgICAgICAnYWN0aXZlJzogX3ZtLml0ZW1BY3Rpdml0eSA9PT0gaW5kZXhcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBcImNsaWNrXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgIF92bS5zZXRBY3Rpdml0eShpbmRleClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcIiArIF92bS5fcyhpdGVtLnRpdGxlKSArIFwiXFxuXFx0XFx0XCIpXSlcbiAgfSkpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNWMzYTY3YmVcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP2lkPWRhdGEtdi01YzNhNjdiZSEuLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuLi9+L2VzbGludC1sb2FkZXIhLi9jb21wb25lbnRzL21lbnUudnVlXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==')},/*!******************************************************************************************************************************************************************!*\
  !*** ../~/vue-loader/lib/template-compiler.js?id=data-v-764559c1!../~/vue-loader/lib/selector.js?type=template&index=0!../~/eslint-loader!./components/root.vue ***!
  \******************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    staticClass: "App"\n  }, [_c(\'topbar\'), _vm._v(" "), _c(\'main-area\')], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require("vue-hot-reload-api").rerender("data-v-764559c1", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3Jvb3QudnVlP2RhNDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiQXBwXCJcbiAgfSwgW19jKCd0b3BiYXInKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ21haW4tYXJlYScpXSwgMSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNzY0NTU5YzFcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP2lkPWRhdGEtdi03NjQ1NTljMSEuLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuLi9+L2VzbGludC1sb2FkZXIhLi9jb21wb25lbnRzL3Jvb3QudnVlXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==')},/*!******************************************************************************************************************************************************************!*\
  !*** ../~/vue-loader/lib/template-compiler.js?id=data-v-7fb69b18!../~/vue-loader/lib/selector.js?type=template&index=0!../~/eslint-loader!./components/main.vue ***!
  \******************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    staticClass: "Main"\n  }, [_c(\'div\', {\n    staticClass: "wrapper"\n  }, [_c(\'download\')], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require("vue-hot-reload-api").rerender("data-v-7fb69b18", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4udnVlPzdmMzEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiTWFpblwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcIndyYXBwZXJcIlxuICB9LCBbX2MoJ2Rvd25sb2FkJyldLCAxKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTdmYjY5YjE4XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtN2ZiNjliMTghLi4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi4vfi9lc2xpbnQtbG9hZGVyIS4vY29tcG9uZW50cy9tYWluLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9')},/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../~/vue-style-loader!../~/css-loader?sourceMap!../~/vue-loader/lib/style-rewriter.js?id=data-v-0daf62e7!../~/vue-loader/lib/selector.js?type=styles&index=0!../~/eslint-loader!./components/download.vue ***!
  \*****************************************************************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=data-v-0daf62e7!./../../~/vue-loader/lib/selector.js?type=styles&index=0!./../../~/eslint-loader!./download.vue */ 11);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(/*! ./../../~/vue-style-loader/lib/addStylesClient.js */ 4)(\"5132a4ad\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-0daf62e7!./../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./../../node_modules/eslint-loader/index.js!./download.vue\", function() {\n     var newContent = require(\"!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-0daf62e7!./../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./../../node_modules/eslint-loader/index.js!./download.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Rvd25sb2FkLnZ1ZT84MzlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz9pZD1kYXRhLXYtMGRhZjYyZTchLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuLy4uLy4uL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS4vZG93bmxvYWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjUxMzJhNGFkXCIsIGNvbnRlbnQsIGZhbHNlKTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi0wZGFmNjJlNyEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9kb3dubG9hZC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTBkYWY2MmU3IS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL2Rvd25sb2FkLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi92dWUtc3R5bGUtbG9hZGVyIS4uL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz9pZD1kYXRhLXYtMGRhZjYyZTchLi4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4uL34vZXNsaW50LWxvYWRlciEuL2NvbXBvbmVudHMvZG93bmxvYWQudnVlXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==")},/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../~/vue-style-loader!../~/css-loader?sourceMap!../~/vue-loader/lib/style-rewriter.js?id=data-v-7fb69b18!../~/vue-loader/lib/selector.js?type=styles&index=0!../~/eslint-loader!./components/main.vue ***!
  \*************************************************************************************************************************************************************************************************************/
function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=data-v-7fb69b18!./../../~/vue-loader/lib/selector.js?type=styles&index=0!./../../~/eslint-loader!./main.vue */ 12);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(/*! ./../../~/vue-style-loader/lib/addStylesClient.js */ 4)(\"05acdda8\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7fb69b18!./../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./../../node_modules/eslint-loader/index.js!./main.vue\", function() {\n     var newContent = require(\"!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7fb69b18!./../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./../../node_modules/eslint-loader/index.js!./main.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4udnVlPzJjOWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi03ZmI2OWIxOCEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanMhLi9tYWluLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIwNWFjZGRhOFwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz9pZD1kYXRhLXYtN2ZiNjliMTghLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuLy4uLy4uL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTdmYjY5YjE4IS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEuL21haW4udnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi03ZmI2OWIxOCEuLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi4vfi9lc2xpbnQtbG9hZGVyIS4vY29tcG9uZW50cy9tYWluLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=")},/*!*************************************************!*\
  !*** ../~/vue-style-loader/lib/listToStyles.js ***!
  \*************************************************/
function(module,exports){eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanM/ODFlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},/*!******************************!*\
  !*** ../~/vuex/dist/vuex.js ***!
  \******************************/
function(module,exports,__webpack_require__){eval("/**\n * vuex v2.1.1\n * (c) 2016 Evan You\n * @license MIT\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Vuex = factory());\n}(this, (function () { 'use strict';\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook\n\n  devtoolHook.emit('vuex:init', store)\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState)\n  })\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state)\n  })\n}\n\nfunction applyMixin (Vue) {\n  var version = Number(Vue.version.split('.')[0])\n\n  if (version >= 2) {\n    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit })\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit\n      _init.call(this, options)\n    }\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options\n    // store injection\n    if (options.store) {\n      this.$store = options.store\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store\n    }\n  }\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {}\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state\n      var getters = this.$store.getters\n      if (namespace) {\n        var module = this.$store._modulesNamespaceMap[namespace]\n        if (!module) {\n          warnNamespace('mapState', namespace)\n          return\n        }\n        state = module.state\n        getters = module.context.getters\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    }\n  })\n  return res\n})\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {}\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return this.$store.commit.apply(this.$store, [val].concat(args))\n    }\n  })\n  return res\n})\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {}\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val\n    res[key] = function mappedGetter () {\n      if (!(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val))\n      }\n      return this.$store.getters[val]\n    }\n  })\n  return res\n})\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {}\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return this.$store.dispatch.apply(this.$store, [val].concat(args))\n    }\n  })\n  return res\n})\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace\n      namespace = ''\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/'\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction warnNamespace (helper, namespace) {\n  console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace))\n}\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); })\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime\n  this._children = Object.create(null)\n  this._rawModule = rawModule\n};\n\nvar prototypeAccessors$1 = { state: {},namespaced: {} };\n\nprototypeAccessors$1.state.get = function () {\n  return this._rawModule.state || {}\n};\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key]\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn)\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn)\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn)\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn)\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  var this$1 = this;\n\n  // register root module (Vuex.Store options)\n  this.root = new Module(rawRootModule, false)\n\n  // register all nested modules\n  if (rawRootModule.modules) {\n    forEachValue(rawRootModule.modules, function (rawModule, key) {\n      this$1.register([key], rawModule, false)\n    })\n  }\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key)\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update(this.root, rawRootModule)\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  var parent = this.get(path.slice(0, -1))\n  var newModule = new Module(rawModule, runtime)\n  parent.addChild(path[path.length - 1], newModule)\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime)\n    })\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1))\n  var key = path[path.length - 1]\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key)\n};\n\nfunction update (targetModule, newModule) {\n  // update target module\n  targetModule.update(newModule)\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        console.warn(\n          \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n          'manual reload is needed'\n        )\n        return\n      }\n      update(targetModule.getChild(key), newModule.modules[key])\n    }\n  }\n}\n\nvar Vue // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\")\n  assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\")\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false\n  this._actions = Object.create(null)\n  this._mutations = Object.create(null)\n  this._wrappedGetters = Object.create(null)\n  this._modules = new ModuleCollection(options)\n  this._modulesNamespaceMap = Object.create(null)\n  this._subscribers = []\n  this._watcherVM = new Vue()\n\n  // bind commit and dispatch to self\n  var store = this\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n    this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  }\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n    }\n\n    // strict mode\n  this.strict = strict\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root)\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state)\n\n  // apply plugins\n  plugins.concat(devtoolPlugin).forEach(function (plugin) { return plugin(this$1); })\n};\n\nvar prototypeAccessors = { state: {} };\n\nprototypeAccessors.state.get = function () {\n  return this._vm.$data.state\n};\n\nprototypeAccessors.state.set = function (v) {\n  assert(false, \"Use store.replaceState() to explicit replace store state.\")\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload }\n  var entry = this._mutations[type]\n  if (!entry) {\n    console.error((\"[vuex] unknown mutation type: \" + type))\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload)\n    })\n  })\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); })\n\n  if (options && options.silent) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    )\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var entry = this._actions[type]\n  if (!entry) {\n    console.error((\"[vuex] unknown action type: \" + type))\n    return\n  }\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  var subs = this._subscribers\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn)\n  }\n  return function () {\n    var i = subs.indexOf(fn)\n    if (i > -1) {\n      subs.splice(i, 1)\n    }\n  }\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  assert(typeof getter === 'function', \"store.watch only accepts a function.\")\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm.state = state\n  })\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule) {\n  if (typeof path === 'string') { path = [path] }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\")\n  this._modules.register(path, rawModule)\n  installModule(this, this.state, path, this._modules.get(path))\n  // reset store to update getters...\n  resetStoreVM(this, this.state)\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path] }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\")\n    this._modules.unregister(path)\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1))\n    Vue.delete(parentState, path[path.length - 1])\n  })\n  resetStore(this)\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions)\n  resetStore(this)\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing\n  this._committing = true\n  fn()\n  this._committing = committing\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction resetStore (store) {\n  store._actions = Object.create(null)\n  store._mutations = Object.create(null)\n  store._wrappedGetters = Object.create(null)\n  store._modulesNamespaceMap = Object.create(null)\n  var state = store.state\n  // init all modules\n  installModule(store, state, [], store._modules.root, true)\n  // reset vm\n  resetStoreVM(store, state)\n}\n\nfunction resetStoreVM (store, state) {\n  var oldVm = store._vm\n\n  // bind store public getters\n  store.getters = {}\n  var wrappedGetters = store._wrappedGetters\n  var computed = {}\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); }\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    })\n  })\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent\n  Vue.config.silent = true\n  store._vm = new Vue({\n    data: { state: state },\n    computed: computed\n  })\n  Vue.config.silent = silent\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store)\n  }\n\n  if (oldVm) {\n    // dispatch changes in all subscribed watchers\n    // to force getter re-evaluation.\n    store._withCommit(function () {\n      oldVm.state = null\n    })\n    Vue.nextTick(function () { return oldVm.$destroy(); })\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length\n  var namespace = store._modules.getNamespace(path)\n\n  // register in namespace map\n  if (namespace) {\n    store._modulesNamespaceMap[namespace] = module\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1))\n    var moduleName = path[path.length - 1]\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state)\n    })\n  }\n\n  var local = module.context = makeLocalContext(store, namespace)\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key\n    registerMutation(store, namespacedType, mutation, path)\n  })\n\n  module.forEachAction(function (action, key) {\n    var namespacedType = namespace + key\n    registerAction(store, namespacedType, action, local, path)\n  })\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key\n    registerGetter(store, namespacedType, getter, local, path)\n  })\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot)\n  })\n}\n\n/**\n * make localized dispatch, commit and getters\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace) {\n  var noNamespace = namespace === ''\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options)\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type\n        if (!store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type))\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options)\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type\n        if (!store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type))\n          return\n        }\n      }\n\n      store.commit(type, payload, options)\n    }\n  }\n\n  // getters object must be gotten lazily\n  // because store.getters will be changed by vm update\n  Object.defineProperty(local, 'getters', {\n    get: noNamespace ? function () { return store.getters; } : function () { return makeLocalGetters(store, namespace); }\n  })\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {}\n\n  var splitPos = namespace.length\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos)\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    })\n  })\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, path) {\n  var entry = store._mutations[type] || (store._mutations[type] = [])\n  entry.push(function wrappedMutationHandler (payload) {\n    handler(getNestedState(store.state, path), payload)\n  })\n}\n\nfunction registerAction (store, type, handler, local, path) {\n  var entry = store._actions[type] || (store._actions[type] = [])\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: getNestedState(store.state, path),\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  })\n}\n\nfunction registerGetter (store, type, rawGetter, local, path) {\n  if (store._wrappedGetters[type]) {\n    console.error((\"[vuex] duplicate getter key: \" + type))\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      getNestedState(store.state, path), // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  }\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch('state', function () {\n    assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\")\n  }, { deep: true, sync: true })\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload\n    payload = type\n    type = type.type\n  }\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue) {\n    console.error(\n      '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n    )\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n\n// auto install in dist mode\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue)\n}\n\nvar index = {\n  Store: Store,\n  install: install,\n  version: '2.1.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions\n}\n\nreturn index;\n\n})));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},/*!**************************************!*\
  !*** ../~/webpack/buildin/global.js ***!
  \**************************************/
function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzPzYyYTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},/*!****************!*\
  !*** ./app.js ***!
  \****************/
function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _vue = __webpack_require__(/*! vue */ 2);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _root = __webpack_require__(/*! ./components/root.vue */ 5);\n\nvar _root2 = _interopRequireDefault(_root);\n\nvar _store = __webpack_require__(/*! ./store/store */ 1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _vue2.default({\n\tel: '#app',\n\tstore: _store.store,\n\tcomponents: { root: _root2.default }\n}); /*=============================================>>>>>\n    = VEU APP =\n    ===============================================>>>>>*/\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAuanMiXSwibmFtZXMiOlsiZWwiLCJzdG9yZSIsImNvbXBvbmVudHMiLCJyb290Il0sIm1hcHBpbmdzIjoiOztBQUlBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLGtCQUFRO0FBQ1BBLEtBQUksTUFERztBQUVQQyxvQkFGTztBQUdQQyxhQUFZLEVBQUVDLG9CQUFGO0FBSEwsQ0FBUixFLENBUkEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Ii9tZWRpYS9leHRfZGlzay9DT0RFQVJNQURBL2h0dHAvZXhwZXJpbWVudHMvdnVlL2FwcCIsInNvdXJjZXNDb250ZW50IjpbIi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Pj4+Pj5cbj0gVkVVIEFQUCA9XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT4+Pj4+Ki9cblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9jb21wb25lbnRzL3Jvb3QudnVlJztcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi9zdG9yZS9zdG9yZSc7XG5cbm5ldyBWdWUoe1xuXHRlbDogJyNhcHAnLFxuXHRzdG9yZTogc3RvcmUsXG5cdGNvbXBvbmVudHM6IHsgcm9vdCB9XG59KVxuIl19//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAuanM/ZGE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfdnVlID0gcmVxdWlyZSgndnVlJyk7XG5cbnZhciBfdnVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Z1ZSk7XG5cbnZhciBfcm9vdCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9yb290LnZ1ZScpO1xuXG52YXIgX3Jvb3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm9vdCk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlL3N0b3JlJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm5ldyBfdnVlMi5kZWZhdWx0KHtcblx0ZWw6ICcjYXBwJyxcblx0c3RvcmU6IF9zdG9yZS5zdG9yZSxcblx0Y29tcG9uZW50czogeyByb290OiBfcm9vdDIuZGVmYXVsdCB9XG59KTsgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0+Pj4+PlxuICAgID0gVkVVIEFQUCA9XG4gICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0+Pj4+PiovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OWhjSEF1YW5NaVhTd2libUZ0WlhNaU9sc2laV3dpTENKemRHOXlaU0lzSW1OdmJYQnZibVZ1ZEhNaUxDSnliMjkwSWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVsQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVVZCTEd0Q1FVRlJPMEZCUTFCQkxFdEJRVWtzVFVGRVJ6dEJRVVZRUXl4dlFrRkdUenRCUVVkUVF5eGhRVUZaTEVWQlFVVkRMRzlDUVVGR08wRkJTRXdzUTBGQlVpeEZMRU5CVWtFaUxDSm1hV3hsSWpvaVlYQndMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTl0WldScFlTOWxlSFJmWkdsemF5OURUMFJGUVZKTlFVUkJMMmgwZEhBdlpYaHdaWEpwYldWdWRITXZkblZsTDJGd2NDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UGo0K1BqNWNiajBnVmtWVklFRlFVQ0E5WEc0OVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUNCtQajQrS2k5Y2JseHVhVzF3YjNKMElGWjFaU0JtY205dElDZDJkV1VuTzF4dWFXMXdiM0owSUhKdmIzUWdabkp2YlNBbkxpOWpiMjF3YjI1bGJuUnpMM0p2YjNRdWRuVmxKenRjYm1sdGNHOXlkQ0I3SUhOMGIzSmxJSDBnWm5KdmJTQW5MaTl6ZEc5eVpTOXpkRzl5WlNjN1hHNWNibTVsZHlCV2RXVW9lMXh1WEhSbGJEb2dKeU5oY0hBbkxGeHVYSFJ6ZEc5eVpUb2djM1J2Y21Vc1hHNWNkR052YlhCdmJtVnVkSE02SUhzZ2NtOXZkQ0I5WEc1OUtWeHVJbDE5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAuanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=")}]);